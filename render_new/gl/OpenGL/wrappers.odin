package vendor_gl;

when ODIN_DEBUG {
////////functions without return values////////
// VERSION_1_0
	 CullFace :: proc "c" (mode : GLenum, loc := #caller_location) { impl_CullFace(cast(u32)mode); debug_helper(loc, nil, mode); };
	 FrontFace :: proc "c" (mode : GLenum, loc := #caller_location) { impl_FrontFace(cast(u32)mode); debug_helper(loc, nil, mode); };
	 Hint :: proc "c" (target : GLenum, mode : GLenum, loc := #caller_location) { impl_Hint(cast(u32)target, cast(u32)mode); debug_helper(loc, nil, target, mode); };
	 LineWidth :: proc "c" (width : GLfloat, loc := #caller_location) { impl_LineWidth(width); debug_helper(loc, nil, width); };
	 PointSize :: proc "c" (size : GLfloat, loc := #caller_location) { impl_PointSize(size); debug_helper(loc, nil, size); };
	 PolygonMode :: proc "c" (face : GLenum, mode : GLenum, loc := #caller_location) { impl_PolygonMode(cast(u32)face, cast(u32)mode); debug_helper(loc, nil, face, mode); };
	 Scissor :: proc "c" (x : GLint, y : GLint, width : GLsizei, height : GLsizei, loc := #caller_location) { impl_Scissor(x, y, width, height); debug_helper(loc, nil, x, y, width, height); };
	 TexParameterf :: proc "c" (target : GLenum, pname : GLenum, param : GLfloat, loc := #caller_location) { impl_TexParameterf(cast(u32)target, cast(u32)pname, param); debug_helper(loc, nil, target, pname, param); };
	 TexParameterfv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLfloat, loc := #caller_location) { impl_TexParameterfv(cast(u32)target, cast(u32)pname, params); debug_helper(loc, nil, target, pname, params); };
	 TexParameteri :: proc "c" (target : GLenum, pname : GLenum, param : GLint, loc := #caller_location) { impl_TexParameteri(cast(u32)target, cast(u32)pname, param); debug_helper(loc, nil, target, pname, param); };
	 TexParameteriv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_TexParameteriv(cast(u32)target, cast(u32)pname, params); debug_helper(loc, nil, target, pname, params); };
	 TexImage1D :: proc "c" (target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : rawptr, loc := #caller_location) { impl_TexImage1D(cast(u32)target, level, cast(i32)internalformat, width, border, cast(u32)format, cast(u32)type, pixels); debug_helper(loc, nil, target, level, internalformat, width, border, format, type, pixels); };
	 TexImage2D :: proc "c" (target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : rawptr, loc := #caller_location) { impl_TexImage2D(cast(u32)target, level, cast(i32)internalformat, width, height, border, cast(u32)format, cast(u32)type, pixels); debug_helper(loc, nil, target, level, internalformat, width, height, border, format, type, pixels); };
	 DrawBuffer :: proc "c" (mode : GLenum, loc := #caller_location) { impl_DrawBuffer(cast(u32)mode); debug_helper(loc, nil, mode); };
	 Clear :: proc "c" (mask : GLbitfield, loc := #caller_location) { impl_Clear(cast(u32)mask); debug_helper(loc, nil, mask); };
	 ClearColor :: proc "c" (red : GLfloat, green : GLfloat, blue : GLfloat, alpha : GLfloat, loc := #caller_location) { impl_ClearColor(red, green, blue, alpha); debug_helper(loc, nil, red, green, blue, alpha); };
	 ClearStencil :: proc "c" (s : GLint, loc := #caller_location) { impl_ClearStencil(s); debug_helper(loc, nil, s); };
	 ClearDepth :: proc "c" (depth : GLdouble, loc := #caller_location) { impl_ClearDepth(depth); debug_helper(loc, nil, depth); };
	 StencilMask :: proc "c" (mask : GLuint, loc := #caller_location) { impl_StencilMask(mask); debug_helper(loc, nil, mask); };
	 ColorMask :: proc "c" (red : GLboolean, green : GLboolean, blue : GLboolean, alpha : GLboolean, loc := #caller_location) { impl_ColorMask(red, green, blue, alpha); debug_helper(loc, nil, red, green, blue, alpha); };
	 DepthMask :: proc "c" (flag : GLboolean, loc := #caller_location) { impl_DepthMask(flag); debug_helper(loc, nil, flag); };
	 Disable :: proc "c" (cap : GLenum, loc := #caller_location) { impl_Disable(cast(u32)cap); debug_helper(loc, nil, cap); };
	 Enable :: proc "c" (cap : GLenum, loc := #caller_location) { impl_Enable(cast(u32)cap); debug_helper(loc, nil, cap); };
	 Finish :: proc "c" (loc := #caller_location) { impl_Finish(); debug_helper(loc, nil, ); };
	 Flush :: proc "c" (loc := #caller_location) { impl_Flush(); debug_helper(loc, nil, ); };
	 BlendFunc :: proc "c" (sfactor : GLenum, dfactor : GLenum, loc := #caller_location) { impl_BlendFunc(cast(u32)sfactor, cast(u32)dfactor); debug_helper(loc, nil, sfactor, dfactor); };
	 LogicOp :: proc "c" (opcode : GLenum, loc := #caller_location) { impl_LogicOp(cast(u32)opcode); debug_helper(loc, nil, opcode); };
	 StencilFunc :: proc "c" (func : GLenum, ref : GLint, mask : GLuint, loc := #caller_location) { impl_StencilFunc(cast(u32)func, ref, mask); debug_helper(loc, nil, func, ref, mask); };
	 StencilOp :: proc "c" (fail : GLenum, zfail : GLenum, zpass : GLenum, loc := #caller_location) { impl_StencilOp(cast(u32)fail, cast(u32)zfail, cast(u32)zpass); debug_helper(loc, nil, fail, zfail, zpass); };
	 DepthFunc :: proc "c" (func : GLenum, loc := #caller_location) { impl_DepthFunc(cast(u32)func); debug_helper(loc, nil, func); };
	 PixelStoref :: proc "c" (pname : GLenum, param : GLfloat, loc := #caller_location) { impl_PixelStoref(cast(u32)pname, param); debug_helper(loc, nil, pname, param); };
	 PixelStorei :: proc "c" (pname : GLenum, param : GLint, loc := #caller_location) { impl_PixelStorei(cast(u32)pname, param); debug_helper(loc, nil, pname, param); };
	 ReadBuffer :: proc "c" (src : GLenum, loc := #caller_location) { impl_ReadBuffer(cast(u32)src); debug_helper(loc, nil, src); };
	 ReadPixels :: proc "c" (x : GLint, y : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, pixels : rawptr, loc := #caller_location) { impl_ReadPixels(x, y, width, height, cast(u32)format, cast(u32)type, pixels); debug_helper(loc, nil, x, y, width, height, format, type, pixels); };
	 GetBooleanv :: proc "c" (pname : GLenum, data : ^GLboolean, loc := #caller_location) { impl_GetBooleanv(cast(u32)pname, data); debug_helper(loc, nil, pname, data); };
	 GetDoublev :: proc "c" (pname : GLenum, data : ^GLdouble, loc := #caller_location) { impl_GetDoublev(cast(u32)pname, data); debug_helper(loc, nil, pname, data); };
	 GetFloatv :: proc "c" (pname : GLenum, data : ^GLfloat, loc := #caller_location) { impl_GetFloatv(cast(u32)pname, data); debug_helper(loc, nil, pname, data); };
	 GetIntegerv :: proc "c" (pname : GLenum, data : ^GLint, loc := #caller_location) { impl_GetIntegerv(cast(u32)pname, data); debug_helper(loc, nil, pname, data); };
	 GetTexImage :: proc "c" (target : GLenum, level : GLint, format : GLenum, type : GLenum, pixels : rawptr, loc := #caller_location) { impl_GetTexImage(cast(u32)target, level, cast(u32)format, cast(u32)type, pixels); debug_helper(loc, nil, target, level, format, type, pixels); };
	 GetTexParameterfv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLfloat, loc := #caller_location) { impl_GetTexParameterfv(cast(u32)target, cast(u32)pname, params); debug_helper(loc, nil, target, pname, params); };
	 GetTexParameteriv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetTexParameteriv(cast(u32)target, cast(u32)pname, params); debug_helper(loc, nil, target, pname, params); };
	 GetTexLevelParameterfv :: proc "c" (target : GLenum, level : GLint, pname : GLenum, params : ^GLfloat, loc := #caller_location) { impl_GetTexLevelParameterfv(cast(u32)target, level, cast(u32)pname, params); debug_helper(loc, nil, target, level, pname, params); };
	 GetTexLevelParameteriv :: proc "c" (target : GLenum, level : GLint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetTexLevelParameteriv(cast(u32)target, level, cast(u32)pname, params); debug_helper(loc, nil, target, level, pname, params); };
	 DepthRange :: proc "c" (nearVal : GLdouble, farVal : GLdouble, loc := #caller_location) { impl_DepthRange(nearVal, farVal); debug_helper(loc, nil, nearVal, farVal); };
	 Viewport :: proc "c" (x : GLint, y : GLint, width : GLsizei, height : GLsizei, loc := #caller_location) { impl_Viewport(x, y, width, height); debug_helper(loc, nil, x, y, width, height); };
// VERSION_1_1
	 DrawArrays :: proc "c" (mode : GLenum, first : GLint, count : GLsizei, loc := #caller_location) { impl_DrawArrays(cast(u32)mode, first, count); debug_helper(loc, nil, mode, first, count); };
	 DrawElements :: proc "c" (mode : GLenum, count : GLsizei, type : GLenum, indices : rawptr, loc := #caller_location) { impl_DrawElements(cast(u32)mode, count, cast(u32)type, indices); debug_helper(loc, nil, mode, count, type, indices); };
	 PolygonOffset :: proc "c" (factor : GLfloat, units : GLfloat, loc := #caller_location) { impl_PolygonOffset(factor, units); debug_helper(loc, nil, factor, units); };
	 CopyTexImage1D :: proc "c" (target : GLenum, level : GLint, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei, border : GLint, loc := #caller_location) { impl_CopyTexImage1D(cast(u32)target, level, cast(u32)internalformat, x, y, width, border); debug_helper(loc, nil, target, level, internalformat, x, y, width, border); };
	 CopyTexImage2D :: proc "c" (target : GLenum, level : GLint, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei, height : GLsizei, border : GLint, loc := #caller_location) { impl_CopyTexImage2D(cast(u32)target, level, cast(u32)internalformat, x, y, width, height, border); debug_helper(loc, nil, target, level, internalformat, x, y, width, height, border); };
	 CopyTexSubImage1D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, x : GLint, y : GLint, width : GLsizei, loc := #caller_location) { impl_CopyTexSubImage1D(cast(u32)target, level, xoffset, x, y, width); debug_helper(loc, nil, target, level, xoffset, x, y, width); };
	 CopyTexSubImage2D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei, loc := #caller_location) { impl_CopyTexSubImage2D(cast(u32)target, level, xoffset, yoffset, x, y, width, height); debug_helper(loc, nil, target, level, xoffset, yoffset, x, y, width, height); };
	 TexSubImage1D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, type : GLenum, pixels : rawptr, loc := #caller_location) { impl_TexSubImage1D(cast(u32)target, level, xoffset, width, cast(u32)format, cast(u32)type, pixels); debug_helper(loc, nil, target, level, xoffset, width, format, type, pixels); };
	 TexSubImage2D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, pixels : rawptr, loc := #caller_location) { impl_TexSubImage2D(cast(u32)target, level, xoffset, yoffset, width, height, cast(u32)format, cast(u32)type, pixels); debug_helper(loc, nil, target, level, xoffset, yoffset, width, height, format, type, pixels); };
	 BindTexture :: proc "c" (target : GLenum, texture : GLuint, loc := #caller_location) { impl_BindTexture(cast(u32)target, texture); debug_helper(loc, nil, target, texture); };
	 DeleteTextures :: proc "c" (n : GLsizei, textures : ^GLuint, loc := #caller_location) { impl_DeleteTextures(n, textures); debug_helper(loc, nil, n, textures); };
	 GenTextures :: proc "c" (n : GLsizei, textures : ^GLuint, loc := #caller_location) { impl_GenTextures(n, textures); debug_helper(loc, nil, n, textures); };
// VERSION_1_2
	 DrawRangeElements :: proc "c" (mode : GLenum, start : GLuint, end : GLuint, count : GLsizei, type : GLenum, indices : rawptr, loc := #caller_location) { impl_DrawRangeElements(cast(u32)mode, start, end, count, cast(u32)type, indices); debug_helper(loc, nil, mode, start, end, count, type, indices); };
	 TexImage3D :: proc "c" (target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : rawptr, loc := #caller_location) { impl_TexImage3D(cast(u32)target, level, cast(i32)internalformat, width, height, depth, border, cast(u32)format, cast(u32)type, pixels); debug_helper(loc, nil, target, level, internalformat, width, height, depth, border, format, type, pixels); };
	 TexSubImage3D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, type : GLenum, pixels : rawptr, loc := #caller_location) { impl_TexSubImage3D(cast(u32)target, level, xoffset, yoffset, zoffset, width, height, depth, cast(u32)format, cast(u32)type, pixels); debug_helper(loc, nil, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); };
	 CopyTexSubImage3D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei, loc := #caller_location) { impl_CopyTexSubImage3D(cast(u32)target, level, xoffset, yoffset, zoffset, x, y, width, height); debug_helper(loc, nil, target, level, xoffset, yoffset, zoffset, x, y, width, height); };
// VERSION_1_3
	 ActiveTexture :: proc "c" (texture : GLenum, loc := #caller_location) { impl_ActiveTexture(cast(u32)texture); debug_helper(loc, nil, texture); };
	 SampleCoverage :: proc "c" (value : GLfloat, invert : GLboolean, loc := #caller_location) { impl_SampleCoverage(value, invert); debug_helper(loc, nil, value, invert); };
	 CompressedTexImage3D :: proc "c" (target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, border : GLint, imageSize : GLsizei, data : rawptr, loc := #caller_location) { impl_CompressedTexImage3D(cast(u32)target, level, cast(u32)internalformat, width, height, depth, border, imageSize, data); debug_helper(loc, nil, target, level, internalformat, width, height, depth, border, imageSize, data); };
	 CompressedTexImage2D :: proc "c" (target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, border : GLint, imageSize : GLsizei, data : rawptr, loc := #caller_location) { impl_CompressedTexImage2D(cast(u32)target, level, cast(u32)internalformat, width, height, border, imageSize, data); debug_helper(loc, nil, target, level, internalformat, width, height, border, imageSize, data); };
	 CompressedTexImage1D :: proc "c" (target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, border : GLint, imageSize : GLsizei, data : rawptr, loc := #caller_location) { impl_CompressedTexImage1D(cast(u32)target, level, cast(u32)internalformat, width, border, imageSize, data); debug_helper(loc, nil, target, level, internalformat, width, border, imageSize, data); };
	 CompressedTexSubImage3D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, imageSize : GLsizei, data : rawptr, loc := #caller_location) { impl_CompressedTexSubImage3D(cast(u32)target, level, xoffset, yoffset, zoffset, width, height, depth, cast(u32)format, imageSize, data); debug_helper(loc, nil, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); };
	 CompressedTexSubImage2D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, imageSize : GLsizei, data : rawptr, loc := #caller_location) { impl_CompressedTexSubImage2D(cast(u32)target, level, xoffset, yoffset, width, height, cast(u32)format, imageSize, data); debug_helper(loc, nil, target, level, xoffset, yoffset, width, height, format, imageSize, data); };
	 CompressedTexSubImage1D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, imageSize : GLsizei, data : rawptr, loc := #caller_location) { impl_CompressedTexSubImage1D(cast(u32)target, level, xoffset, width, cast(u32)format, imageSize, data); debug_helper(loc, nil, target, level, xoffset, width, format, imageSize, data); };
	 GetCompressedTexImage :: proc "c" (target : GLenum, level : GLint, img : rawptr, loc := #caller_location) { impl_GetCompressedTexImage(cast(u32)target, level, img); debug_helper(loc, nil, target, level, img); };
// VERSION_1_4
	 BlendFuncSeparate :: proc "c" (sfactorRGB : GLenum, dfactorRGB : GLenum, sfactorAlpha : GLenum, dfactorAlpha : GLenum, loc := #caller_location) { impl_BlendFuncSeparate(cast(u32)sfactorRGB, cast(u32)dfactorRGB, cast(u32)sfactorAlpha, cast(u32)dfactorAlpha); debug_helper(loc, nil, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); };
	 MultiDrawArrays :: proc "c" (mode : GLenum, first : ^GLint, count : ^GLsizei, drawcount : GLsizei, loc := #caller_location) { impl_MultiDrawArrays(cast(u32)mode, first, count, drawcount); debug_helper(loc, nil, mode, first, count, drawcount); };
	 MultiDrawElements :: proc "c" (mode : GLenum, count : ^GLsizei, type : GLenum, indices : ^rawptr, drawcount : GLsizei, loc := #caller_location) { impl_MultiDrawElements(cast(u32)mode, count, cast(u32)type, indices, drawcount); debug_helper(loc, nil, mode, count, type, indices, drawcount); };
	 PointParameterf :: proc "c" (pname : GLenum, param : GLfloat, loc := #caller_location) { impl_PointParameterf(cast(u32)pname, param); debug_helper(loc, nil, pname, param); };
	 PointParameterfv :: proc "c" (pname : GLenum, params : ^GLfloat, loc := #caller_location) { impl_PointParameterfv(cast(u32)pname, params); debug_helper(loc, nil, pname, params); };
	 PointParameteri :: proc "c" (pname : GLenum, param : GLint, loc := #caller_location) { impl_PointParameteri(cast(u32)pname, param); debug_helper(loc, nil, pname, param); };
	 PointParameteriv :: proc "c" (pname : GLenum, params : ^GLint, loc := #caller_location) { impl_PointParameteriv(cast(u32)pname, params); debug_helper(loc, nil, pname, params); };
	 BlendColor :: proc "c" (red : GLfloat, green : GLfloat, blue : GLfloat, alpha : GLfloat, loc := #caller_location) { impl_BlendColor(red, green, blue, alpha); debug_helper(loc, nil, red, green, blue, alpha); };
	 BlendEquation :: proc "c" (mode : GLenum, loc := #caller_location) { impl_BlendEquation(cast(u32)mode); debug_helper(loc, nil, mode); };
// VERSION_1_5
	 GenQueries :: proc "c" (n : GLsizei, ids : ^GLuint, loc := #caller_location) { impl_GenQueries(n, ids); debug_helper(loc, nil, n, ids); };
	 DeleteQueries :: proc "c" (n : GLsizei, ids : ^GLuint, loc := #caller_location) { impl_DeleteQueries(n, ids); debug_helper(loc, nil, n, ids); };
	 BeginQuery :: proc "c" (target : GLenum, id : GLuint, loc := #caller_location) { impl_BeginQuery(cast(u32)target, id); debug_helper(loc, nil, target, id); };
	 EndQuery :: proc "c" (target : GLenum, loc := #caller_location) { impl_EndQuery(cast(u32)target); debug_helper(loc, nil, target); };
	 GetQueryiv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetQueryiv(cast(u32)target, cast(u32)pname, params); debug_helper(loc, nil, target, pname, params); };
	 GetQueryObjectiv :: proc "c" (id : GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetQueryObjectiv(id, cast(u32)pname, params); debug_helper(loc, nil, id, pname, params); };
	 GetQueryObjectuiv :: proc "c" (id : GLuint, pname : GLenum, params : ^GLuint, loc := #caller_location) { impl_GetQueryObjectuiv(id, cast(u32)pname, params); debug_helper(loc, nil, id, pname, params); };
	 BindBuffer :: proc "c" (target : GLenum, buffer : GLuint, loc := #caller_location) { impl_BindBuffer(cast(u32)target, buffer); debug_helper(loc, nil, target, buffer); };
	 DeleteBuffers :: proc "c" (n : GLsizei, buffers : ^GLuint, loc := #caller_location) { impl_DeleteBuffers(n, buffers); debug_helper(loc, nil, n, buffers); };
	 GenBuffers :: proc "c" (n : GLsizei, buffers : ^GLuint, loc := #caller_location) { impl_GenBuffers(n, buffers); debug_helper(loc, nil, n, buffers); };
	 BufferData :: proc "c" (target : GLenum, size : GLsizeiptr, data : rawptr, usage : GLenum, loc := #caller_location) { impl_BufferData(cast(u32)target, size, data, cast(u32)usage); debug_helper(loc, nil, target, size, data, usage); };
	 BufferSubData :: proc "c" (target : GLenum, offset : GLintptr, size : GLsizeiptr, data : rawptr, loc := #caller_location) { impl_BufferSubData(cast(u32)target, offset, size, data); debug_helper(loc, nil, target, offset, size, data); };
	 GetBufferSubData :: proc "c" (target : GLenum, offset : GLintptr, size : GLsizeiptr, data : rawptr, loc := #caller_location) { impl_GetBufferSubData(cast(u32)target, offset, size, data); debug_helper(loc, nil, target, offset, size, data); };
	 GetBufferParameteriv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetBufferParameteriv(cast(u32)target, cast(u32)pname, params); debug_helper(loc, nil, target, pname, params); };
	 GetBufferPointerv :: proc "c" (target : GLenum, pname : GLenum, params : ^rawptr, loc := #caller_location) { impl_GetBufferPointerv(cast(u32)target, cast(u32)pname, params); debug_helper(loc, nil, target, pname, params); };
// VERSION_2_0
	 BlendEquationSeparate :: proc "c" (modeRGB : GLenum, modeAlpha : GLenum, loc := #caller_location) { impl_BlendEquationSeparate(cast(u32)modeRGB, cast(u32)modeAlpha); debug_helper(loc, nil, modeRGB, modeAlpha); };
	 DrawBuffers :: proc "c" (n : GLsizei, bufs : ^GLenum, loc := #caller_location) { impl_DrawBuffers(n, cast(^u32)bufs); debug_helper(loc, nil, n, bufs); };
	 StencilOpSeparate :: proc "c" (face : GLenum, sfail : GLenum, dpfail : GLenum, dppass : GLenum, loc := #caller_location) { impl_StencilOpSeparate(cast(u32)face, cast(u32)sfail, cast(u32)dpfail, cast(u32)dppass); debug_helper(loc, nil, face, sfail, dpfail, dppass); };
	 StencilFuncSeparate :: proc "c" (face : GLenum, func : GLenum, ref : GLint, mask : GLuint, loc := #caller_location) { impl_StencilFuncSeparate(cast(u32)face, cast(u32)func, ref, mask); debug_helper(loc, nil, face, func, ref, mask); };
	 StencilMaskSeparate :: proc "c" (face : GLenum, mask : GLuint, loc := #caller_location) { impl_StencilMaskSeparate(cast(u32)face, mask); debug_helper(loc, nil, face, mask); };
	 AttachShader :: proc "c" (program : GLuint, shader : GLuint, loc := #caller_location) { impl_AttachShader(program, shader); debug_helper(loc, nil, program, shader); };
	 BindAttribLocation :: proc "c" (program : GLuint, index : GLuint, name : GLstring, loc := #caller_location) { impl_BindAttribLocation(program, index, name); debug_helper(loc, nil, program, index, name); };
	 CompileShader :: proc "c" (shader : GLuint, loc := #caller_location) { impl_CompileShader(shader); debug_helper(loc, nil, shader); };
	 DeleteProgram :: proc "c" (program : GLuint, loc := #caller_location) { impl_DeleteProgram(program); debug_helper(loc, nil, program); };
	 DeleteShader :: proc "c" (shader : GLuint, loc := #caller_location) { impl_DeleteShader(shader); debug_helper(loc, nil, shader); };
	 DetachShader :: proc "c" (program : GLuint, shader : GLuint, loc := #caller_location) { impl_DetachShader(program, shader); debug_helper(loc, nil, program, shader); };
	 DisableVertexAttribArray :: proc "c" (index : GLuint, loc := #caller_location) { impl_DisableVertexAttribArray(index); debug_helper(loc, nil, index); };
	 EnableVertexAttribArray :: proc "c" (index : GLuint, loc := #caller_location) { impl_EnableVertexAttribArray(index); debug_helper(loc, nil, index); };
	 GetActiveAttrib :: proc "c" (program : GLuint, index : GLuint, bufSize : GLsizei, length : ^GLsizei, size : ^GLint, type : ^GLenum, name : GLoutstring, loc := #caller_location) { impl_GetActiveAttrib(program, index, bufSize, length, size, cast(^u32)type, name); debug_helper(loc, nil, program, index, bufSize, length, size, type, name); };
	 GetActiveUniform :: proc "c" (program : GLuint, index : GLuint, bufSize : GLsizei, length : ^GLsizei, size : ^GLint, type : ^GLenum, name : GLoutstring, loc := #caller_location) { impl_GetActiveUniform(program, index, bufSize, length, size, cast(^u32)type, name); debug_helper(loc, nil, program, index, bufSize, length, size, type, name); };
	 GetAttachedShaders :: proc "c" (program : GLuint, maxCount : GLsizei, count : ^GLsizei, shaders : ^GLuint, loc := #caller_location) { impl_GetAttachedShaders(program, maxCount, count, shaders); debug_helper(loc, nil, program, maxCount, count, shaders); };
	 GetProgramiv :: proc "c" (program : GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetProgramiv(program, cast(u32)pname, params); debug_helper(loc, nil, program, pname, params); };
	 GetProgramInfoLog :: proc "c" (program : GLuint, bufSize : GLsizei, length : ^GLsizei, infoLog : GLoutstring, loc := #caller_location) { impl_GetProgramInfoLog(program, bufSize, length, infoLog); debug_helper(loc, nil, program, bufSize, length, infoLog); };
	 GetShaderiv :: proc "c" (shader : GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetShaderiv(shader, cast(u32)pname, params); debug_helper(loc, nil, shader, pname, params); };
	 GetShaderInfoLog :: proc "c" (shader : GLuint, bufSize : GLsizei, length : ^GLsizei, infoLog : GLoutstring, loc := #caller_location) { impl_GetShaderInfoLog(shader, bufSize, length, infoLog); debug_helper(loc, nil, shader, bufSize, length, infoLog); };
	 GetShaderSource :: proc "c" (shader : GLuint, bufSize : GLsizei, length : ^GLsizei, source : GLoutstring, loc := #caller_location) { impl_GetShaderSource(shader, bufSize, length, source); debug_helper(loc, nil, shader, bufSize, length, source); };
	 GetUniformfv :: proc "c" (program : GLuint, location : GLint, params : ^GLfloat, loc := #caller_location) { impl_GetUniformfv(program, location, params); debug_helper(loc, nil, program, location, params); };
	 GetUniformiv :: proc "c" (program : GLuint, location : GLint, params : ^GLint, loc := #caller_location) { impl_GetUniformiv(program, location, params); debug_helper(loc, nil, program, location, params); };
	 GetVertexAttribdv :: proc "c" (index : GLuint, pname : GLenum, params : ^GLdouble, loc := #caller_location) { impl_GetVertexAttribdv(index, cast(u32)pname, params); debug_helper(loc, nil, index, pname, params); };
	 GetVertexAttribfv :: proc "c" (index : GLuint, pname : GLenum, params : ^GLfloat, loc := #caller_location) { impl_GetVertexAttribfv(index, cast(u32)pname, params); debug_helper(loc, nil, index, pname, params); };
	 GetVertexAttribiv :: proc "c" (index : GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetVertexAttribiv(index, cast(u32)pname, params); debug_helper(loc, nil, index, pname, params); };
	 GetVertexAttribPointerv :: proc "c" (index : GLuint, pname : GLenum, pointer : ^uintptr, loc := #caller_location) { impl_GetVertexAttribPointerv(index, cast(u32)pname, pointer); debug_helper(loc, nil, index, pname, pointer); };
	 LinkProgram :: proc "c" (program : GLuint, loc := #caller_location) { impl_LinkProgram(program); debug_helper(loc, nil, program); };
	 ShaderSource :: proc "c" (shader : GLuint, count : GLsizei, string : ^GLstring, length : ^GLint, loc := #caller_location) { impl_ShaderSource(shader, count, string, length); debug_helper(loc, nil, shader, count, string, length); };
	 UseProgram :: proc "c" (program : GLuint, loc := #caller_location) { impl_UseProgram(program); debug_helper(loc, nil, program); };
	 Uniform1f :: proc "c" (location : GLint, v0 : GLfloat, loc := #caller_location) { impl_Uniform1f(location, v0); debug_helper(loc, nil, location, v0); };
	 Uniform2f :: proc "c" (location : GLint, v0 : GLfloat, v1 : GLfloat, loc := #caller_location) { impl_Uniform2f(location, v0, v1); debug_helper(loc, nil, location, v0, v1); };
	 Uniform3f :: proc "c" (location : GLint, v0 : GLfloat, v1 : GLfloat, v2 : GLfloat, loc := #caller_location) { impl_Uniform3f(location, v0, v1, v2); debug_helper(loc, nil, location, v0, v1, v2); };
	 Uniform4f :: proc "c" (location : GLint, v0 : GLfloat, v1 : GLfloat, v2 : GLfloat, v3 : GLfloat, loc := #caller_location) { impl_Uniform4f(location, v0, v1, v2, v3); debug_helper(loc, nil, location, v0, v1, v2, v3); };
	 Uniform1i :: proc "c" (location : GLint, v0 : GLint, loc := #caller_location) { impl_Uniform1i(location, v0); debug_helper(loc, nil, location, v0); };
	 Uniform2i :: proc "c" (location : GLint, v0 : GLint, v1 : GLint, loc := #caller_location) { impl_Uniform2i(location, v0, v1); debug_helper(loc, nil, location, v0, v1); };
	 Uniform3i :: proc "c" (location : GLint, v0 : GLint, v1 : GLint, v2 : GLint, loc := #caller_location) { impl_Uniform3i(location, v0, v1, v2); debug_helper(loc, nil, location, v0, v1, v2); };
	 Uniform4i :: proc "c" (location : GLint, v0 : GLint, v1 : GLint, v2 : GLint, v3 : GLint, loc := #caller_location) { impl_Uniform4i(location, v0, v1, v2, v3); debug_helper(loc, nil, location, v0, v1, v2, v3); };
	 Uniform1fv :: proc "c" (location : GLint, count : GLsizei, value : ^GLfloat, loc := #caller_location) { impl_Uniform1fv(location, count, value); debug_helper(loc, nil, location, count, value); };
	 Uniform2fv :: proc "c" (location : GLint, count : GLsizei, value : ^GLfloat, loc := #caller_location) { impl_Uniform2fv(location, count, value); debug_helper(loc, nil, location, count, value); };
	 Uniform3fv :: proc "c" (location : GLint, count : GLsizei, value : ^GLfloat, loc := #caller_location) { impl_Uniform3fv(location, count, value); debug_helper(loc, nil, location, count, value); };
	 Uniform4fv :: proc "c" (location : GLint, count : GLsizei, value : ^GLfloat, loc := #caller_location) { impl_Uniform4fv(location, count, value); debug_helper(loc, nil, location, count, value); };
	 Uniform1iv :: proc "c" (location : GLint, count : GLsizei, value : ^GLint, loc := #caller_location) { impl_Uniform1iv(location, count, value); debug_helper(loc, nil, location, count, value); };
	 Uniform2iv :: proc "c" (location : GLint, count : GLsizei, value : ^GLint, loc := #caller_location) { impl_Uniform2iv(location, count, value); debug_helper(loc, nil, location, count, value); };
	 Uniform3iv :: proc "c" (location : GLint, count : GLsizei, value : ^GLint, loc := #caller_location) { impl_Uniform3iv(location, count, value); debug_helper(loc, nil, location, count, value); };
	 Uniform4iv :: proc "c" (location : GLint, count : GLsizei, value : ^GLint, loc := #caller_location) { impl_Uniform4iv(location, count, value); debug_helper(loc, nil, location, count, value); };
	 UniformMatrix2fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_UniformMatrix2fv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 UniformMatrix3fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_UniformMatrix3fv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 UniformMatrix4fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_UniformMatrix4fv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 ValidateProgram :: proc "c" (program : GLuint, loc := #caller_location) { impl_ValidateProgram(program); debug_helper(loc, nil, program); };
	 VertexAttrib1d :: proc "c" (index : GLuint, x : GLdouble, loc := #caller_location) { impl_VertexAttrib1d(index, x); debug_helper(loc, nil, index, x); };
	 VertexAttrib1dv :: proc "c" (index : GLuint, v : ^GLdouble, loc := #caller_location) { impl_VertexAttrib1dv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib1f :: proc "c" (index : GLuint, x : GLfloat, loc := #caller_location) { impl_VertexAttrib1f(index, x); debug_helper(loc, nil, index, x); };
	 VertexAttrib1fv :: proc "c" (index : GLuint, v : ^GLfloat, loc := #caller_location) { impl_VertexAttrib1fv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib1s :: proc "c" (index : GLuint, x : GLshort, loc := #caller_location) { impl_VertexAttrib1s(index, x); debug_helper(loc, nil, index, x); };
	 VertexAttrib1sv :: proc "c" (index : GLuint, v : ^GLshort, loc := #caller_location) { impl_VertexAttrib1sv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib2d :: proc "c" (index : GLuint, x : GLdouble, y : GLdouble, loc := #caller_location) { impl_VertexAttrib2d(index, x, y); debug_helper(loc, nil, index, x, y); };
	 VertexAttrib2dv :: proc "c" (index : GLuint, v : ^GLdouble, loc := #caller_location) { impl_VertexAttrib2dv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib2f :: proc "c" (index : GLuint, x : GLfloat, y : GLfloat, loc := #caller_location) { impl_VertexAttrib2f(index, x, y); debug_helper(loc, nil, index, x, y); };
	 VertexAttrib2fv :: proc "c" (index : GLuint, v : ^GLfloat, loc := #caller_location) { impl_VertexAttrib2fv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib2s :: proc "c" (index : GLuint, x : GLshort, y : GLshort, loc := #caller_location) { impl_VertexAttrib2s(index, x, y); debug_helper(loc, nil, index, x, y); };
	 VertexAttrib2sv :: proc "c" (index : GLuint, v : ^GLshort, loc := #caller_location) { impl_VertexAttrib2sv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib3d :: proc "c" (index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble, loc := #caller_location) { impl_VertexAttrib3d(index, x, y, z); debug_helper(loc, nil, index, x, y, z); };
	 VertexAttrib3dv :: proc "c" (index : GLuint, v : ^GLdouble, loc := #caller_location) { impl_VertexAttrib3dv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib3f :: proc "c" (index : GLuint, x : GLfloat, y : GLfloat, z : GLfloat, loc := #caller_location) { impl_VertexAttrib3f(index, x, y, z); debug_helper(loc, nil, index, x, y, z); };
	 VertexAttrib3fv :: proc "c" (index : GLuint, v : ^GLfloat, loc := #caller_location) { impl_VertexAttrib3fv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib3s :: proc "c" (index : GLuint, x : GLshort, y : GLshort, z : GLshort, loc := #caller_location) { impl_VertexAttrib3s(index, x, y, z); debug_helper(loc, nil, index, x, y, z); };
	 VertexAttrib3sv :: proc "c" (index : GLuint, v : ^GLshort, loc := #caller_location) { impl_VertexAttrib3sv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib4Nbv :: proc "c" (index : GLuint, v : ^GLbyte, loc := #caller_location) { impl_VertexAttrib4Nbv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib4Niv :: proc "c" (index : GLuint, v : ^GLint, loc := #caller_location) { impl_VertexAttrib4Niv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib4Nsv :: proc "c" (index : GLuint, v : ^GLshort, loc := #caller_location) { impl_VertexAttrib4Nsv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib4Nub :: proc "c" (index : GLuint, x : GLubyte, y : GLubyte, z : GLubyte, w : GLubyte, loc := #caller_location) { impl_VertexAttrib4Nub(index, x, y, z, w); debug_helper(loc, nil, index, x, y, z, w); };
	 VertexAttrib4Nubv :: proc "c" (index : GLuint, v : ^GLubyte, loc := #caller_location) { impl_VertexAttrib4Nubv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib4Nuiv :: proc "c" (index : GLuint, v : ^GLuint, loc := #caller_location) { impl_VertexAttrib4Nuiv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib4Nusv :: proc "c" (index : GLuint, v : ^GLushort, loc := #caller_location) { impl_VertexAttrib4Nusv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib4bv :: proc "c" (index : GLuint, v : ^GLbyte, loc := #caller_location) { impl_VertexAttrib4bv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib4d :: proc "c" (index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble, loc := #caller_location) { impl_VertexAttrib4d(index, x, y, z, w); debug_helper(loc, nil, index, x, y, z, w); };
	 VertexAttrib4dv :: proc "c" (index : GLuint, v : ^GLdouble, loc := #caller_location) { impl_VertexAttrib4dv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib4f :: proc "c" (index : GLuint, x : GLfloat, y : GLfloat, z : GLfloat, w : GLfloat, loc := #caller_location) { impl_VertexAttrib4f(index, x, y, z, w); debug_helper(loc, nil, index, x, y, z, w); };
	 VertexAttrib4fv :: proc "c" (index : GLuint, v : ^GLfloat, loc := #caller_location) { impl_VertexAttrib4fv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib4iv :: proc "c" (index : GLuint, v : ^GLint, loc := #caller_location) { impl_VertexAttrib4iv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib4s :: proc "c" (index : GLuint, x : GLshort, y : GLshort, z : GLshort, w : GLshort, loc := #caller_location) { impl_VertexAttrib4s(index, x, y, z, w); debug_helper(loc, nil, index, x, y, z, w); };
	 VertexAttrib4sv :: proc "c" (index : GLuint, v : ^GLshort, loc := #caller_location) { impl_VertexAttrib4sv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib4ubv :: proc "c" (index : GLuint, v : ^GLubyte, loc := #caller_location) { impl_VertexAttrib4ubv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib4uiv :: proc "c" (index : GLuint, v : ^GLuint, loc := #caller_location) { impl_VertexAttrib4uiv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttrib4usv :: proc "c" (index : GLuint, v : ^GLushort, loc := #caller_location) { impl_VertexAttrib4usv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttribPointer :: proc "c" (index : GLuint, size : GLint, type : GLenum, normalized : GLboolean, stride : GLsizei, pointer : uintptr, loc := #caller_location) { impl_VertexAttribPointer(index, size, cast(u32)type, normalized, stride, pointer); debug_helper(loc, nil, index, size, type, normalized, stride, pointer); };
// VERSION_2_1
	 UniformMatrix2x3fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_UniformMatrix2x3fv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 UniformMatrix3x2fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_UniformMatrix3x2fv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 UniformMatrix2x4fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_UniformMatrix2x4fv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 UniformMatrix4x2fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_UniformMatrix4x2fv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 UniformMatrix3x4fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_UniformMatrix3x4fv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 UniformMatrix4x3fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_UniformMatrix4x3fv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
//VERSION_3_0
	 ColorMaski :: proc "c" (index : GLuint, r : GLboolean, g : GLboolean, b : GLboolean, a : GLboolean, loc := #caller_location) { impl_ColorMaski(index, r, g, b, a); debug_helper(loc, nil, index, r, g, b, a); };
	 GetBooleani_v :: proc "c" (target : GLenum, index : GLuint, data : ^GLboolean, loc := #caller_location) { impl_GetBooleani_v(cast(u32)target, index, data); debug_helper(loc, nil, target, index, data); };
	 GetIntegeri_v :: proc "c" (target : GLenum, index : GLuint, data : ^GLint, loc := #caller_location) { impl_GetIntegeri_v(cast(u32)target, index, data); debug_helper(loc, nil, target, index, data); };
	 Enablei :: proc "c" (target : GLenum, index : GLuint, loc := #caller_location) { impl_Enablei(cast(u32)target, index); debug_helper(loc, nil, target, index); };
	 Disablei :: proc "c" (target : GLenum, index : GLuint, loc := #caller_location) { impl_Disablei(cast(u32)target, index); debug_helper(loc, nil, target, index); };
	 BeginTransformFeedback :: proc "c" (primitiveMode : GLenum, loc := #caller_location) { impl_BeginTransformFeedback(cast(u32)primitiveMode); debug_helper(loc, nil, primitiveMode); };
	 EndTransformFeedback :: proc "c" (loc := #caller_location) { impl_EndTransformFeedback(); debug_helper(loc, nil, ); };
	 BindBufferRange :: proc "c" (target : GLenum, index : GLuint, buffer : GLuint, offset : GLintptr, size : GLsizeiptr, loc := #caller_location) { impl_BindBufferRange(cast(u32)target, index, buffer, offset, size); debug_helper(loc, nil, target, index, buffer, offset, size); };
	 BindBufferBase :: proc "c" (target : GLenum, index : GLuint, buffer : GLuint, loc := #caller_location) { impl_BindBufferBase(cast(u32)target, index, buffer); debug_helper(loc, nil, target, index, buffer); };
	 TransformFeedbackVaryings :: proc "c" (program : GLuint, count : GLsizei, varyings : ^GLstring, bufferMode : GLenum, loc := #caller_location) { impl_TransformFeedbackVaryings(program, count, varyings, cast(u32)bufferMode); debug_helper(loc, nil, program, count, varyings, bufferMode); };
	 GetTransformFeedbackVarying :: proc "c" (program : GLuint, index : GLuint, bufSize : GLsizei, length : ^GLsizei, size : ^GLsizei, type : ^GLenum, name : GLoutstring, loc := #caller_location) { impl_GetTransformFeedbackVarying(program, index, bufSize, length, size, cast(^u32)type, name); debug_helper(loc, nil, program, index, bufSize, length, size, type, name); };
	 ClampColor :: proc "c" (target : GLenum, clamp : GLenum, loc := #caller_location) { impl_ClampColor(cast(u32)target, cast(u32)clamp); debug_helper(loc, nil, target, clamp); };
	 BeginConditionalRender :: proc "c" (id : GLuint, mode : GLenum, loc := #caller_location) { impl_BeginConditionalRender(id, cast(u32)mode); debug_helper(loc, nil, id, mode); };
	 EndConditionalRender :: proc "c" (loc := #caller_location) { impl_EndConditionalRender(); debug_helper(loc, nil, ); };
	 VertexAttribIPointer :: proc "c" (index : GLuint, size : GLint, type : GLenum, stride : GLsizei, pointer : uintptr, loc := #caller_location) { impl_VertexAttribIPointer(index, size, cast(u32)type, stride, pointer); debug_helper(loc, nil, index, size, type, stride, pointer); };
	 GetVertexAttribIiv :: proc "c" (index : GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetVertexAttribIiv(index, cast(u32)pname, params); debug_helper(loc, nil, index, pname, params); };
	 GetVertexAttribIuiv :: proc "c" (index : GLuint, pname : GLenum, params : ^GLuint, loc := #caller_location) { impl_GetVertexAttribIuiv(index, cast(u32)pname, params); debug_helper(loc, nil, index, pname, params); };
	 VertexAttribI1i :: proc "c" (index : GLuint, x : GLint, loc := #caller_location) { impl_VertexAttribI1i(index, x); debug_helper(loc, nil, index, x); };
	 VertexAttribI2i :: proc "c" (index : GLuint, x : GLint, y : GLint, loc := #caller_location) { impl_VertexAttribI2i(index, x, y); debug_helper(loc, nil, index, x, y); };
	 VertexAttribI3i :: proc "c" (index : GLuint, x : GLint, y : GLint, z : GLint, loc := #caller_location) { impl_VertexAttribI3i(index, x, y, z); debug_helper(loc, nil, index, x, y, z); };
	 VertexAttribI4i :: proc "c" (index : GLuint, x : GLint, y : GLint, z : GLint, w : GLint, loc := #caller_location) { impl_VertexAttribI4i(index, x, y, z, w); debug_helper(loc, nil, index, x, y, z, w); };
	 VertexAttribI1ui :: proc "c" (index : GLuint, x : GLuint, loc := #caller_location) { impl_VertexAttribI1ui(index, x); debug_helper(loc, nil, index, x); };
	 VertexAttribI2ui :: proc "c" (index : GLuint, x : GLuint, y : GLuint, loc := #caller_location) { impl_VertexAttribI2ui(index, x, y); debug_helper(loc, nil, index, x, y); };
	 VertexAttribI3ui :: proc "c" (index : GLuint, x : GLuint, y : GLuint, z : GLuint, loc := #caller_location) { impl_VertexAttribI3ui(index, x, y, z); debug_helper(loc, nil, index, x, y, z); };
	 VertexAttribI4ui :: proc "c" (index : GLuint, x : GLuint, y : GLuint, z : GLuint, w : GLuint, loc := #caller_location) { impl_VertexAttribI4ui(index, x, y, z, w); debug_helper(loc, nil, index, x, y, z, w); };
	 VertexAttribI1iv :: proc "c" (index : GLuint, v : ^GLint, loc := #caller_location) { impl_VertexAttribI1iv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttribI2iv :: proc "c" (index : GLuint, v : ^GLint, loc := #caller_location) { impl_VertexAttribI2iv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttribI3iv :: proc "c" (index : GLuint, v : ^GLint, loc := #caller_location) { impl_VertexAttribI3iv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttribI4iv :: proc "c" (index : GLuint, v : ^GLint, loc := #caller_location) { impl_VertexAttribI4iv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttribI1uiv :: proc "c" (index : GLuint, v : ^GLuint, loc := #caller_location) { impl_VertexAttribI1uiv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttribI2uiv :: proc "c" (index : GLuint, v : ^GLuint, loc := #caller_location) { impl_VertexAttribI2uiv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttribI3uiv :: proc "c" (index : GLuint, v : ^GLuint, loc := #caller_location) { impl_VertexAttribI3uiv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttribI4uiv :: proc "c" (index : GLuint, v : ^GLuint, loc := #caller_location) { impl_VertexAttribI4uiv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttribI4bv :: proc "c" (index : GLuint, v : ^GLbyte, loc := #caller_location) { impl_VertexAttribI4bv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttribI4sv :: proc "c" (index : GLuint, v : ^GLshort, loc := #caller_location) { impl_VertexAttribI4sv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttribI4ubv :: proc "c" (index : GLuint, v : ^GLubyte, loc := #caller_location) { impl_VertexAttribI4ubv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttribI4usv :: proc "c" (index : GLuint, v : ^GLushort, loc := #caller_location) { impl_VertexAttribI4usv(index, v); debug_helper(loc, nil, index, v); };
	 GetUniformuiv :: proc "c" (program : GLuint, location : GLint, params : ^GLuint, loc := #caller_location) { impl_GetUniformuiv(program, location, params); debug_helper(loc, nil, program, location, params); };
	 BindFragDataLocation :: proc "c" (program : GLuint, color : GLuint, name : GLstring, loc := #caller_location) { impl_BindFragDataLocation(program, color, name); debug_helper(loc, nil, program, color, name); };
	 Uniform1ui :: proc "c" (location : GLint, v0 : GLuint, loc := #caller_location) { impl_Uniform1ui(location, v0); debug_helper(loc, nil, location, v0); };
	 Uniform2ui :: proc "c" (location : GLint, v0 : GLuint, v1 : GLuint, loc := #caller_location) { impl_Uniform2ui(location, v0, v1); debug_helper(loc, nil, location, v0, v1); };
	 Uniform3ui :: proc "c" (location : GLint, v0 : GLuint, v1 : GLuint, v2 : GLuint, loc := #caller_location) { impl_Uniform3ui(location, v0, v1, v2); debug_helper(loc, nil, location, v0, v1, v2); };
	 Uniform4ui :: proc "c" (location : GLint, v0 : GLuint, v1 : GLuint, v2 : GLuint, v3 : GLuint, loc := #caller_location) { impl_Uniform4ui(location, v0, v1, v2, v3); debug_helper(loc, nil, location, v0, v1, v2, v3); };
	 Uniform1uiv :: proc "c" (location : GLint, count : GLsizei, value : ^GLuint, loc := #caller_location) { impl_Uniform1uiv(location, count, value); debug_helper(loc, nil, location, count, value); };
	 Uniform2uiv :: proc "c" (location : GLint, count : GLsizei, value : ^GLuint, loc := #caller_location) { impl_Uniform2uiv(location, count, value); debug_helper(loc, nil, location, count, value); };
	 Uniform3uiv :: proc "c" (location : GLint, count : GLsizei, value : ^GLuint, loc := #caller_location) { impl_Uniform3uiv(location, count, value); debug_helper(loc, nil, location, count, value); };
	 Uniform4uiv :: proc "c" (location : GLint, count : GLsizei, value : ^GLuint, loc := #caller_location) { impl_Uniform4uiv(location, count, value); debug_helper(loc, nil, location, count, value); };
	 TexParameterIiv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_TexParameterIiv(cast(u32)target, cast(u32)pname, params); debug_helper(loc, nil, target, pname, params); };
	 TexParameterIuiv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLuint, loc := #caller_location) { impl_TexParameterIuiv(cast(u32)target, cast(u32)pname, params); debug_helper(loc, nil, target, pname, params); };
	 GetTexParameterIiv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetTexParameterIiv(cast(u32)target, cast(u32)pname, params); debug_helper(loc, nil, target, pname, params); };
	 GetTexParameterIuiv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLuint, loc := #caller_location) { impl_GetTexParameterIuiv(cast(u32)target, cast(u32)pname, params); debug_helper(loc, nil, target, pname, params); };
	 ClearBufferiv :: proc "c" (buffer : GLenum, drawbuffer : GLint, value : ^GLint, loc := #caller_location) { impl_ClearBufferiv(cast(u32)buffer, drawbuffer, value); debug_helper(loc, nil, buffer, drawbuffer, value); };
	 ClearBufferuiv :: proc "c" (buffer : GLenum, drawbuffer : GLint, value : ^GLuint, loc := #caller_location) { impl_ClearBufferuiv(cast(u32)buffer, drawbuffer, value); debug_helper(loc, nil, buffer, drawbuffer, value); };
	 ClearBufferfv :: proc "c" (buffer : GLenum, drawbuffer : GLint, value : ^GLfloat, loc := #caller_location) { impl_ClearBufferfv(cast(u32)buffer, drawbuffer, value); debug_helper(loc, nil, buffer, drawbuffer, value); };
	 ClearBufferfi :: proc "c" (buffer : GLenum, drawbuffer : GLint, depth : GLfloat, stencil : GLint, loc := #caller_location) { impl_ClearBufferfi(cast(u32)buffer, drawbuffer, depth, stencil); debug_helper(loc, nil, buffer, drawbuffer, depth, stencil); };
	 BindRenderbuffer :: proc "c" (target : GLenum, renderbuffer : GLuint, loc := #caller_location) { impl_BindRenderbuffer(cast(u32)target, renderbuffer); debug_helper(loc, nil, target, renderbuffer); };
	 DeleteRenderbuffers :: proc "c" (n : GLsizei, renderbuffers : ^GLuint, loc := #caller_location) { impl_DeleteRenderbuffers(n, renderbuffers); debug_helper(loc, nil, n, renderbuffers); };
	 GenRenderbuffers :: proc "c" (n : GLsizei, renderbuffers : ^GLuint, loc := #caller_location) { impl_GenRenderbuffers(n, renderbuffers); debug_helper(loc, nil, n, renderbuffers); };
	 RenderbufferStorage :: proc "c" (target : GLenum, internalformat : GLenum, width : GLsizei, height : GLsizei, loc := #caller_location) { impl_RenderbufferStorage(cast(u32)target, cast(u32)internalformat, width, height); debug_helper(loc, nil, target, internalformat, width, height); };
	 GetRenderbufferParameteriv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetRenderbufferParameteriv(cast(u32)target, cast(u32)pname, params); debug_helper(loc, nil, target, pname, params); };
	 BindFramebuffer :: proc "c" (target : GLenum, framebuffer : GLuint, loc := #caller_location) { impl_BindFramebuffer(cast(u32)target, framebuffer); debug_helper(loc, nil, target, framebuffer); };
	 DeleteFramebuffers :: proc "c" (n : GLsizei, framebuffers : ^GLuint, loc := #caller_location) { impl_DeleteFramebuffers(n, framebuffers); debug_helper(loc, nil, n, framebuffers); };
	 GenFramebuffers :: proc "c" (n : GLsizei, framebuffers : ^GLuint, loc := #caller_location) { impl_GenFramebuffers(n, framebuffers); debug_helper(loc, nil, n, framebuffers); };
	 FramebufferTexture1D :: proc "c" (target : GLenum, attachment : GLenum, textarget : GLenum, texture : GLuint, level : GLint, loc := #caller_location) { impl_FramebufferTexture1D(cast(u32)target, cast(u32)attachment, cast(u32)textarget, texture, level); debug_helper(loc, nil, target, attachment, textarget, texture, level); };
	 FramebufferTexture2D :: proc "c" (target : GLenum, attachment : GLenum, textarget : GLenum, texture : GLuint, level : GLint, loc := #caller_location) { impl_FramebufferTexture2D(cast(u32)target, cast(u32)attachment, cast(u32)textarget, texture, level); debug_helper(loc, nil, target, attachment, textarget, texture, level); };
	 FramebufferTexture3D :: proc "c" (target : GLenum, attachment : GLenum, textarget : GLenum, texture : GLuint, level : GLint, zoffset : GLint, loc := #caller_location) { impl_FramebufferTexture3D(cast(u32)target, cast(u32)attachment, cast(u32)textarget, texture, level, zoffset); debug_helper(loc, nil, target, attachment, textarget, texture, level, zoffset); };
	 FramebufferRenderbuffer :: proc "c" (target : GLenum, attachment : GLenum, renderbuffertarget : GLenum, renderbuffer : GLuint, loc := #caller_location) { impl_FramebufferRenderbuffer(cast(u32)target, cast(u32)attachment, cast(u32)renderbuffertarget, renderbuffer); debug_helper(loc, nil, target, attachment, renderbuffertarget, renderbuffer); };
	 GetFramebufferAttachmentParameteriv :: proc "c" (target : GLenum, attachment : GLenum, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetFramebufferAttachmentParameteriv(cast(u32)target, cast(u32)attachment, cast(u32)pname, params); debug_helper(loc, nil, target, attachment, pname, params); };
	 GenerateMipmap :: proc "c" (target : GLenum, loc := #caller_location) { impl_GenerateMipmap(cast(u32)target); debug_helper(loc, nil, target); };
	 BlitFramebuffer :: proc "c" (srcX0 : GLint, srcY0 : GLint, srcX1 : GLint, srcY1 : GLint, dstX0 : GLint, dstY0 : GLint, dstX1 : GLint, dstY1 : GLint, mask : GLbitfield, filter : GLenum, loc := #caller_location) { impl_BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, cast(u32)mask, cast(u32)filter); debug_helper(loc, nil, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); };
	 RenderbufferStorageMultisample :: proc "c" (target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, loc := #caller_location) { impl_RenderbufferStorageMultisample(cast(u32)target, samples, cast(u32)internalformat, width, height); debug_helper(loc, nil, target, samples, internalformat, width, height); };
	 FramebufferTextureLayer :: proc "c" (target : GLenum, attachment : GLenum, texture : GLuint, level : GLint, layer : GLint, loc := #caller_location) { impl_FramebufferTextureLayer(cast(u32)target, cast(u32)attachment, texture, level, layer); debug_helper(loc, nil, target, attachment, texture, level, layer); };
	 FlushMappedBufferRange :: proc "c" (target : GLenum, offset : GLintptr, length : GLsizeiptr, loc := #caller_location) { impl_FlushMappedBufferRange(cast(u32)target, offset, length); debug_helper(loc, nil, target, offset, length); };
	 BindVertexArray :: proc "c" (array : GLuint, loc := #caller_location) { impl_BindVertexArray(array); debug_helper(loc, nil, array); };
	 DeleteVertexArrays :: proc "c" (n : GLsizei, arrays : ^GLuint, loc := #caller_location) { impl_DeleteVertexArrays(n, arrays); debug_helper(loc, nil, n, arrays); };
	 GenVertexArrays :: proc "c" (n : GLsizei, arrays : ^GLuint, loc := #caller_location) { impl_GenVertexArrays(n, arrays); debug_helper(loc, nil, n, arrays); };
// VERSION_3_1
	 DrawArraysInstanced :: proc "c" (mode : GLenum, first : GLint, count : GLsizei, instancecount : GLsizei, loc := #caller_location) { impl_DrawArraysInstanced(cast(u32)mode, first, count, instancecount); debug_helper(loc, nil, mode, first, count, instancecount); };
	 DrawElementsInstanced :: proc "c" (mode : GLenum, count : GLsizei, type : GLenum, indices : rawptr, instancecount : GLsizei, loc := #caller_location) { impl_DrawElementsInstanced(cast(u32)mode, count, cast(u32)type, indices, instancecount); debug_helper(loc, nil, mode, count, type, indices, instancecount); };
	 TexBuffer :: proc "c" (target : GLenum, internalformat : GLenum, buffer : GLuint, loc := #caller_location) { impl_TexBuffer(cast(u32)target, cast(u32)internalformat, buffer); debug_helper(loc, nil, target, internalformat, buffer); };
	 PrimitiveRestartIndex :: proc "c" (index : GLuint, loc := #caller_location) { impl_PrimitiveRestartIndex(index); debug_helper(loc, nil, index); };
	 CopyBufferSubData :: proc "c" (readTarget : GLenum, writeTarget : GLenum, readOffset : GLintptr, writeOffset : GLintptr, size : GLsizeiptr, loc := #caller_location) { impl_CopyBufferSubData(cast(u32)readTarget, cast(u32)writeTarget, readOffset, writeOffset, size); debug_helper(loc, nil, readTarget, writeTarget, readOffset, writeOffset, size); };
	 GetUniformIndices :: proc "c" (program : GLuint, uniformCount : GLsizei, uniformNames : ^GLstring, uniformIndices : ^GLuint, loc := #caller_location) { impl_GetUniformIndices(program, uniformCount, uniformNames, uniformIndices); debug_helper(loc, nil, program, uniformCount, uniformNames, uniformIndices); };
	 GetActiveUniformsiv :: proc "c" (program : GLuint, uniformCount : GLsizei, uniformIndices : ^GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetActiveUniformsiv(program, uniformCount, uniformIndices, cast(u32)pname, params); debug_helper(loc, nil, program, uniformCount, uniformIndices, pname, params); };
	 GetActiveUniformName :: proc "c" (program : GLuint, uniformIndex : GLuint, bufSize : GLsizei, length : ^GLsizei, uniformName : ^GLchar, loc := #caller_location) { impl_GetActiveUniformName(program, uniformIndex, bufSize, length, uniformName); debug_helper(loc, nil, program, uniformIndex, bufSize, length, uniformName); };
	 GetActiveUniformBlockiv :: proc "c" (program : GLuint, uniformBlockIndex : GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetActiveUniformBlockiv(program, uniformBlockIndex, cast(u32)pname, params); debug_helper(loc, nil, program, uniformBlockIndex, pname, params); };
	 GetActiveUniformBlockName :: proc "c" (program : GLuint, uniformBlockIndex : GLuint, bufSize : GLsizei, length : ^GLsizei, uniformBlockName : ^GLchar, loc := #caller_location) { impl_GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName); debug_helper(loc, nil, program, uniformBlockIndex, bufSize, length, uniformBlockName); };
	 UniformBlockBinding :: proc "c" (program : GLuint, uniformBlockIndex : GLuint, uniformBlockBinding : GLuint, loc := #caller_location) { impl_UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding); debug_helper(loc, nil, program, uniformBlockIndex, uniformBlockBinding); };
// VERSION_3_2
	 DrawElementsBaseVertex :: proc "c" (mode : GLenum, count : GLsizei, type : GLenum, indices : rawptr, basevertex : GLint, loc := #caller_location) { impl_DrawElementsBaseVertex(cast(u32)mode, count, cast(u32)type, indices, basevertex); debug_helper(loc, nil, mode, count, type, indices, basevertex); };
	 DrawRangeElementsBaseVertex :: proc "c" (mode : GLenum, start : GLuint, end : GLuint, count : GLsizei, type : GLenum, indices : rawptr, basevertex : GLint, loc := #caller_location) { impl_DrawRangeElementsBaseVertex(cast(u32)mode, start, end, count, cast(u32)type, indices, basevertex); debug_helper(loc, nil, mode, start, end, count, type, indices, basevertex); };
	 DrawElementsInstancedBaseVertex :: proc "c" (mode : GLenum, count : GLsizei, type : GLenum, indices : rawptr, instancecount : GLsizei, basevertex : GLint, loc := #caller_location) { impl_DrawElementsInstancedBaseVertex(cast(u32)mode, count, cast(u32)type, indices, instancecount, basevertex); debug_helper(loc, nil, mode, count, type, indices, instancecount, basevertex); };
	 MultiDrawElementsBaseVertex :: proc "c" (mode : GLenum, count : ^GLsizei, type : GLenum, indices : ^rawptr, drawcount : GLsizei, basevertex : ^GLint, loc := #caller_location) { impl_MultiDrawElementsBaseVertex(cast(u32)mode, count, cast(u32)type, indices, drawcount, basevertex); debug_helper(loc, nil, mode, count, type, indices, drawcount, basevertex); };
	 ProvokingVertex :: proc "c" (mode : GLenum, loc := #caller_location) { impl_ProvokingVertex(cast(u32)mode); debug_helper(loc, nil, mode); };
	 DeleteSync :: proc "c" (sync : GLsync, loc := #caller_location) { impl_DeleteSync(sync); debug_helper(loc, nil, sync); };
	 WaitSync :: proc "c" (sync : GLsync, flags : GLbitfield, timeout : GLuint64, loc := #caller_location) { impl_WaitSync(sync, cast(u32)flags, timeout); debug_helper(loc, nil, sync, flags, timeout); };
	 GetInteger64v :: proc "c" (pname : GLenum, data : ^GLint64, loc := #caller_location) { impl_GetInteger64v(cast(u32)pname, data); debug_helper(loc, nil, pname, data); };
	 GetSynciv :: proc "c" (sync : GLsync, pname : GLenum, bufSize : GLsizei, length : ^GLsizei, values : ^GLint, loc := #caller_location) { impl_GetSynciv(sync, cast(u32)pname, bufSize, length, values); debug_helper(loc, nil, sync, pname, bufSize, length, values); };
	 GetInteger64i_v :: proc "c" (target : GLenum, index : GLuint, data : ^GLint64, loc := #caller_location) { impl_GetInteger64i_v(cast(u32)target, index, data); debug_helper(loc, nil, target, index, data); };
	 GetBufferParameteri64v :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint64, loc := #caller_location) { impl_GetBufferParameteri64v(cast(u32)target, cast(u32)pname, params); debug_helper(loc, nil, target, pname, params); };
	 FramebufferTexture :: proc "c" (target : GLenum, attachment : GLenum, texture : GLuint, level : GLint, loc := #caller_location) { impl_FramebufferTexture(cast(u32)target, cast(u32)attachment, texture, level); debug_helper(loc, nil, target, attachment, texture, level); };
	 TexImage2DMultisample :: proc "c" (target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, fixedsamplelocations : GLboolean, loc := #caller_location) { impl_TexImage2DMultisample(cast(u32)target, samples, cast(u32)internalformat, width, height, fixedsamplelocations); debug_helper(loc, nil, target, samples, internalformat, width, height, fixedsamplelocations); };
	 TexImage3DMultisample :: proc "c" (target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, fixedsamplelocations : GLboolean, loc := #caller_location) { impl_TexImage3DMultisample(cast(u32)target, samples, cast(u32)internalformat, width, height, depth, fixedsamplelocations); debug_helper(loc, nil, target, samples, internalformat, width, height, depth, fixedsamplelocations); };
	 GetMultisamplefv :: proc "c" (pname : GLenum, index : GLuint, val : ^GLfloat, loc := #caller_location) { impl_GetMultisamplefv(cast(u32)pname, index, val); debug_helper(loc, nil, pname, index, val); };
	 SampleMaski :: proc "c" (maskNumber : GLuint, mask : GLbitfield, loc := #caller_location) { impl_SampleMaski(maskNumber, cast(u32)mask); debug_helper(loc, nil, maskNumber, mask); };
// VERSION_3_3
	 BindFragDataLocationIndexed :: proc "c" (program : GLuint, colorNumber : GLuint, index : GLuint, name : GLstring, loc := #caller_location) { impl_BindFragDataLocationIndexed(program, colorNumber, index, name); debug_helper(loc, nil, program, colorNumber, index, name); };
	 GenSamplers :: proc "c" (count : GLsizei, samplers : ^GLuint, loc := #caller_location) { impl_GenSamplers(count, samplers); debug_helper(loc, nil, count, samplers); };
	 DeleteSamplers :: proc "c" (count : GLsizei, samplers : ^GLuint, loc := #caller_location) { impl_DeleteSamplers(count, samplers); debug_helper(loc, nil, count, samplers); };
	 BindSampler :: proc "c" (unit : GLuint, sampler : GLuint, loc := #caller_location) { impl_BindSampler(unit, sampler); debug_helper(loc, nil, unit, sampler); };
	 SamplerParameteri :: proc "c" (sampler : GLuint, pname : GLenum, param : GLint, loc := #caller_location) { impl_SamplerParameteri(sampler, cast(u32)pname, param); debug_helper(loc, nil, sampler, pname, param); };
	 SamplerParameteriv :: proc "c" (sampler : GLuint, pname : GLenum, param : ^GLint, loc := #caller_location) { impl_SamplerParameteriv(sampler, cast(u32)pname, param); debug_helper(loc, nil, sampler, pname, param); };
	 SamplerParameterf :: proc "c" (sampler : GLuint, pname : GLenum, param : GLfloat, loc := #caller_location) { impl_SamplerParameterf(sampler, cast(u32)pname, param); debug_helper(loc, nil, sampler, pname, param); };
	 SamplerParameterfv :: proc "c" (sampler : GLuint, pname : GLenum, param : ^GLfloat, loc := #caller_location) { impl_SamplerParameterfv(sampler, cast(u32)pname, param); debug_helper(loc, nil, sampler, pname, param); };
	 SamplerParameterIiv :: proc "c" (sampler : GLuint, pname : GLenum, param : ^GLint, loc := #caller_location) { impl_SamplerParameterIiv(sampler, cast(u32)pname, param); debug_helper(loc, nil, sampler, pname, param); };
	 SamplerParameterIuiv :: proc "c" (sampler : GLuint, pname : GLenum, param : ^GLuint, loc := #caller_location) { impl_SamplerParameterIuiv(sampler, cast(u32)pname, param); debug_helper(loc, nil, sampler, pname, param); };
	 GetSamplerParameteriv :: proc "c" (sampler : GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetSamplerParameteriv(sampler, cast(u32)pname, params); debug_helper(loc, nil, sampler, pname, params); };
	 GetSamplerParameterIiv :: proc "c" (sampler : GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetSamplerParameterIiv(sampler, cast(u32)pname, params); debug_helper(loc, nil, sampler, pname, params); };
	 GetSamplerParameterfv :: proc "c" (sampler : GLuint, pname : GLenum, params : ^GLfloat, loc := #caller_location) { impl_GetSamplerParameterfv(sampler, cast(u32)pname, params); debug_helper(loc, nil, sampler, pname, params); };
	 GetSamplerParameterIuiv :: proc "c" (sampler : GLuint, pname : GLenum, params : ^GLuint, loc := #caller_location) { impl_GetSamplerParameterIuiv(sampler, cast(u32)pname, params); debug_helper(loc, nil, sampler, pname, params); };
	 QueryCounter :: proc "c" (id : GLuint, target : GLenum, loc := #caller_location) { impl_QueryCounter(id, cast(u32)target); debug_helper(loc, nil, id, target); };
	 GetQueryObjecti64v :: proc "c" (id : GLuint, pname : GLenum, params : ^GLint64, loc := #caller_location) { impl_GetQueryObjecti64v(id, cast(u32)pname, params); debug_helper(loc, nil, id, pname, params); };
	 GetQueryObjectui64v :: proc "c" (id : GLuint, pname : GLenum, params : ^GLuint64, loc := #caller_location) { impl_GetQueryObjectui64v(id, cast(u32)pname, params); debug_helper(loc, nil, id, pname, params); };
	 VertexAttribDivisor :: proc "c" (index : GLuint, divisor : GLuint, loc := #caller_location) { impl_VertexAttribDivisor(index, divisor); debug_helper(loc, nil, index, divisor); };
	 VertexAttribP1ui :: proc "c" (index : GLuint, type : GLenum, normalized : GLboolean, value : GLuint, loc := #caller_location) { impl_VertexAttribP1ui(index, cast(u32)type, normalized, value); debug_helper(loc, nil, index, type, normalized, value); };
	 VertexAttribP1uiv :: proc "c" (index : GLuint, type : GLenum, normalized : GLboolean, value : ^GLuint, loc := #caller_location) { impl_VertexAttribP1uiv(index, cast(u32)type, normalized, value); debug_helper(loc, nil, index, type, normalized, value); };
	 VertexAttribP2ui :: proc "c" (index : GLuint, type : GLenum, normalized : GLboolean, value : GLuint, loc := #caller_location) { impl_VertexAttribP2ui(index, cast(u32)type, normalized, value); debug_helper(loc, nil, index, type, normalized, value); };
	 VertexAttribP2uiv :: proc "c" (index : GLuint, type : GLenum, normalized : GLboolean, value : ^GLuint, loc := #caller_location) { impl_VertexAttribP2uiv(index, cast(u32)type, normalized, value); debug_helper(loc, nil, index, type, normalized, value); };
	 VertexAttribP3ui :: proc "c" (index : GLuint, type : GLenum, normalized : GLboolean, value : GLuint, loc := #caller_location) { impl_VertexAttribP3ui(index, cast(u32)type, normalized, value); debug_helper(loc, nil, index, type, normalized, value); };
	 VertexAttribP3uiv :: proc "c" (index : GLuint, type : GLenum, normalized : GLboolean, value : ^GLuint, loc := #caller_location) { impl_VertexAttribP3uiv(index, cast(u32)type, normalized, value); debug_helper(loc, nil, index, type, normalized, value); };
	 VertexAttribP4ui :: proc "c" (index : GLuint, type : GLenum, normalized : GLboolean, value : GLuint, loc := #caller_location) { impl_VertexAttribP4ui(index, cast(u32)type, normalized, value); debug_helper(loc, nil, index, type, normalized, value); };
	 VertexAttribP4uiv :: proc "c" (index : GLuint, type : GLenum, normalized : GLboolean, value : ^GLuint, loc := #caller_location) { impl_VertexAttribP4uiv(index, cast(u32)type, normalized, value); debug_helper(loc, nil, index, type, normalized, value); };
	 VertexP2ui :: proc "c" (type : GLenum, value : GLuint, loc := #caller_location) { impl_VertexP2ui(cast(u32)type, value); debug_helper(loc, nil, type, value); };
	 VertexP2uiv :: proc "c" (type : GLenum, value : ^GLuint, loc := #caller_location) { impl_VertexP2uiv(cast(u32)type, value); debug_helper(loc, nil, type, value); };
	 VertexP3ui :: proc "c" (type : GLenum, value : GLuint, loc := #caller_location) { impl_VertexP3ui(cast(u32)type, value); debug_helper(loc, nil, type, value); };
	 VertexP3uiv :: proc "c" (type : GLenum, value : ^GLuint, loc := #caller_location) { impl_VertexP3uiv(cast(u32)type, value); debug_helper(loc, nil, type, value); };
	 VertexP4ui :: proc "c" (type : GLenum, value : GLuint, loc := #caller_location) { impl_VertexP4ui(cast(u32)type, value); debug_helper(loc, nil, type, value); };
	 VertexP4uiv :: proc "c" (type : GLenum, value : ^GLuint, loc := #caller_location) { impl_VertexP4uiv(cast(u32)type, value); debug_helper(loc, nil, type, value); };
	 TexCoordP1ui :: proc "c" (type : GLenum, coords : GLuint, loc := #caller_location) { impl_TexCoordP1ui(cast(u32)type, coords); debug_helper(loc, nil, type, coords); };
	 TexCoordP1uiv :: proc "c" (type : GLenum, coords : ^GLuint, loc := #caller_location) { impl_TexCoordP1uiv(cast(u32)type, coords); debug_helper(loc, nil, type, coords); };
	 TexCoordP2ui :: proc "c" (type : GLenum, coords : GLuint, loc := #caller_location) { impl_TexCoordP2ui(cast(u32)type, coords); debug_helper(loc, nil, type, coords); };
	 TexCoordP2uiv :: proc "c" (type : GLenum, coords : ^GLuint, loc := #caller_location) { impl_TexCoordP2uiv(cast(u32)type, coords); debug_helper(loc, nil, type, coords); };
	 TexCoordP3ui :: proc "c" (type : GLenum, coords : GLuint, loc := #caller_location) { impl_TexCoordP3ui(cast(u32)type, coords); debug_helper(loc, nil, type, coords); };
	 TexCoordP3uiv :: proc "c" (type : GLenum, coords : ^GLuint, loc := #caller_location) { impl_TexCoordP3uiv(cast(u32)type, coords); debug_helper(loc, nil, type, coords); };
	 TexCoordP4ui :: proc "c" (type : GLenum, coords : GLuint, loc := #caller_location) { impl_TexCoordP4ui(cast(u32)type, coords); debug_helper(loc, nil, type, coords); };
	 TexCoordP4uiv :: proc "c" (type : GLenum, coords : ^GLuint, loc := #caller_location) { impl_TexCoordP4uiv(cast(u32)type, coords); debug_helper(loc, nil, type, coords); };
	 MultiTexCoordP1ui :: proc "c" (texture : GLenum, type : GLenum, coords : GLuint, loc := #caller_location) { impl_MultiTexCoordP1ui(cast(u32)texture, cast(u32)type, coords); debug_helper(loc, nil, texture, type, coords); };
	 MultiTexCoordP1uiv :: proc "c" (texture : GLenum, type : GLenum, coords : ^GLuint, loc := #caller_location) { impl_MultiTexCoordP1uiv(cast(u32)texture, cast(u32)type, coords); debug_helper(loc, nil, texture, type, coords); };
	 MultiTexCoordP2ui :: proc "c" (texture : GLenum, type : GLenum, coords : GLuint, loc := #caller_location) { impl_MultiTexCoordP2ui(cast(u32)texture, cast(u32)type, coords); debug_helper(loc, nil, texture, type, coords); };
	 MultiTexCoordP2uiv :: proc "c" (texture : GLenum, type : GLenum, coords : ^GLuint, loc := #caller_location) { impl_MultiTexCoordP2uiv(cast(u32)texture, cast(u32)type, coords); debug_helper(loc, nil, texture, type, coords); };
	 MultiTexCoordP3ui :: proc "c" (texture : GLenum, type : GLenum, coords : GLuint, loc := #caller_location) { impl_MultiTexCoordP3ui(cast(u32)texture, cast(u32)type, coords); debug_helper(loc, nil, texture, type, coords); };
	 MultiTexCoordP3uiv :: proc "c" (texture : GLenum, type : GLenum, coords : ^GLuint, loc := #caller_location) { impl_MultiTexCoordP3uiv(cast(u32)texture, cast(u32)type, coords); debug_helper(loc, nil, texture, type, coords); };
	 MultiTexCoordP4ui :: proc "c" (texture : GLenum, type : GLenum, coords : GLuint, loc := #caller_location) { impl_MultiTexCoordP4ui(cast(u32)texture, cast(u32)type, coords); debug_helper(loc, nil, texture, type, coords); };
	 MultiTexCoordP4uiv :: proc "c" (texture : GLenum, type : GLenum, coords : ^GLuint, loc := #caller_location) { impl_MultiTexCoordP4uiv(cast(u32)texture, cast(u32)type, coords); debug_helper(loc, nil, texture, type, coords); };
	 NormalP3ui :: proc "c" (type : GLenum, coords : GLuint, loc := #caller_location) { impl_NormalP3ui(cast(u32)type, coords); debug_helper(loc, nil, type, coords); };
	 NormalP3uiv :: proc "c" (type : GLenum, coords : ^GLuint, loc := #caller_location) { impl_NormalP3uiv(cast(u32)type, coords); debug_helper(loc, nil, type, coords); };
	 ColorP3ui :: proc "c" (type : GLenum, color : GLuint, loc := #caller_location) { impl_ColorP3ui(cast(u32)type, color); debug_helper(loc, nil, type, color); };
	 ColorP3uiv :: proc "c" (type : GLenum, color : ^GLuint, loc := #caller_location) { impl_ColorP3uiv(cast(u32)type, color); debug_helper(loc, nil, type, color); };
	 ColorP4ui :: proc "c" (type : GLenum, color : GLuint, loc := #caller_location) { impl_ColorP4ui(cast(u32)type, color); debug_helper(loc, nil, type, color); };
	 ColorP4uiv :: proc "c" (type : GLenum, color : ^GLuint, loc := #caller_location) { impl_ColorP4uiv(cast(u32)type, color); debug_helper(loc, nil, type, color); };
	 SecondaryColorP3ui :: proc "c" (type : GLenum, color : GLuint, loc := #caller_location) { impl_SecondaryColorP3ui(cast(u32)type, color); debug_helper(loc, nil, type, color); };
	 SecondaryColorP3uiv :: proc "c" (type : GLenum, color : ^GLuint, loc := #caller_location) { impl_SecondaryColorP3uiv(cast(u32)type, color); debug_helper(loc, nil, type, color); };
// VERSION_4_0
	 MinSampleShading :: proc "c" (value : GLfloat, loc := #caller_location) { impl_MinSampleShading(value); debug_helper(loc, nil, value); };
	 BlendEquationi :: proc "c" (buf : GLuint, mode : GLenum, loc := #caller_location) { impl_BlendEquationi(buf, cast(u32)mode); debug_helper(loc, nil, buf, mode); };
	 BlendEquationSeparatei :: proc "c" (buf : GLuint, modeRGB : GLenum, modeAlpha : GLenum, loc := #caller_location) { impl_BlendEquationSeparatei(buf, cast(u32)modeRGB, cast(u32)modeAlpha); debug_helper(loc, nil, buf, modeRGB, modeAlpha); };
	 BlendFunci :: proc "c" (buf : GLuint, src : GLenum, dst : GLenum, loc := #caller_location) { impl_BlendFunci(buf, cast(u32)src, cast(u32)dst); debug_helper(loc, nil, buf, src, dst); };
	 BlendFuncSeparatei :: proc "c" (buf : GLuint, srcRGB : GLenum, dstRGB : GLenum, srcAlpha : GLenum, dstAlpha : GLenum, loc := #caller_location) { impl_BlendFuncSeparatei(buf, cast(u32)srcRGB, cast(u32)dstRGB, cast(u32)srcAlpha, cast(u32)dstAlpha); debug_helper(loc, nil, buf, srcRGB, dstRGB, srcAlpha, dstAlpha); };
	 DrawArraysIndirect :: proc "c" (mode : GLenum, indirect : ^DrawArraysIndirectCommand, loc := #caller_location) { impl_DrawArraysIndirect(cast(u32)mode, indirect); debug_helper(loc, nil, mode, indirect); };
	 DrawElementsIndirect :: proc "c" (mode : GLenum, type : GLenum, indirect : ^DrawElementsIndirectCommand, loc := #caller_location) { impl_DrawElementsIndirect(cast(u32)mode, cast(u32)type, indirect); debug_helper(loc, nil, mode, type, indirect); };
	 Uniform1d :: proc "c" (location : GLint, x : GLdouble, loc := #caller_location) { impl_Uniform1d(location, x); debug_helper(loc, nil, location, x); };
	 Uniform2d :: proc "c" (location : GLint, x : GLdouble, y : GLdouble, loc := #caller_location) { impl_Uniform2d(location, x, y); debug_helper(loc, nil, location, x, y); };
	 Uniform3d :: proc "c" (location : GLint, x : GLdouble, y : GLdouble, z : GLdouble, loc := #caller_location) { impl_Uniform3d(location, x, y, z); debug_helper(loc, nil, location, x, y, z); };
	 Uniform4d :: proc "c" (location : GLint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble, loc := #caller_location) { impl_Uniform4d(location, x, y, z, w); debug_helper(loc, nil, location, x, y, z, w); };
	 Uniform1dv :: proc "c" (location : GLint, count : GLsizei, value : ^GLdouble, loc := #caller_location) { impl_Uniform1dv(location, count, value); debug_helper(loc, nil, location, count, value); };
	 Uniform2dv :: proc "c" (location : GLint, count : GLsizei, value : ^GLdouble, loc := #caller_location) { impl_Uniform2dv(location, count, value); debug_helper(loc, nil, location, count, value); };
	 Uniform3dv :: proc "c" (location : GLint, count : GLsizei, value : ^GLdouble, loc := #caller_location) { impl_Uniform3dv(location, count, value); debug_helper(loc, nil, location, count, value); };
	 Uniform4dv :: proc "c" (location : GLint, count : GLsizei, value : ^GLdouble, loc := #caller_location) { impl_Uniform4dv(location, count, value); debug_helper(loc, nil, location, count, value); };
	 UniformMatrix2dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_UniformMatrix2dv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 UniformMatrix3dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_UniformMatrix3dv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 UniformMatrix4dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_UniformMatrix4dv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 UniformMatrix2x3dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_UniformMatrix2x3dv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 UniformMatrix2x4dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_UniformMatrix2x4dv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 UniformMatrix3x2dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_UniformMatrix3x2dv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 UniformMatrix3x4dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_UniformMatrix3x4dv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 UniformMatrix4x2dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_UniformMatrix4x2dv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 UniformMatrix4x3dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_UniformMatrix4x3dv(location, count, transpose, value); debug_helper(loc, nil, location, count, transpose, value); };
	 GetUniformdv :: proc "c" (program : GLuint, location : GLint, params : ^GLdouble, loc := #caller_location) { impl_GetUniformdv(program, location, params); debug_helper(loc, nil, program, location, params); };
	 GetActiveSubroutineUniformiv :: proc "c" (program : GLuint, shadertype : GLenum, index : GLuint, pname : GLenum, values : ^GLint, loc := #caller_location) { impl_GetActiveSubroutineUniformiv(program, cast(u32)shadertype, index, cast(u32)pname, values); debug_helper(loc, nil, program, shadertype, index, pname, values); };
	 GetActiveSubroutineUniformName :: proc "c" (program : GLuint, shadertype : GLenum, index : GLuint, bufsize : GLsizei, length : ^GLsizei, name : GLoutstring, loc := #caller_location) { impl_GetActiveSubroutineUniformName(program, cast(u32)shadertype, index, bufsize, length, name); debug_helper(loc, nil, program, shadertype, index, bufsize, length, name); };
	 GetActiveSubroutineName :: proc "c" (program : GLuint, shadertype : GLenum, index : GLuint, bufsize : GLsizei, length : ^GLsizei, name : GLoutstring, loc := #caller_location) { impl_GetActiveSubroutineName(program, cast(u32)shadertype, index, bufsize, length, name); debug_helper(loc, nil, program, shadertype, index, bufsize, length, name); };
	 UniformSubroutinesuiv :: proc "c" (shadertype : GLenum, count : GLsizei, indices : ^GLuint, loc := #caller_location) { impl_UniformSubroutinesuiv(cast(u32)shadertype, count, indices); debug_helper(loc, nil, shadertype, count, indices); };
	 GetUniformSubroutineuiv :: proc "c" (shadertype : GLenum, location : GLint, params : ^GLuint, loc := #caller_location) { impl_GetUniformSubroutineuiv(cast(u32)shadertype, location, params); debug_helper(loc, nil, shadertype, location, params); };
	 GetProgramStageiv :: proc "c" (program : GLuint, shadertype : GLenum, pname : GLenum, values : ^GLint, loc := #caller_location) { impl_GetProgramStageiv(program, cast(u32)shadertype, cast(u32)pname, values); debug_helper(loc, nil, program, shadertype, pname, values); };
	 PatchParameteri :: proc "c" (pname : GLenum, value : GLint, loc := #caller_location) { impl_PatchParameteri(cast(u32)pname, value); debug_helper(loc, nil, pname, value); };
	 PatchParameterfv :: proc "c" (pname : GLenum, values : ^GLfloat, loc := #caller_location) { impl_PatchParameterfv(cast(u32)pname, values); debug_helper(loc, nil, pname, values); };
	 BindTransformFeedback :: proc "c" (target : GLenum, id : GLuint, loc := #caller_location) { impl_BindTransformFeedback(cast(u32)target, id); debug_helper(loc, nil, target, id); };
	 DeleteTransformFeedbacks :: proc "c" (n : GLsizei, ids : ^GLuint, loc := #caller_location) { impl_DeleteTransformFeedbacks(n, ids); debug_helper(loc, nil, n, ids); };
	 GenTransformFeedbacks :: proc "c" (n : GLsizei, ids : ^GLuint, loc := #caller_location) { impl_GenTransformFeedbacks(n, ids); debug_helper(loc, nil, n, ids); };
	 PauseTransformFeedback :: proc "c" (loc := #caller_location) { impl_PauseTransformFeedback(); debug_helper(loc, nil, ); };
	 ResumeTransformFeedback :: proc "c" (loc := #caller_location) { impl_ResumeTransformFeedback(); debug_helper(loc, nil, ); };
	 DrawTransformFeedback :: proc "c" (mode : GLenum, id : GLuint, loc := #caller_location) { impl_DrawTransformFeedback(cast(u32)mode, id); debug_helper(loc, nil, mode, id); };
	 DrawTransformFeedbackStream :: proc "c" (mode : GLenum, id : GLuint, stream : GLuint, loc := #caller_location) { impl_DrawTransformFeedbackStream(cast(u32)mode, id, stream); debug_helper(loc, nil, mode, id, stream); };
	 BeginQueryIndexed :: proc "c" (target : GLenum, index : GLuint, id : GLuint, loc := #caller_location) { impl_BeginQueryIndexed(cast(u32)target, index, id); debug_helper(loc, nil, target, index, id); };
	 EndQueryIndexed :: proc "c" (target : GLenum, index : GLuint, loc := #caller_location) { impl_EndQueryIndexed(cast(u32)target, index); debug_helper(loc, nil, target, index); };
	 GetQueryIndexediv :: proc "c" (target : GLenum, index : GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetQueryIndexediv(cast(u32)target, index, cast(u32)pname, params); debug_helper(loc, nil, target, index, pname, params); };
	 MakeTextureHandleResidentARB :: proc "c" (handle : GLuint64, loc := #caller_location) { impl_MakeTextureHandleResidentARB(handle); debug_helper(loc, nil, handle); };
	 MakeImageHandleResidentARB :: proc "c" (handle : GLuint64, access : GLenum, loc := #caller_location) { impl_MakeImageHandleResidentARB(handle, cast(u32)access); debug_helper(loc, nil, handle, access); };
	 MakeTextureHandleNonResidentARB :: proc "c" (handle : GLuint64, loc := #caller_location) { impl_MakeTextureHandleNonResidentARB(handle); debug_helper(loc, nil, handle); };
	 MakeImageHandleNonResidentARB :: proc "c" (handle : GLuint64, loc := #caller_location) { impl_MakeImageHandleNonResidentARB(handle); debug_helper(loc, nil, handle); };
// VERSION_4_1
	 ReleaseShaderCompiler :: proc "c" (loc := #caller_location) { impl_ReleaseShaderCompiler(); debug_helper(loc, nil, ); };
	 ShaderBinary :: proc "c" (count : GLsizei, shaders : ^GLuint, binaryFormat : GLenum, binary : rawptr, length : GLsizei, loc := #caller_location) { impl_ShaderBinary(count, shaders, cast(u32)binaryFormat, binary, length); debug_helper(loc, nil, count, shaders, binaryFormat, binary, length); };
	 GetShaderPrecisionFormat :: proc "c" (shadertype : GLenum, precisiontype : GLenum, range : ^GLint, precision : ^GLint, loc := #caller_location) { impl_GetShaderPrecisionFormat(cast(u32)shadertype, cast(u32)precisiontype, range, precision); debug_helper(loc, nil, shadertype, precisiontype, range, precision); };
	 DepthRangef :: proc "c" (n : GLfloat, f : GLfloat, loc := #caller_location) { impl_DepthRangef(n, f); debug_helper(loc, nil, n, f); };
	 ClearDepthf :: proc "c" (d : GLfloat, loc := #caller_location) { impl_ClearDepthf(d); debug_helper(loc, nil, d); };
	 GetProgramBinary :: proc "c" (program : GLuint, bufSize : GLsizei, length : ^GLsizei, binaryFormat : ^GLenum, binary : rawptr, loc := #caller_location) { impl_GetProgramBinary(program, bufSize, length, cast(^u32)binaryFormat, binary); debug_helper(loc, nil, program, bufSize, length, binaryFormat, binary); };
	 ProgramBinary :: proc "c" (program : GLuint, binaryFormat : GLenum, binary : rawptr, length : GLsizei, loc := #caller_location) { impl_ProgramBinary(program, cast(u32)binaryFormat, binary, length); debug_helper(loc, nil, program, binaryFormat, binary, length); };
	 ProgramParameteri :: proc "c" (program : GLuint, pname : GLenum, value : GLint, loc := #caller_location) { impl_ProgramParameteri(program, cast(u32)pname, value); debug_helper(loc, nil, program, pname, value); };
	 UseProgramStages :: proc "c" (pipeline : GLuint, stages : GLbitfield, program : GLuint, loc := #caller_location) { impl_UseProgramStages(pipeline, cast(u32)stages, program); debug_helper(loc, nil, pipeline, stages, program); };
	 ActiveShaderProgram :: proc "c" (pipeline : GLuint, program : GLuint, loc := #caller_location) { impl_ActiveShaderProgram(pipeline, program); debug_helper(loc, nil, pipeline, program); };
	 BindProgramPipeline :: proc "c" (pipeline : GLuint, loc := #caller_location) { impl_BindProgramPipeline(pipeline); debug_helper(loc, nil, pipeline); };
	 DeleteProgramPipelines :: proc "c" (n : GLsizei, pipelines : ^GLuint, loc := #caller_location) { impl_DeleteProgramPipelines(n, pipelines); debug_helper(loc, nil, n, pipelines); };
	 GenProgramPipelines :: proc "c" (n : GLsizei, pipelines : ^GLuint, loc := #caller_location) { impl_GenProgramPipelines(n, pipelines); debug_helper(loc, nil, n, pipelines); };
	 GetProgramPipelineiv :: proc "c" (pipeline : GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetProgramPipelineiv(pipeline, cast(u32)pname, params); debug_helper(loc, nil, pipeline, pname, params); };
	 ProgramUniform1i :: proc "c" (program : GLuint, location : GLint, v0 : GLint, loc := #caller_location) { impl_ProgramUniform1i(program, location, v0); debug_helper(loc, nil, program, location, v0); };
	 ProgramUniform1iv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLint, loc := #caller_location) { impl_ProgramUniform1iv(program, location, count, value); debug_helper(loc, nil, program, location, count, value); };
	 ProgramUniform1f :: proc "c" (program : GLuint, location : GLint, v0 : GLfloat, loc := #caller_location) { impl_ProgramUniform1f(program, location, v0); debug_helper(loc, nil, program, location, v0); };
	 ProgramUniform1fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLfloat, loc := #caller_location) { impl_ProgramUniform1fv(program, location, count, value); debug_helper(loc, nil, program, location, count, value); };
	 ProgramUniform1d :: proc "c" (program : GLuint, location : GLint, v0 : GLdouble, loc := #caller_location) { impl_ProgramUniform1d(program, location, v0); debug_helper(loc, nil, program, location, v0); };
	 ProgramUniform1dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLdouble, loc := #caller_location) { impl_ProgramUniform1dv(program, location, count, value); debug_helper(loc, nil, program, location, count, value); };
	 ProgramUniform1ui :: proc "c" (program : GLuint, location : GLint, v0 : GLuint, loc := #caller_location) { impl_ProgramUniform1ui(program, location, v0); debug_helper(loc, nil, program, location, v0); };
	 ProgramUniform1uiv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLuint, loc := #caller_location) { impl_ProgramUniform1uiv(program, location, count, value); debug_helper(loc, nil, program, location, count, value); };
	 ProgramUniform2i :: proc "c" (program : GLuint, location : GLint, v0 : GLint, v1 : GLint, loc := #caller_location) { impl_ProgramUniform2i(program, location, v0, v1); debug_helper(loc, nil, program, location, v0, v1); };
	 ProgramUniform2iv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLint, loc := #caller_location) { impl_ProgramUniform2iv(program, location, count, value); debug_helper(loc, nil, program, location, count, value); };
	 ProgramUniform2f :: proc "c" (program : GLuint, location : GLint, v0 : GLfloat, v1 : GLfloat, loc := #caller_location) { impl_ProgramUniform2f(program, location, v0, v1); debug_helper(loc, nil, program, location, v0, v1); };
	 ProgramUniform2fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLfloat, loc := #caller_location) { impl_ProgramUniform2fv(program, location, count, value); debug_helper(loc, nil, program, location, count, value); };
	 ProgramUniform2d :: proc "c" (program : GLuint, location : GLint, v0 : GLdouble, v1 : GLdouble, loc := #caller_location) { impl_ProgramUniform2d(program, location, v0, v1); debug_helper(loc, nil, program, location, v0, v1); };
	 ProgramUniform2dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLdouble, loc := #caller_location) { impl_ProgramUniform2dv(program, location, count, value); debug_helper(loc, nil, program, location, count, value); };
	 ProgramUniform2ui :: proc "c" (program : GLuint, location : GLint, v0 : GLuint, v1 : GLuint, loc := #caller_location) { impl_ProgramUniform2ui(program, location, v0, v1); debug_helper(loc, nil, program, location, v0, v1); };
	 ProgramUniform2uiv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLuint, loc := #caller_location) { impl_ProgramUniform2uiv(program, location, count, value); debug_helper(loc, nil, program, location, count, value); };
	 ProgramUniform3i :: proc "c" (program : GLuint, location : GLint, v0 : GLint, v1 : GLint, v2 : GLint, loc := #caller_location) { impl_ProgramUniform3i(program, location, v0, v1, v2); debug_helper(loc, nil, program, location, v0, v1, v2); };
	 ProgramUniform3iv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLint, loc := #caller_location) { impl_ProgramUniform3iv(program, location, count, value); debug_helper(loc, nil, program, location, count, value); };
	 ProgramUniform3f :: proc "c" (program : GLuint, location : GLint, v0 : GLfloat, v1 : GLfloat, v2 : GLfloat, loc := #caller_location) { impl_ProgramUniform3f(program, location, v0, v1, v2); debug_helper(loc, nil, program, location, v0, v1, v2); };
	 ProgramUniform3fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLfloat, loc := #caller_location) { impl_ProgramUniform3fv(program, location, count, value); debug_helper(loc, nil, program, location, count, value); };
	 ProgramUniform3d :: proc "c" (program : GLuint, location : GLint, v0 : GLdouble, v1 : GLdouble, v2 : GLdouble, loc := #caller_location) { impl_ProgramUniform3d(program, location, v0, v1, v2); debug_helper(loc, nil, program, location, v0, v1, v2); };
	 ProgramUniform3dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLdouble, loc := #caller_location) { impl_ProgramUniform3dv(program, location, count, value); debug_helper(loc, nil, program, location, count, value); };
	 ProgramUniform3ui :: proc "c" (program : GLuint, location : GLint, v0 : GLuint, v1 : GLuint, v2 : GLuint, loc := #caller_location) { impl_ProgramUniform3ui(program, location, v0, v1, v2); debug_helper(loc, nil, program, location, v0, v1, v2); };
	 ProgramUniform3uiv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLuint, loc := #caller_location) { impl_ProgramUniform3uiv(program, location, count, value); debug_helper(loc, nil, program, location, count, value); };
	 ProgramUniform4i :: proc "c" (program : GLuint, location : GLint, v0 : GLint, v1 : GLint, v2 : GLint, v3 : GLint, loc := #caller_location) { impl_ProgramUniform4i(program, location, v0, v1, v2, v3); debug_helper(loc, nil, program, location, v0, v1, v2, v3); };
	 ProgramUniform4iv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLint, loc := #caller_location) { impl_ProgramUniform4iv(program, location, count, value); debug_helper(loc, nil, program, location, count, value); };
	 ProgramUniform4f :: proc "c" (program : GLuint, location : GLint, v0 : GLfloat, v1 : GLfloat, v2 : GLfloat, v3 : GLfloat, loc := #caller_location) { impl_ProgramUniform4f(program, location, v0, v1, v2, v3); debug_helper(loc, nil, program, location, v0, v1, v2, v3); };
	 ProgramUniform4fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLfloat, loc := #caller_location) { impl_ProgramUniform4fv(program, location, count, value); debug_helper(loc, nil, program, location, count, value); };
	 ProgramUniform4d :: proc "c" (program : GLuint, location : GLint, v0 : GLdouble, v1 : GLdouble, v2 : GLdouble, v3 : GLdouble, loc := #caller_location) { impl_ProgramUniform4d(program, location, v0, v1, v2, v3); debug_helper(loc, nil, program, location, v0, v1, v2, v3); };
	 ProgramUniform4dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLdouble, loc := #caller_location) { impl_ProgramUniform4dv(program, location, count, value); debug_helper(loc, nil, program, location, count, value); };
	 ProgramUniform4ui :: proc "c" (program : GLuint, location : GLint, v0 : GLuint, v1 : GLuint, v2 : GLuint, v3 : GLuint, loc := #caller_location) { impl_ProgramUniform4ui(program, location, v0, v1, v2, v3); debug_helper(loc, nil, program, location, v0, v1, v2, v3); };
	 ProgramUniform4uiv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLuint, loc := #caller_location) { impl_ProgramUniform4uiv(program, location, count, value); debug_helper(loc, nil, program, location, count, value); };
	 ProgramUniformMatrix2fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_ProgramUniformMatrix2fv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix3fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_ProgramUniformMatrix3fv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix4fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_ProgramUniformMatrix4fv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix2dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_ProgramUniformMatrix2dv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix3dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_ProgramUniformMatrix3dv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix4dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_ProgramUniformMatrix4dv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix2x3fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_ProgramUniformMatrix2x3fv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix3x2fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_ProgramUniformMatrix3x2fv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix2x4fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_ProgramUniformMatrix2x4fv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix4x2fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_ProgramUniformMatrix4x2fv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix3x4fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_ProgramUniformMatrix3x4fv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix4x3fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat, loc := #caller_location) { impl_ProgramUniformMatrix4x3fv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix2x3dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_ProgramUniformMatrix2x3dv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix3x2dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_ProgramUniformMatrix3x2dv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix2x4dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_ProgramUniformMatrix2x4dv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix4x2dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_ProgramUniformMatrix4x2dv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix3x4dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_ProgramUniformMatrix3x4dv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ProgramUniformMatrix4x3dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble, loc := #caller_location) { impl_ProgramUniformMatrix4x3dv(program, location, count, transpose, value); debug_helper(loc, nil, program, location, count, transpose, value); };
	 ValidateProgramPipeline :: proc "c" (pipeline : GLuint, loc := #caller_location) { impl_ValidateProgramPipeline(pipeline); debug_helper(loc, nil, pipeline); };
	 GetProgramPipelineInfoLog :: proc "c" (pipeline : GLuint, bufSize : GLsizei, length : ^GLsizei, infoLog : GLoutstring, loc := #caller_location) { impl_GetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog); debug_helper(loc, nil, pipeline, bufSize, length, infoLog); };
	 VertexAttribL1d :: proc "c" (index : GLuint, x : GLdouble, loc := #caller_location) { impl_VertexAttribL1d(index, x); debug_helper(loc, nil, index, x); };
	 VertexAttribL2d :: proc "c" (index : GLuint, x : GLdouble, y : GLdouble, loc := #caller_location) { impl_VertexAttribL2d(index, x, y); debug_helper(loc, nil, index, x, y); };
	 VertexAttribL3d :: proc "c" (index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble, loc := #caller_location) { impl_VertexAttribL3d(index, x, y, z); debug_helper(loc, nil, index, x, y, z); };
	 VertexAttribL4d :: proc "c" (index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble, loc := #caller_location) { impl_VertexAttribL4d(index, x, y, z, w); debug_helper(loc, nil, index, x, y, z, w); };
	 VertexAttribL1dv :: proc "c" (index : GLuint, v : ^GLdouble, loc := #caller_location) { impl_VertexAttribL1dv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttribL2dv :: proc "c" (index : GLuint, v : ^GLdouble, loc := #caller_location) { impl_VertexAttribL2dv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttribL3dv :: proc "c" (index : GLuint, v : ^GLdouble, loc := #caller_location) { impl_VertexAttribL3dv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttribL4dv :: proc "c" (index : GLuint, v : ^GLdouble, loc := #caller_location) { impl_VertexAttribL4dv(index, v); debug_helper(loc, nil, index, v); };
	 VertexAttribLPointer :: proc "c" (index : GLuint, size : GLint, type : GLenum, stride : GLsizei, pointer : uintptr, loc := #caller_location) { impl_VertexAttribLPointer(index, size, cast(u32)type, stride, pointer); debug_helper(loc, nil, index, size, type, stride, pointer); };
	 GetVertexAttribLdv :: proc "c" (index : GLuint, pname : GLenum, params : ^GLdouble, loc := #caller_location) { impl_GetVertexAttribLdv(index, cast(u32)pname, params); debug_helper(loc, nil, index, pname, params); };
	 ViewportArrayv :: proc "c" (first : GLuint, count : GLsizei, v : ^GLfloat, loc := #caller_location) { impl_ViewportArrayv(first, count, v); debug_helper(loc, nil, first, count, v); };
	 ViewportIndexedf :: proc "c" (index : GLuint, x : GLfloat, y : GLfloat, w : GLfloat, h : GLfloat, loc := #caller_location) { impl_ViewportIndexedf(index, x, y, w, h); debug_helper(loc, nil, index, x, y, w, h); };
	 ViewportIndexedfv :: proc "c" (index : GLuint, v : ^GLfloat, loc := #caller_location) { impl_ViewportIndexedfv(index, v); debug_helper(loc, nil, index, v); };
	 ScissorArrayv :: proc "c" (first : GLuint, count : GLsizei, v : ^GLint, loc := #caller_location) { impl_ScissorArrayv(first, count, v); debug_helper(loc, nil, first, count, v); };
	 ScissorIndexed :: proc "c" (index : GLuint, left : GLint, bottom : GLint, width : GLsizei, height : GLsizei, loc := #caller_location) { impl_ScissorIndexed(index, left, bottom, width, height); debug_helper(loc, nil, index, left, bottom, width, height); };
	 ScissorIndexedv :: proc "c" (index : GLuint, v : ^GLint, loc := #caller_location) { impl_ScissorIndexedv(index, v); debug_helper(loc, nil, index, v); };
	 DepthRangeArrayv :: proc "c" (first : GLuint, count : GLsizei, v : ^GLdouble, loc := #caller_location) { impl_DepthRangeArrayv(first, count, v); debug_helper(loc, nil, first, count, v); };
	 DepthRangeIndexed :: proc "c" (index : GLuint, n : GLdouble, f : GLdouble, loc := #caller_location) { impl_DepthRangeIndexed(index, n, f); debug_helper(loc, nil, index, n, f); };
	 GetFloati_v :: proc "c" (target : GLenum, index : GLuint, data : ^GLfloat, loc := #caller_location) { impl_GetFloati_v(cast(u32)target, index, data); debug_helper(loc, nil, target, index, data); };
	 GetDoublei_v :: proc "c" (target : GLenum, index : GLuint, data : ^GLdouble, loc := #caller_location) { impl_GetDoublei_v(cast(u32)target, index, data); debug_helper(loc, nil, target, index, data); };
// VERSION_4_2
	 DrawArraysInstancedBaseInstance :: proc "c" (mode : GLenum, first : GLint, count : GLsizei, instancecount : GLsizei, baseinstance : GLuint, loc := #caller_location) { impl_DrawArraysInstancedBaseInstance(cast(u32)mode, first, count, instancecount, baseinstance); debug_helper(loc, nil, mode, first, count, instancecount, baseinstance); };
	 DrawElementsInstancedBaseInstance :: proc "c" (mode : GLenum, count : GLsizei, type : GLenum, indices : rawptr, instancecount : GLsizei, baseinstance : GLuint, loc := #caller_location) { impl_DrawElementsInstancedBaseInstance(cast(u32)mode, count, cast(u32)type, indices, instancecount, baseinstance); debug_helper(loc, nil, mode, count, type, indices, instancecount, baseinstance); };
	 DrawElementsInstancedBaseVertexBaseInstance :: proc "c" (mode : GLenum, count : GLsizei, type : GLenum, indices : rawptr, instancecount : GLsizei, basevertex : GLint, baseinstance : GLuint, loc := #caller_location) { impl_DrawElementsInstancedBaseVertexBaseInstance(cast(u32)mode, count, cast(u32)type, indices, instancecount, basevertex, baseinstance); debug_helper(loc, nil, mode, count, type, indices, instancecount, basevertex, baseinstance); };
	 GetInternalformativ :: proc "c" (target : GLenum, internalformat : GLenum, pname : GLenum, bufSize : GLsizei, params : ^GLint, loc := #caller_location) { impl_GetInternalformativ(cast(u32)target, cast(u32)internalformat, cast(u32)pname, bufSize, params); debug_helper(loc, nil, target, internalformat, pname, bufSize, params); };
	 GetActiveAtomicCounterBufferiv :: proc "c" (program : GLuint, bufferIndex : GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetActiveAtomicCounterBufferiv(program, bufferIndex, cast(u32)pname, params); debug_helper(loc, nil, program, bufferIndex, pname, params); };
	 BindImageTexture :: proc "c" (unit : GLuint, texture : GLuint, level : GLint, layered : GLboolean, layer : GLint, access : GLenum, format : GLenum, loc := #caller_location) { impl_BindImageTexture(unit, texture, level, layered, layer, cast(u32)access, cast(u32)format); debug_helper(loc, nil, unit, texture, level, layered, layer, access, format); };
	 MemoryBarrier :: proc "c" (barriers : GLbitfield, loc := #caller_location) { impl_MemoryBarrier(cast(u32)barriers); debug_helper(loc, nil, barriers); };
	 TexStorage1D :: proc "c" (target : GLenum, levels : GLsizei, internalformat : GLenum, width : GLsizei, loc := #caller_location) { impl_TexStorage1D(cast(u32)target, levels, cast(u32)internalformat, width); debug_helper(loc, nil, target, levels, internalformat, width); };
	 TexStorage2D :: proc "c" (target : GLenum, levels : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, loc := #caller_location) { impl_TexStorage2D(cast(u32)target, levels, cast(u32)internalformat, width, height); debug_helper(loc, nil, target, levels, internalformat, width, height); };
	 TexStorage3D :: proc "c" (target : GLenum, levels : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, loc := #caller_location) { impl_TexStorage3D(cast(u32)target, levels, cast(u32)internalformat, width, height, depth); debug_helper(loc, nil, target, levels, internalformat, width, height, depth); };
	 DrawTransformFeedbackInstanced :: proc "c" (mode : GLenum, id : GLuint, instancecount : GLsizei, loc := #caller_location) { impl_DrawTransformFeedbackInstanced(cast(u32)mode, id, instancecount); debug_helper(loc, nil, mode, id, instancecount); };
	 DrawTransformFeedbackStreamInstanced :: proc "c" (mode : GLenum, id : GLuint, stream : GLuint, instancecount : GLsizei, loc := #caller_location) { impl_DrawTransformFeedbackStreamInstanced(cast(u32)mode, id, stream, instancecount); debug_helper(loc, nil, mode, id, stream, instancecount); };
// VERSION_4_3
	 ClearBufferData :: proc "c" (target : GLenum, internalformat : GLenum, format : GLenum, type : GLenum, data : rawptr, loc := #caller_location) { impl_ClearBufferData(cast(u32)target, cast(u32)internalformat, cast(u32)format, cast(u32)type, data); debug_helper(loc, nil, target, internalformat, format, type, data); };
	 ClearBufferSubData :: proc "c" (target : GLenum, internalformat : GLenum, offset : GLintptr, size : GLsizeiptr, format : GLenum, type : GLenum, data : rawptr, loc := #caller_location) { impl_ClearBufferSubData(cast(u32)target, cast(u32)internalformat, offset, size, cast(u32)format, cast(u32)type, data); debug_helper(loc, nil, target, internalformat, offset, size, format, type, data); };
	 DispatchCompute :: proc "c" (num_groups_x : GLuint, num_groups_y : GLuint, num_groups_z : GLuint, loc := #caller_location) { impl_DispatchCompute(num_groups_x, num_groups_y, num_groups_z); debug_helper(loc, nil, num_groups_x, num_groups_y, num_groups_z); };
	 DispatchComputeIndirect :: proc "c" (indirect : ^DispatchIndirectCommand, loc := #caller_location) { impl_DispatchComputeIndirect(indirect); debug_helper(loc, nil, indirect); };
	 CopyImageSubData :: proc "c" (srcName : GLuint, srcTarget : GLenum, srcLevel : GLint, srcX : GLint, srcY : GLint, srcZ : GLint, dstName : GLuint, dstTarget : GLenum, dstLevel : GLint, dstX : GLint, dstY : GLint, dstZ : GLint, srcWidth : GLsizei, srcHeight : GLsizei, srcDepth : GLsizei, loc := #caller_location) { impl_CopyImageSubData(srcName, cast(u32)srcTarget, srcLevel, srcX, srcY, srcZ, dstName, cast(u32)dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); debug_helper(loc, nil, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); };
	 FramebufferParameteri :: proc "c" (target : GLenum, pname : GLenum, param : GLint, loc := #caller_location) { impl_FramebufferParameteri(cast(u32)target, cast(u32)pname, param); debug_helper(loc, nil, target, pname, param); };
	 GetFramebufferParameteriv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetFramebufferParameteriv(cast(u32)target, cast(u32)pname, params); debug_helper(loc, nil, target, pname, params); };
	 GetInternalformati64v :: proc "c" (target : GLenum, internalformat : GLenum, pname : GLenum, bufSize : GLsizei, params : ^GLint64, loc := #caller_location) { impl_GetInternalformati64v(cast(u32)target, cast(u32)internalformat, cast(u32)pname, bufSize, params); debug_helper(loc, nil, target, internalformat, pname, bufSize, params); };
	 InvalidateTexSubImage :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, loc := #caller_location) { impl_InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth); debug_helper(loc, nil, texture, level, xoffset, yoffset, zoffset, width, height, depth); };
	 InvalidateTexImage :: proc "c" (texture : GLuint, level : GLint, loc := #caller_location) { impl_InvalidateTexImage(texture, level); debug_helper(loc, nil, texture, level); };
	 InvalidateBufferSubData :: proc "c" (buffer : GLuint, offset : GLintptr, length : GLsizeiptr, loc := #caller_location) { impl_InvalidateBufferSubData(buffer, offset, length); debug_helper(loc, nil, buffer, offset, length); };
	 InvalidateBufferData :: proc "c" (buffer : GLuint, loc := #caller_location) { impl_InvalidateBufferData(buffer); debug_helper(loc, nil, buffer); };
	 InvalidateFramebuffer :: proc "c" (target : GLenum, numAttachments : GLsizei, attachments : ^GLenum, loc := #caller_location) { impl_InvalidateFramebuffer(cast(u32)target, numAttachments, cast(^u32)attachments); debug_helper(loc, nil, target, numAttachments, attachments); };
	 InvalidateSubFramebuffer :: proc "c" (target : GLenum, numAttachments : GLsizei, attachments : ^GLenum, x : GLint, y : GLint, width : GLsizei, height : GLsizei, loc := #caller_location) { impl_InvalidateSubFramebuffer(cast(u32)target, numAttachments, cast(^u32)attachments, x, y, width, height); debug_helper(loc, nil, target, numAttachments, attachments, x, y, width, height); };
	 MultiDrawArraysIndirect :: proc "c" (mode : GLenum, indirect : ^DrawArraysIndirectCommand, drawcount : GLsizei, stride : GLsizei, loc := #caller_location) { impl_MultiDrawArraysIndirect(cast(u32)mode, indirect, drawcount, stride); debug_helper(loc, nil, mode, indirect, drawcount, stride); };
	 MultiDrawElementsIndirect :: proc "c" (mode : GLenum, type : GLenum, indirect : ^DrawElementsIndirectCommand, drawcount : GLsizei, stride : GLsizei, loc := #caller_location) { impl_MultiDrawElementsIndirect(cast(u32)mode, cast(u32)type, indirect, drawcount, stride); debug_helper(loc, nil, mode, type, indirect, drawcount, stride); };
	 GetProgramInterfaceiv :: proc "c" (program : GLuint, programInterface : GLenum, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetProgramInterfaceiv(program, cast(u32)programInterface, cast(u32)pname, params); debug_helper(loc, nil, program, programInterface, pname, params); };
	 GetProgramResourceName :: proc "c" (program : GLuint, programInterface : GLenum, index : GLuint, bufSize : GLsizei, length : ^GLsizei, name : GLstring, loc := #caller_location) { impl_GetProgramResourceName(program, cast(u32)programInterface, index, bufSize, length, name); debug_helper(loc, nil, program, programInterface, index, bufSize, length, name); };
	 GetProgramResourceiv :: proc "c" (program : GLuint, programInterface : GLenum, index : GLuint, propCount : GLsizei, props : ^GLenum, bufSize : GLsizei, length : ^GLsizei, params : ^GLint, loc := #caller_location) { impl_GetProgramResourceiv(program, cast(u32)programInterface, index, propCount, cast(^u32)props, bufSize, length, params); debug_helper(loc, nil, program, programInterface, index, propCount, props, bufSize, length, params); };
	 ShaderStorageBlockBinding :: proc "c" (program : GLuint, storageBlockIndex : GLuint, storageBlockBinding : GLuint, loc := #caller_location) { impl_ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding); debug_helper(loc, nil, program, storageBlockIndex, storageBlockBinding); };
	 TexBufferRange :: proc "c" (target : GLenum, internalformat : GLenum, buffer : GLuint, offset : GLintptr, size : GLsizeiptr, loc := #caller_location) { impl_TexBufferRange(cast(u32)target, cast(u32)internalformat, buffer, offset, size); debug_helper(loc, nil, target, internalformat, buffer, offset, size); };
	 TexStorage2DMultisample :: proc "c" (target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, fixedsamplelocations : GLboolean, loc := #caller_location) { impl_TexStorage2DMultisample(cast(u32)target, samples, cast(u32)internalformat, width, height, fixedsamplelocations); debug_helper(loc, nil, target, samples, internalformat, width, height, fixedsamplelocations); };
	 TexStorage3DMultisample :: proc "c" (target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, fixedsamplelocations : GLboolean, loc := #caller_location) { impl_TexStorage3DMultisample(cast(u32)target, samples, cast(u32)internalformat, width, height, depth, fixedsamplelocations); debug_helper(loc, nil, target, samples, internalformat, width, height, depth, fixedsamplelocations); };
	 TextureView :: proc "c" (texture : GLuint, target : GLenum, origtexture : GLuint, internalformat : GLenum, minlevel : GLuint, numlevels : GLuint, minlayer : GLuint, numlayers : GLuint, loc := #caller_location) { impl_TextureView(texture, cast(u32)target, origtexture, cast(u32)internalformat, minlevel, numlevels, minlayer, numlayers); debug_helper(loc, nil, texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); };
	 BindVertexBuffer :: proc "c" (bindingindex : GLuint, buffer : GLuint, offset : GLintptr, stride : GLsizei, loc := #caller_location) { impl_BindVertexBuffer(bindingindex, buffer, offset, stride); debug_helper(loc, nil, bindingindex, buffer, offset, stride); };
	 VertexAttribFormat :: proc "c" (attribindex : GLuint, size : GLint, type : GLenum, normalized : GLboolean, relativeoffset : GLuint, loc := #caller_location) { impl_VertexAttribFormat(attribindex, size, cast(u32)type, normalized, relativeoffset); debug_helper(loc, nil, attribindex, size, type, normalized, relativeoffset); };
	 VertexAttribIFormat :: proc "c" (attribindex : GLuint, size : GLint, type : GLenum, relativeoffset : GLuint, loc := #caller_location) { impl_VertexAttribIFormat(attribindex, size, cast(u32)type, relativeoffset); debug_helper(loc, nil, attribindex, size, type, relativeoffset); };
	 VertexAttribLFormat :: proc "c" (attribindex : GLuint, size : GLint, type : GLenum, relativeoffset : GLuint, loc := #caller_location) { impl_VertexAttribLFormat(attribindex, size, cast(u32)type, relativeoffset); debug_helper(loc, nil, attribindex, size, type, relativeoffset); };
	 VertexAttribBinding :: proc "c" (attribindex : GLuint, bindingindex : GLuint, loc := #caller_location) { impl_VertexAttribBinding(attribindex, bindingindex); debug_helper(loc, nil, attribindex, bindingindex); };
	 VertexBindingDivisor :: proc "c" (bindingindex : GLuint, divisor : GLuint, loc := #caller_location) { impl_VertexBindingDivisor(bindingindex, divisor); debug_helper(loc, nil, bindingindex, divisor); };
	 DebugMessageControl :: proc "c" (source : GLenum, type : GLenum, severity : GLenum, count : GLsizei, ids : ^GLuint, enabled : GLboolean, loc := #caller_location) { impl_DebugMessageControl(cast(u32)source, cast(u32)type, cast(u32)severity, count, ids, enabled); debug_helper(loc, nil, source, type, severity, count, ids, enabled); };
	 DebugMessageInsert :: proc "c" (source : GLenum, type : GLenum, id : GLuint, severity : GLenum, length : GLsizei, buf : GLstring, loc := #caller_location) { impl_DebugMessageInsert(cast(u32)source, cast(u32)type, id, cast(u32)severity, length, buf); debug_helper(loc, nil, source, type, id, severity, length, buf); };
	 DebugMessageCallback :: proc "c" (callback : GLdebugproc, userParam : rawptr, loc := #caller_location) { impl_DebugMessageCallback(callback, userParam); debug_helper(loc, nil, callback, userParam); };
	 PushDebugGroup :: proc "c" (source : GLenum, id : GLuint, length : GLsizei, message : GLstring, loc := #caller_location) { impl_PushDebugGroup(cast(u32)source, id, length, message); debug_helper(loc, nil, source, id, length, message); };
	 PopDebugGroup :: proc "c" (loc := #caller_location) { impl_PopDebugGroup(); debug_helper(loc, nil, ); };
	 ObjectLabel :: proc "c" (identifier : GLenum, name : GLuint, length : GLsizei, label : GLstring, loc := #caller_location) { impl_ObjectLabel(cast(u32)identifier, name, length, label); debug_helper(loc, nil, identifier, name, length, label); };
	 GetObjectLabel :: proc "c" (identifier : GLenum, name : GLuint, bufSize : GLsizei, length : ^GLsizei, label : GLoutstring, loc := #caller_location) { impl_GetObjectLabel(cast(u32)identifier, name, bufSize, length, label); debug_helper(loc, nil, identifier, name, bufSize, length, label); };
	 ObjectPtrLabel :: proc "c" (ptr : rawptr, length : GLsizei, label : GLstring, loc := #caller_location) { impl_ObjectPtrLabel(ptr, length, label); debug_helper(loc, nil, ptr, length, label); };
	 GetObjectPtrLabel :: proc "c" (ptr : rawptr, bufSize : GLsizei, length : ^GLsizei, label : GLoutstring, loc := #caller_location) { impl_GetObjectPtrLabel(ptr, bufSize, length, label); debug_helper(loc, nil, ptr, bufSize, length, label); };
// VERSION_4_4
	 BufferStorage :: proc "c" (target : GLenum, size : GLsizeiptr, data : rawptr, flags : GLbitfield, loc := #caller_location) { impl_BufferStorage(cast(u32)target, size, data, cast(u32)flags); debug_helper(loc, nil, target, size, data, flags); };
	 ClearTexImage :: proc "c" (texture : GLuint, level : GLint, format : GLenum, type : GLenum, data : rawptr, loc := #caller_location) { impl_ClearTexImage(texture, level, cast(u32)format, cast(u32)type, data); debug_helper(loc, nil, texture, level, format, type, data); };
	 ClearTexSubImage :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, type : GLenum, data : rawptr, loc := #caller_location) { impl_ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, cast(u32)format, cast(u32)type, data); debug_helper(loc, nil, texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); };
	 BindBuffersBase :: proc "c" (target : GLenum, first : GLuint, count : GLsizei, buffers : ^GLuint, loc := #caller_location) { impl_BindBuffersBase(cast(u32)target, first, count, buffers); debug_helper(loc, nil, target, first, count, buffers); };
	 BindBuffersRange :: proc "c" (target : GLenum, first : GLuint, count : GLsizei, buffers : ^GLuint, offsets : ^GLintptr, sizes : ^GLsizeiptr, loc := #caller_location) { impl_BindBuffersRange(cast(u32)target, first, count, buffers, offsets, sizes); debug_helper(loc, nil, target, first, count, buffers, offsets, sizes); };
	 BindTextures :: proc "c" (first : GLuint, count : GLsizei, textures : ^GLuint, loc := #caller_location) { impl_BindTextures(first, count, textures); debug_helper(loc, nil, first, count, textures); };
	 BindSamplers :: proc "c" (first : GLuint, count : GLsizei, samplers : ^GLuint, loc := #caller_location) { impl_BindSamplers(first, count, samplers); debug_helper(loc, nil, first, count, samplers); };
	 BindImageTextures :: proc "c" (first : GLuint, count : GLsizei, textures : ^GLuint, loc := #caller_location) { impl_BindImageTextures(first, count, textures); debug_helper(loc, nil, first, count, textures); };
	 BindVertexBuffers :: proc "c" (first : GLuint, count : GLsizei, buffers : ^GLuint, offsets : ^GLintptr, strides : ^GLsizei, loc := #caller_location) { impl_BindVertexBuffers(first, count, buffers, offsets, strides); debug_helper(loc, nil, first, count, buffers, offsets, strides); };
// VERSION_4_5
	 ClipControl :: proc "c" (origin : GLenum, depth : GLenum, loc := #caller_location) { impl_ClipControl(cast(u32)origin, cast(u32)depth); debug_helper(loc, nil, origin, depth); };
	 CreateTransformFeedbacks :: proc "c" (n : GLsizei, ids : ^GLuint, loc := #caller_location) { impl_CreateTransformFeedbacks(n, ids); debug_helper(loc, nil, n, ids); };
	 TransformFeedbackBufferBase :: proc "c" (xfb : GLuint, index : GLuint, buffer : GLuint, loc := #caller_location) { impl_TransformFeedbackBufferBase(xfb, index, buffer); debug_helper(loc, nil, xfb, index, buffer); };
	 TransformFeedbackBufferRange :: proc "c" (xfb : GLuint, index : GLuint, buffer : GLuint, offset : GLintptr, size : GLsizeiptr, loc := #caller_location) { impl_TransformFeedbackBufferRange(xfb, index, buffer, offset, size); debug_helper(loc, nil, xfb, index, buffer, offset, size); };
	 GetTransformFeedbackiv :: proc "c" (xfb : GLuint, pname : GLenum, param : ^GLint, loc := #caller_location) { impl_GetTransformFeedbackiv(xfb, cast(u32)pname, param); debug_helper(loc, nil, xfb, pname, param); };
	 GetTransformFeedbacki_v :: proc "c" (xfb : GLuint, pname : GLenum, index : GLuint, param : ^GLint, loc := #caller_location) { impl_GetTransformFeedbacki_v(xfb, cast(u32)pname, index, param); debug_helper(loc, nil, xfb, pname, index, param); };
	 GetTransformFeedbacki64_v :: proc "c" (xfb : GLuint, pname : GLenum, index : GLuint, param : ^GLint64, loc := #caller_location) { impl_GetTransformFeedbacki64_v(xfb, cast(u32)pname, index, param); debug_helper(loc, nil, xfb, pname, index, param); };
	 CreateBuffers :: proc "c" (n : GLsizei, buffers : ^GLuint, loc := #caller_location) { impl_CreateBuffers(n, buffers); debug_helper(loc, nil, n, buffers); };
	 NamedBufferStorage :: proc "c" (buffer : GLuint, size : GLsizeiptr, data : rawptr, flags : GLbitfield, loc := #caller_location) { impl_NamedBufferStorage(buffer, size, data, cast(u32)flags); debug_helper(loc, nil, buffer, size, data, flags); };
	 NamedBufferData :: proc "c" (buffer : GLuint, size : GLsizeiptr, data : rawptr, usage : GLenum, loc := #caller_location) { impl_NamedBufferData(buffer, size, data, cast(u32)usage); debug_helper(loc, nil, buffer, size, data, usage); };
	 NamedBufferSubData :: proc "c" (buffer : GLuint, offset : GLintptr, size : GLsizeiptr, data : rawptr, loc := #caller_location) { impl_NamedBufferSubData(buffer, offset, size, data); debug_helper(loc, nil, buffer, offset, size, data); };
	 CopyNamedBufferSubData :: proc "c" (readBuffer : GLuint, writeBuffer : GLuint, readOffset : GLintptr, writeOffset : GLintptr, size : GLsizeiptr, loc := #caller_location) { impl_CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size); debug_helper(loc, nil, readBuffer, writeBuffer, readOffset, writeOffset, size); };
	 ClearNamedBufferData :: proc "c" (buffer : GLuint, internalformat : GLenum, format : GLenum, type : GLenum, data : rawptr, loc := #caller_location) { impl_ClearNamedBufferData(buffer, cast(u32)internalformat, cast(u32)format, cast(u32)type, data); debug_helper(loc, nil, buffer, internalformat, format, type, data); };
	 ClearNamedBufferSubData :: proc "c" (buffer : GLuint, internalformat : GLenum, offset : GLintptr, size : GLsizeiptr, format : GLenum, type : GLenum, data : rawptr, loc := #caller_location) { impl_ClearNamedBufferSubData(buffer, cast(u32)internalformat, offset, size, cast(u32)format, cast(u32)type, data); debug_helper(loc, nil, buffer, internalformat, offset, size, format, type, data); };
	 FlushMappedNamedBufferRange :: proc "c" (buffer : GLuint, offset : GLintptr, length : GLsizeiptr, loc := #caller_location) { impl_FlushMappedNamedBufferRange(buffer, offset, length); debug_helper(loc, nil, buffer, offset, length); };
	 GetNamedBufferParameteriv :: proc "c" (buffer : GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetNamedBufferParameteriv(buffer, cast(u32)pname, params); debug_helper(loc, nil, buffer, pname, params); };
	 GetNamedBufferParameteri64v :: proc "c" (buffer : GLuint, pname : GLenum, params : ^GLint64, loc := #caller_location) { impl_GetNamedBufferParameteri64v(buffer, cast(u32)pname, params); debug_helper(loc, nil, buffer, pname, params); };
	 GetNamedBufferPointerv :: proc "c" (buffer : GLuint, pname : GLenum, params : ^rawptr, loc := #caller_location) { impl_GetNamedBufferPointerv(buffer, cast(u32)pname, params); debug_helper(loc, nil, buffer, pname, params); };
	 GetNamedBufferSubData :: proc "c" (buffer : GLuint, offset : GLintptr, size : GLsizeiptr, data : rawptr, loc := #caller_location) { impl_GetNamedBufferSubData(buffer, offset, size, data); debug_helper(loc, nil, buffer, offset, size, data); };
	 CreateFramebuffers :: proc "c" (n : GLsizei, framebuffers : ^GLuint, loc := #caller_location) { impl_CreateFramebuffers(n, framebuffers); debug_helper(loc, nil, n, framebuffers); };
	 NamedFramebufferRenderbuffer :: proc "c" (framebuffer : GLuint, attachment : GLenum, renderbuffertarget : GLenum, renderbuffer : GLuint, loc := #caller_location) { impl_NamedFramebufferRenderbuffer(framebuffer, cast(u32)attachment, cast(u32)renderbuffertarget, renderbuffer); debug_helper(loc, nil, framebuffer, attachment, renderbuffertarget, renderbuffer); };
	 NamedFramebufferParameteri :: proc "c" (framebuffer : GLuint, pname : GLenum, param : GLint, loc := #caller_location) { impl_NamedFramebufferParameteri(framebuffer, cast(u32)pname, param); debug_helper(loc, nil, framebuffer, pname, param); };
	 NamedFramebufferTexture :: proc "c" (framebuffer : GLuint, attachment : GLenum, texture : GLuint, level : GLint, loc := #caller_location) { impl_NamedFramebufferTexture(framebuffer, cast(u32)attachment, texture, level); debug_helper(loc, nil, framebuffer, attachment, texture, level); };
	 NamedFramebufferTextureLayer :: proc "c" (framebuffer : GLuint, attachment : GLenum, texture : GLuint, level : GLint, layer : GLint, loc := #caller_location) { impl_NamedFramebufferTextureLayer(framebuffer, cast(u32)attachment, texture, level, layer); debug_helper(loc, nil, framebuffer, attachment, texture, level, layer); };
	 NamedFramebufferDrawBuffer :: proc "c" (framebuffer : GLuint, buf : GLenum, loc := #caller_location) { impl_NamedFramebufferDrawBuffer(framebuffer, cast(u32)buf); debug_helper(loc, nil, framebuffer, buf); };
	 NamedFramebufferDrawBuffers :: proc "c" (framebuffer : GLuint, n : GLsizei, bufs : ^GLenum, loc := #caller_location) { impl_NamedFramebufferDrawBuffers(framebuffer, n, cast(^u32)bufs); debug_helper(loc, nil, framebuffer, n, bufs); };
	 NamedFramebufferReadBuffer :: proc "c" (framebuffer : GLuint, src : GLenum, loc := #caller_location) { impl_NamedFramebufferReadBuffer(framebuffer, cast(u32)src); debug_helper(loc, nil, framebuffer, src); };
	 InvalidateNamedFramebufferData :: proc "c" (framebuffer : GLuint, numAttachments : GLsizei, attachments : ^GLenum, loc := #caller_location) { impl_InvalidateNamedFramebufferData(framebuffer, numAttachments, cast(^u32)attachments); debug_helper(loc, nil, framebuffer, numAttachments, attachments); };
	 InvalidateNamedFramebufferSubData :: proc "c" (framebuffer : GLuint, numAttachments : GLsizei, attachments : ^GLenum, x : GLint, y : GLint, width : GLsizei, height : GLsizei, loc := #caller_location) { impl_InvalidateNamedFramebufferSubData(framebuffer, numAttachments, cast(^u32)attachments, x, y, width, height); debug_helper(loc, nil, framebuffer, numAttachments, attachments, x, y, width, height); };
	 ClearNamedFramebufferiv :: proc "c" (framebuffer : GLuint, buffer : GLenum, drawbuffer : GLint, value : ^GLint, loc := #caller_location) { impl_ClearNamedFramebufferiv(framebuffer, cast(u32)buffer, drawbuffer, value); debug_helper(loc, nil, framebuffer, buffer, drawbuffer, value); };
	 ClearNamedFramebufferuiv :: proc "c" (framebuffer : GLuint, buffer : GLenum, drawbuffer : GLint, value : ^GLuint, loc := #caller_location) { impl_ClearNamedFramebufferuiv(framebuffer, cast(u32)buffer, drawbuffer, value); debug_helper(loc, nil, framebuffer, buffer, drawbuffer, value); };
	 ClearNamedFramebufferfv :: proc "c" (framebuffer : GLuint, buffer : GLenum, drawbuffer : GLint, value : ^GLfloat, loc := #caller_location) { impl_ClearNamedFramebufferfv(framebuffer, cast(u32)buffer, drawbuffer, value); debug_helper(loc, nil, framebuffer, buffer, drawbuffer, value); };
	 ClearNamedFramebufferfi :: proc "c" (framebuffer : GLuint, buffer : GLenum, drawbuffer : GLint, depth : GLfloat, stencil : GLint, loc := #caller_location) { impl_ClearNamedFramebufferfi(framebuffer, cast(u32)buffer, drawbuffer, depth, stencil); debug_helper(loc, nil, framebuffer, buffer, drawbuffer, depth, stencil); };
	 BlitNamedFramebuffer :: proc "c" (srcFramebuffer : GLuint, dstFramebuffer : GLuint, srcX0 : GLint, srcY0 : GLint, srcX1 : GLint, srcY1 : GLint, dstX0 : GLint, dstY0 : GLint, dstX1 : GLint, dstY1 : GLint, mask : GLbitfield, filter : GLenum, loc := #caller_location) { impl_BlitNamedFramebuffer(srcFramebuffer, dstFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, cast(u32)mask, cast(u32)filter); debug_helper(loc, nil, srcFramebuffer, dstFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); };
	 GetNamedFramebufferParameteriv :: proc "c" (framebuffer : GLuint, pname : GLenum, param : ^GLint, loc := #caller_location) { impl_GetNamedFramebufferParameteriv(framebuffer, cast(u32)pname, param); debug_helper(loc, nil, framebuffer, pname, param); };
	 GetNamedFramebufferAttachmentParameteriv :: proc "c" (framebuffer : GLuint, attachment : GLenum, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetNamedFramebufferAttachmentParameteriv(framebuffer, cast(u32)attachment, cast(u32)pname, params); debug_helper(loc, nil, framebuffer, attachment, pname, params); };
	 CreateRenderbuffers :: proc "c" (n : GLsizei, renderbuffers : ^GLuint, loc := #caller_location) { impl_CreateRenderbuffers(n, renderbuffers); debug_helper(loc, nil, n, renderbuffers); };
	 NamedRenderbufferStorage :: proc "c" (renderbuffer : GLuint, internalformat : GLenum, width : GLsizei, height : GLsizei, loc := #caller_location) { impl_NamedRenderbufferStorage(renderbuffer, cast(u32)internalformat, width, height); debug_helper(loc, nil, renderbuffer, internalformat, width, height); };
	 NamedRenderbufferStorageMultisample :: proc "c" (renderbuffer : GLuint, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, loc := #caller_location) { impl_NamedRenderbufferStorageMultisample(renderbuffer, samples, cast(u32)internalformat, width, height); debug_helper(loc, nil, renderbuffer, samples, internalformat, width, height); };
	 GetNamedRenderbufferParameteriv :: proc "c" (renderbuffer : GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetNamedRenderbufferParameteriv(renderbuffer, cast(u32)pname, params); debug_helper(loc, nil, renderbuffer, pname, params); };
	 CreateTextures :: proc "c" (target : GLenum, n : GLsizei, textures : ^GLuint, loc := #caller_location) { impl_CreateTextures(cast(u32)target, n, textures); debug_helper(loc, nil, target, n, textures); };
	 TextureBuffer :: proc "c" (texture : GLuint, internalformat : GLenum, buffer : GLuint, loc := #caller_location) { impl_TextureBuffer(texture, cast(u32)internalformat, buffer); debug_helper(loc, nil, texture, internalformat, buffer); };
	 TextureBufferRange :: proc "c" (texture : GLuint, internalformat : GLenum, buffer : GLuint, offset : GLintptr, size : GLsizeiptr, loc := #caller_location) { impl_TextureBufferRange(texture, cast(u32)internalformat, buffer, offset, size); debug_helper(loc, nil, texture, internalformat, buffer, offset, size); };
	 TextureStorage1D :: proc "c" (texture : GLuint, levels : GLsizei, internalformat : GLenum, width : GLsizei, loc := #caller_location) { impl_TextureStorage1D(texture, levels, cast(u32)internalformat, width); debug_helper(loc, nil, texture, levels, internalformat, width); };
	 TextureStorage2D :: proc "c" (texture : GLuint, levels : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, loc := #caller_location) { impl_TextureStorage2D(texture, levels, cast(u32)internalformat, width, height); debug_helper(loc, nil, texture, levels, internalformat, width, height); };
	 TextureStorage3D :: proc "c" (texture : GLuint, levels : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, loc := #caller_location) { impl_TextureStorage3D(texture, levels, cast(u32)internalformat, width, height, depth); debug_helper(loc, nil, texture, levels, internalformat, width, height, depth); };
	 TextureStorage2DMultisample :: proc "c" (texture : GLuint, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, fixedsamplelocations : GLboolean, loc := #caller_location) { impl_TextureStorage2DMultisample(texture, samples, cast(u32)internalformat, width, height, fixedsamplelocations); debug_helper(loc, nil, texture, samples, internalformat, width, height, fixedsamplelocations); };
	 TextureStorage3DMultisample :: proc "c" (texture : GLuint, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, fixedsamplelocations : GLboolean, loc := #caller_location) { impl_TextureStorage3DMultisample(texture, samples, cast(u32)internalformat, width, height, depth, fixedsamplelocations); debug_helper(loc, nil, texture, samples, internalformat, width, height, depth, fixedsamplelocations); };
	 TextureSubImage1D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, type : GLenum, pixels : rawptr, loc := #caller_location) { impl_TextureSubImage1D(texture, level, xoffset, width, cast(u32)format, cast(u32)type, pixels); debug_helper(loc, nil, texture, level, xoffset, width, format, type, pixels); };
	 TextureSubImage2D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, pixels : rawptr, loc := #caller_location) { impl_TextureSubImage2D(texture, level, xoffset, yoffset, width, height, cast(u32)format, cast(u32)type, pixels); debug_helper(loc, nil, texture, level, xoffset, yoffset, width, height, format, type, pixels); };
	 TextureSubImage3D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, type : GLenum, pixels : rawptr, loc := #caller_location) { impl_TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, cast(u32)format, cast(u32)type, pixels); debug_helper(loc, nil, texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); };
	 CompressedTextureSubImage1D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, imageSize : GLsizei, data : rawptr, loc := #caller_location) { impl_CompressedTextureSubImage1D(texture, level, xoffset, width, cast(u32)format, imageSize, data); debug_helper(loc, nil, texture, level, xoffset, width, format, imageSize, data); };
	 CompressedTextureSubImage2D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, imageSize : GLsizei, data : rawptr, loc := #caller_location) { impl_CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, cast(u32)format, imageSize, data); debug_helper(loc, nil, texture, level, xoffset, yoffset, width, height, format, imageSize, data); };
	 CompressedTextureSubImage3D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, imageSize : GLsizei, data : rawptr, loc := #caller_location) { impl_CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, cast(u32)format, imageSize, data); debug_helper(loc, nil, texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); };
	 CopyTextureSubImage1D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, x : GLint, y : GLint, width : GLsizei, loc := #caller_location) { impl_CopyTextureSubImage1D(texture, level, xoffset, x, y, width); debug_helper(loc, nil, texture, level, xoffset, x, y, width); };
	 CopyTextureSubImage2D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei, loc := #caller_location) { impl_CopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height); debug_helper(loc, nil, texture, level, xoffset, yoffset, x, y, width, height); };
	 CopyTextureSubImage3D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei, loc := #caller_location) { impl_CopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height); debug_helper(loc, nil, texture, level, xoffset, yoffset, zoffset, x, y, width, height); };
	 TextureParameterf :: proc "c" (texture : GLuint, pname : GLenum, param : GLfloat, loc := #caller_location) { impl_TextureParameterf(texture, cast(u32)pname, param); debug_helper(loc, nil, texture, pname, param); };
	 TextureParameterfv :: proc "c" (texture : GLuint, pname : GLenum, param : ^GLfloat, loc := #caller_location) { impl_TextureParameterfv(texture, cast(u32)pname, param); debug_helper(loc, nil, texture, pname, param); };
	 TextureParameteri :: proc "c" (texture : GLuint, pname : GLenum, param : GLint, loc := #caller_location) { impl_TextureParameteri(texture, cast(u32)pname, param); debug_helper(loc, nil, texture, pname, param); };
	 TextureParameterIiv :: proc "c" (texture : GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_TextureParameterIiv(texture, cast(u32)pname, params); debug_helper(loc, nil, texture, pname, params); };
	 TextureParameterIuiv :: proc "c" (texture : GLuint, pname : GLenum, params : ^GLuint, loc := #caller_location) { impl_TextureParameterIuiv(texture, cast(u32)pname, params); debug_helper(loc, nil, texture, pname, params); };
	 TextureParameteriv :: proc "c" (texture : GLuint, pname : GLenum, param : ^GLint, loc := #caller_location) { impl_TextureParameteriv(texture, cast(u32)pname, param); debug_helper(loc, nil, texture, pname, param); };
	 GenerateTextureMipmap :: proc "c" (texture : GLuint, loc := #caller_location) { impl_GenerateTextureMipmap(texture); debug_helper(loc, nil, texture); };
	 BindTextureUnit :: proc "c" (unit : GLuint, texture : GLuint, loc := #caller_location) { impl_BindTextureUnit(unit, texture); debug_helper(loc, nil, unit, texture); };
	 GetTextureImage :: proc "c" (texture : GLuint, level : GLint, format : GLenum, type : GLenum, bufSize : GLsizei, pixels : rawptr, loc := #caller_location) { impl_GetTextureImage(texture, level, cast(u32)format, cast(u32)type, bufSize, pixels); debug_helper(loc, nil, texture, level, format, type, bufSize, pixels); };
	 GetCompressedTextureImage :: proc "c" (texture : GLuint, level : GLint, bufSize : GLsizei, pixels : rawptr, loc := #caller_location) { impl_GetCompressedTextureImage(texture, level, bufSize, pixels); debug_helper(loc, nil, texture, level, bufSize, pixels); };
	 GetTextureLevelParameterfv :: proc "c" (texture : GLuint, level : GLint, pname : GLenum, params : ^GLfloat, loc := #caller_location) { impl_GetTextureLevelParameterfv(texture, level, cast(u32)pname, params); debug_helper(loc, nil, texture, level, pname, params); };
	 GetTextureLevelParameteriv :: proc "c" (texture : GLuint, level : GLint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetTextureLevelParameteriv(texture, level, cast(u32)pname, params); debug_helper(loc, nil, texture, level, pname, params); };
	 GetTextureParameterfv :: proc "c" (texture : GLuint, pname : GLenum, params : ^GLfloat, loc := #caller_location) { impl_GetTextureParameterfv(texture, cast(u32)pname, params); debug_helper(loc, nil, texture, pname, params); };
	 GetTextureParameterIiv :: proc "c" (texture : GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetTextureParameterIiv(texture, cast(u32)pname, params); debug_helper(loc, nil, texture, pname, params); };
	 GetTextureParameterIuiv :: proc "c" (texture : GLuint, pname : GLenum, params : ^GLuint, loc := #caller_location) { impl_GetTextureParameterIuiv(texture, cast(u32)pname, params); debug_helper(loc, nil, texture, pname, params); };
	 GetTextureParameteriv :: proc "c" (texture : GLuint, pname : GLenum, params : ^GLint, loc := #caller_location) { impl_GetTextureParameteriv(texture, cast(u32)pname, params); debug_helper(loc, nil, texture, pname, params); };
	 CreateVertexArrays :: proc "c" (n : GLsizei, arrays : ^GLuint, loc := #caller_location) { impl_CreateVertexArrays(n, arrays); debug_helper(loc, nil, n, arrays); };
	 DisableVertexArrayAttrib :: proc "c" (vaobj : GLuint, index : GLuint, loc := #caller_location) { impl_DisableVertexArrayAttrib(vaobj, index); debug_helper(loc, nil, vaobj, index); };
	 EnableVertexArrayAttrib :: proc "c" (vaobj : GLuint, index : GLuint, loc := #caller_location) { impl_EnableVertexArrayAttrib(vaobj, index); debug_helper(loc, nil, vaobj, index); };
	 VertexArrayElementBuffer :: proc "c" (vaobj : GLuint, buffer : GLuint, loc := #caller_location) { impl_VertexArrayElementBuffer(vaobj, buffer); debug_helper(loc, nil, vaobj, buffer); };
	 VertexArrayVertexBuffer :: proc "c" (vaobj : GLuint, bindingindex : GLuint, buffer : GLuint, offset : GLintptr, stride : GLsizei, loc := #caller_location) { impl_VertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride); debug_helper(loc, nil, vaobj, bindingindex, buffer, offset, stride); };
	 VertexArrayVertexBuffers :: proc "c" (vaobj : GLuint, first : GLuint, count : GLsizei, buffers : ^GLuint, offsets : ^GLintptr, strides : ^GLsizei, loc := #caller_location) { impl_VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides); debug_helper(loc, nil, vaobj, first, count, buffers, offsets, strides); };
	 VertexArrayAttribBinding :: proc "c" (vaobj : GLuint, attribindex : GLuint, bindingindex : GLuint, loc := #caller_location) { impl_VertexArrayAttribBinding(vaobj, attribindex, bindingindex); debug_helper(loc, nil, vaobj, attribindex, bindingindex); };
	 VertexArrayAttribFormat :: proc "c" (vaobj : GLuint, attribindex : GLuint, size : GLint, type : GLenum, normalized : GLboolean, relativeoffset : GLuint, loc := #caller_location) { impl_VertexArrayAttribFormat(vaobj, attribindex, size, cast(u32)type, normalized, relativeoffset); debug_helper(loc, nil, vaobj, attribindex, size, type, normalized, relativeoffset); };
	 VertexArrayAttribIFormat :: proc "c" (vaobj : GLuint, attribindex : GLuint, size : GLint, type : GLenum, relativeoffset : GLuint, loc := #caller_location) { impl_VertexArrayAttribIFormat(vaobj, attribindex, size, cast(u32)type, relativeoffset); debug_helper(loc, nil, vaobj, attribindex, size, type, relativeoffset); };
	 VertexArrayAttribLFormat :: proc "c" (vaobj : GLuint, attribindex : GLuint, size : GLint, type : GLenum, relativeoffset : GLuint, loc := #caller_location) { impl_VertexArrayAttribLFormat(vaobj, attribindex, size, cast(u32)type, relativeoffset); debug_helper(loc, nil, vaobj, attribindex, size, type, relativeoffset); };
	 VertexArrayBindingDivisor :: proc "c" (vaobj : GLuint, bindingindex : GLuint, divisor : GLuint, loc := #caller_location) { impl_VertexArrayBindingDivisor(vaobj, bindingindex, divisor); debug_helper(loc, nil, vaobj, bindingindex, divisor); };
	 GetVertexArrayiv :: proc "c" (vaobj : GLuint, pname : GLenum, param : ^GLint, loc := #caller_location) { impl_GetVertexArrayiv(vaobj, cast(u32)pname, param); debug_helper(loc, nil, vaobj, pname, param); };
	 GetVertexArrayIndexediv :: proc "c" (vaobj : GLuint, index : GLuint, pname : GLenum, param : ^GLint, loc := #caller_location) { impl_GetVertexArrayIndexediv(vaobj, index, cast(u32)pname, param); debug_helper(loc, nil, vaobj, index, pname, param); };
	 GetVertexArrayIndexed64iv :: proc "c" (vaobj : GLuint, index : GLuint, pname : GLenum, param : ^GLint64, loc := #caller_location) { impl_GetVertexArrayIndexed64iv(vaobj, index, cast(u32)pname, param); debug_helper(loc, nil, vaobj, index, pname, param); };
	 CreateSamplers :: proc "c" (n : GLsizei, samplers : ^GLuint, loc := #caller_location) { impl_CreateSamplers(n, samplers); debug_helper(loc, nil, n, samplers); };
	 CreateProgramPipelines :: proc "c" (n : GLsizei, pipelines : ^GLuint, loc := #caller_location) { impl_CreateProgramPipelines(n, pipelines); debug_helper(loc, nil, n, pipelines); };
	 CreateQueries :: proc "c" (target : GLenum, n : GLsizei, ids : ^GLuint, loc := #caller_location) { impl_CreateQueries(cast(u32)target, n, ids); debug_helper(loc, nil, target, n, ids); };
	 GetQueryBufferObjecti64v :: proc "c" (id : GLuint, buffer : GLuint, pname : GLenum, offset : GLintptr, loc := #caller_location) { impl_GetQueryBufferObjecti64v(id, buffer, cast(u32)pname, offset); debug_helper(loc, nil, id, buffer, pname, offset); };
	 GetQueryBufferObjectiv :: proc "c" (id : GLuint, buffer : GLuint, pname : GLenum, offset : GLintptr, loc := #caller_location) { impl_GetQueryBufferObjectiv(id, buffer, cast(u32)pname, offset); debug_helper(loc, nil, id, buffer, pname, offset); };
	 GetQueryBufferObjectui64v :: proc "c" (id : GLuint, buffer : GLuint, pname : GLenum, offset : GLintptr, loc := #caller_location) { impl_GetQueryBufferObjectui64v(id, buffer, cast(u32)pname, offset); debug_helper(loc, nil, id, buffer, pname, offset); };
	 GetQueryBufferObjectuiv :: proc "c" (id : GLuint, buffer : GLuint, pname : GLenum, offset : GLintptr, loc := #caller_location) { impl_GetQueryBufferObjectuiv(id, buffer, cast(u32)pname, offset); debug_helper(loc, nil, id, buffer, pname, offset); };
	 MemoryBarrierByRegion :: proc "c" (barriers : GLbitfield, loc := #caller_location) { impl_MemoryBarrierByRegion(cast(u32)barriers); debug_helper(loc, nil, barriers); };
	 GetTextureSubImage :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, type : GLenum, bufSize : GLsizei, pixels : rawptr, loc := #caller_location) { impl_GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, cast(u32)format, cast(u32)type, bufSize, pixels); debug_helper(loc, nil, texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels); };
	 GetCompressedTextureSubImage :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, bufSize : GLsizei, pixels : rawptr, loc := #caller_location) { impl_GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels); debug_helper(loc, nil, texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels); };
	 GetnCompressedTexImage :: proc "c" (target : GLenum, lod : GLint, bufSize : GLsizei, pixels : rawptr, loc := #caller_location) { impl_GetnCompressedTexImage(cast(u32)target, lod, bufSize, pixels); debug_helper(loc, nil, target, lod, bufSize, pixels); };
	 GetnTexImage :: proc "c" (target : GLenum, level : GLint, format : GLenum, type : GLenum, bufSize : GLsizei, pixels : rawptr, loc := #caller_location) { impl_GetnTexImage(cast(u32)target, level, cast(u32)format, cast(u32)type, bufSize, pixels); debug_helper(loc, nil, target, level, format, type, bufSize, pixels); };
	 GetnUniformdv :: proc "c" (program : GLuint, location : GLint, bufSize : GLsizei, params : ^GLdouble, loc := #caller_location) { impl_GetnUniformdv(program, location, bufSize, params); debug_helper(loc, nil, program, location, bufSize, params); };
	 GetnUniformfv :: proc "c" (program : GLuint, location : GLint, bufSize : GLsizei, params : ^GLfloat, loc := #caller_location) { impl_GetnUniformfv(program, location, bufSize, params); debug_helper(loc, nil, program, location, bufSize, params); };
	 GetnUniformiv :: proc "c" (program : GLuint, location : GLint, bufSize : GLsizei, params : ^GLint, loc := #caller_location) { impl_GetnUniformiv(program, location, bufSize, params); debug_helper(loc, nil, program, location, bufSize, params); };
	 GetnUniformuiv :: proc "c" (program : GLuint, location : GLint, bufSize : GLsizei, params : ^GLuint, loc := #caller_location) { impl_GetnUniformuiv(program, location, bufSize, params); debug_helper(loc, nil, program, location, bufSize, params); };
	 ReadnPixels :: proc "c" (x : GLint, y : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, bufSize : GLsizei, data : rawptr, loc := #caller_location) { impl_ReadnPixels(x, y, width, height, cast(u32)format, cast(u32)type, bufSize, data); debug_helper(loc, nil, x, y, width, height, format, type, bufSize, data); };
	 GetnMapdv :: proc "c" (target : GLenum, query : GLenum, bufSize : GLsizei, v : ^GLdouble, loc := #caller_location) { impl_GetnMapdv(cast(u32)target, cast(u32)query, bufSize, v); debug_helper(loc, nil, target, query, bufSize, v); };
	 GetnMapfv :: proc "c" (target : GLenum, query : GLenum, bufSize : GLsizei, v : ^GLfloat, loc := #caller_location) { impl_GetnMapfv(cast(u32)target, cast(u32)query, bufSize, v); debug_helper(loc, nil, target, query, bufSize, v); };
	 GetnMapiv :: proc "c" (target : GLenum, query : GLenum, bufSize : GLsizei, v : ^GLint, loc := #caller_location) { impl_GetnMapiv(cast(u32)target, cast(u32)query, bufSize, v); debug_helper(loc, nil, target, query, bufSize, v); };
	 GetnPixelMapusv :: proc "c" (_map : GLenum, bufSize : GLsizei, values : ^GLushort, loc := #caller_location) { impl_GetnPixelMapusv(cast(u32)_map, bufSize, values); debug_helper(loc, nil, _map, bufSize, values); };
	 GetnPixelMapfv :: proc "c" (_map : GLenum, bufSize : GLsizei, values : ^GLfloat, loc := #caller_location) { impl_GetnPixelMapfv(cast(u32)_map, bufSize, values); debug_helper(loc, nil, _map, bufSize, values); };
	 GetnPixelMapuiv :: proc "c" (_map : GLenum, bufSize : GLsizei, values : ^GLuint, loc := #caller_location) { impl_GetnPixelMapuiv(cast(u32)_map, bufSize, values); debug_helper(loc, nil, _map, bufSize, values); };
	 GetnPolygonStipple :: proc "c" (bufSize : GLsizei, pattern : ^GLubyte, loc := #caller_location) { impl_GetnPolygonStipple(bufSize, pattern); debug_helper(loc, nil, bufSize, pattern); };
	 GetnColorTable :: proc "c" (target : GLenum, format : GLenum, type : GLenum, bufSize : GLsizei, table : rawptr, loc := #caller_location) { impl_GetnColorTable(cast(u32)target, cast(u32)format, cast(u32)type, bufSize, table); debug_helper(loc, nil, target, format, type, bufSize, table); };
	 GetnConvolutionFilter :: proc "c" (target : GLenum, format : GLenum, type : GLenum, bufSize : GLsizei, image : rawptr, loc := #caller_location) { impl_GetnConvolutionFilter(cast(u32)target, cast(u32)format, cast(u32)type, bufSize, image); debug_helper(loc, nil, target, format, type, bufSize, image); };
	 GetnSeparableFilter :: proc "c" (target : GLenum, format : GLenum, type : GLenum, rowBufSize : GLsizei, row : rawptr, columnBufSize : GLsizei, column : rawptr, span : rawptr, loc := #caller_location) { impl_GetnSeparableFilter(cast(u32)target, cast(u32)format, cast(u32)type, rowBufSize, row, columnBufSize, column, span); debug_helper(loc, nil, target, format, type, rowBufSize, row, columnBufSize, column, span); };
	 GetnHistogram :: proc "c" (target : GLenum, reset : GLboolean, format : GLenum, type : GLenum, bufSize : GLsizei, values : rawptr, loc := #caller_location) { impl_GetnHistogram(cast(u32)target, reset, cast(u32)format, cast(u32)type, bufSize, values); debug_helper(loc, nil, target, reset, format, type, bufSize, values); };
	 GetnMinmax :: proc "c" (target : GLenum, reset : GLboolean, format : GLenum, type : GLenum, bufSize : GLsizei, values : rawptr, loc := #caller_location) { impl_GetnMinmax(cast(u32)target, reset, cast(u32)format, cast(u32)type, bufSize, values); debug_helper(loc, nil, target, reset, format, type, bufSize, values); };
	 TextureBarrier :: proc "c" (loc := #caller_location) { impl_TextureBarrier(); debug_helper(loc, nil, ); };
	 GetUnsignedBytevEXT :: proc "c" (pname : GLenum, data : ^GLubyte, loc := #caller_location) { impl_GetUnsignedBytevEXT(cast(u32)pname, data); debug_helper(loc, nil, pname, data); };
// VERSION_4_6
	 TexPageCommitmentARB :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, commit : GLboolean, loc := #caller_location) { impl_TexPageCommitmentARB(cast(u32)target, level, xoffset, yoffset, zoffset, width, height, depth, commit); debug_helper(loc, nil, target, level, xoffset, yoffset, zoffset, width, height, depth, commit); };
	 SpecializeShader :: proc "c" (shader : GLuint, pEntryPoint : GLstring, numSpecializationConstants : GLuint, pConstantIndex : ^GLuint, pConstantValue : ^GLuint, loc := #caller_location) { impl_SpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); debug_helper(loc, nil, shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); };
	 MultiDrawArraysIndirectCount :: proc "c" (mode : GLenum, indirect : ^DrawArraysIndirectCommand, drawcount : GLsizei, maxdrawcount : GLsizei, stride : GLsizei, loc := #caller_location) { impl_MultiDrawArraysIndirectCount(cast(u32)mode, indirect, drawcount, maxdrawcount, stride); debug_helper(loc, nil, mode, indirect, drawcount, maxdrawcount, stride); };
	 MultiDrawElementsIndirectCount :: proc "c" (mode : GLenum, type : GLenum, indirect : ^DrawElementsIndirectCommand, drawcount : GLsizei, maxdrawcount : GLsizei, stride : GLsizei, loc := #caller_location) { impl_MultiDrawElementsIndirectCount(cast(u32)mode, cast(u32)type, indirect, drawcount, maxdrawcount, stride); debug_helper(loc, nil, mode, type, indirect, drawcount, maxdrawcount, stride); };
	 PolygonOffsetClamp :: proc "c" (factor : GLfloat, units : GLfloat, clamp : GLfloat, loc := #caller_location) { impl_PolygonOffsetClamp(factor, units, clamp); debug_helper(loc, nil, factor, units, clamp); };


////////functions with return values////////
// VERSION_1_0
	 GetError :: proc "c" (loc := #caller_location) -> GLenum {  ret : GLenum = auto_cast impl_GetError(); debug_helper(loc, ret, ); return ret; };
	 GetString :: proc "c" (name : GLenum, loc := #caller_location) -> GLstring {  ret : GLstring = auto_cast impl_GetString(cast(u32)name); debug_helper(loc, ret, name); return ret; };
	 IsEnabled :: proc "c" (cap : GLenum, loc := #caller_location) -> GLboolean {  ret : GLboolean = auto_cast impl_IsEnabled(cast(u32)cap); debug_helper(loc, ret, cap); return ret; };
// VERSION_1_1
	 IsTexture :: proc "c" (texture : GLuint, loc := #caller_location) -> GLboolean {  ret : GLboolean = auto_cast impl_IsTexture(texture); debug_helper(loc, ret, texture); return ret; };
// VERSION_1_2
// VERSION_1_3
// VERSION_1_4
// VERSION_1_5
	 IsQuery :: proc "c" (id : GLuint, loc := #caller_location) -> GLboolean {  ret : GLboolean = auto_cast impl_IsQuery(id); debug_helper(loc, ret, id); return ret; };
	 IsBuffer :: proc "c" (buffer : GLuint, loc := #caller_location) -> GLboolean {  ret : GLboolean = auto_cast impl_IsBuffer(buffer); debug_helper(loc, ret, buffer); return ret; };
	 MapBuffer :: proc "c" (target : GLenum, access : GLenum, loc := #caller_location) -> rawptr {  ret : rawptr = auto_cast impl_MapBuffer(cast(u32)target, cast(u32)access); debug_helper(loc, ret, target, access); return ret; };
	 UnmapBuffer :: proc "c" (target : GLenum, loc := #caller_location) -> GLboolean {  ret : GLboolean = auto_cast impl_UnmapBuffer(cast(u32)target); debug_helper(loc, ret, target); return ret; };
// VERSION_2_0
	 CreateProgram :: proc "c" (loc := #caller_location) -> GLuint {  ret : GLuint = auto_cast impl_CreateProgram(); debug_helper(loc, ret, ); return ret; };
	 CreateShader :: proc "c" (type : GLenum, loc := #caller_location) -> GLuint {  ret : GLuint = auto_cast impl_CreateShader(cast(u32)type); debug_helper(loc, ret, type); return ret; };
	 GetAttribLocation :: proc "c" (program : GLuint, name : GLstring, loc := #caller_location) -> GLint {  ret : GLint = auto_cast impl_GetAttribLocation(program, name); debug_helper(loc, ret, program, name); return ret; };
	 GetUniformLocation :: proc "c" (program : GLuint, name : GLstring, loc := #caller_location) -> GLint {  ret : GLint = auto_cast impl_GetUniformLocation(program, name); debug_helper(loc, ret, program, name); return ret; };
	 IsProgram :: proc "c" (program : GLuint, loc := #caller_location) -> GLboolean {  ret : GLboolean = auto_cast impl_IsProgram(program); debug_helper(loc, ret, program); return ret; };
	 IsShader :: proc "c" (shader : GLuint, loc := #caller_location) -> GLboolean {  ret : GLboolean = auto_cast impl_IsShader(shader); debug_helper(loc, ret, shader); return ret; };
// VERSION_2_1
//VERSION_3_0
	 IsEnabledi :: proc "c" (target : GLenum, index : GLuint, loc := #caller_location) -> GLboolean {  ret : GLboolean = auto_cast impl_IsEnabledi(cast(u32)target, index); debug_helper(loc, ret, target, index); return ret; };
	 GetFragDataLocation :: proc "c" (program : GLuint, name : GLstring, loc := #caller_location) -> GLint {  ret : GLint = auto_cast impl_GetFragDataLocation(program, name); debug_helper(loc, ret, program, name); return ret; };
	 GetStringi :: proc "c" (name : GLenum, index : GLuint, loc := #caller_location) -> GLstring {  ret : GLstring = auto_cast impl_GetStringi(cast(u32)name, index); debug_helper(loc, ret, name, index); return ret; };
	 IsRenderbuffer :: proc "c" (renderbuffer : GLuint, loc := #caller_location) -> GLboolean {  ret : GLboolean = auto_cast impl_IsRenderbuffer(renderbuffer); debug_helper(loc, ret, renderbuffer); return ret; };
	 IsFramebuffer :: proc "c" (framebuffer : GLuint, loc := #caller_location) -> GLboolean {  ret : GLboolean = auto_cast impl_IsFramebuffer(framebuffer); debug_helper(loc, ret, framebuffer); return ret; };
	 CheckFramebufferStatus :: proc "c" (target : GLenum, loc := #caller_location) -> GLenum {  ret : GLenum = auto_cast impl_CheckFramebufferStatus(cast(u32)target); debug_helper(loc, ret, target); return ret; };
	 MapBufferRange :: proc "c" (target : GLenum, offset : GLintptr, length : GLsizeiptr, access : GLbitfield, loc := #caller_location) -> rawptr {  ret : rawptr = auto_cast impl_MapBufferRange(cast(u32)target, offset, length, cast(u32)access); debug_helper(loc, ret, target, offset, length, access); return ret; };
	 IsVertexArray :: proc "c" (array : GLuint, loc := #caller_location) -> GLboolean {  ret : GLboolean = auto_cast impl_IsVertexArray(array); debug_helper(loc, ret, array); return ret; };
// VERSION_3_1
	 GetUniformBlockIndex :: proc "c" (program : GLuint, uniformBlockName : GLstring, loc := #caller_location) -> GLuint {  ret : GLuint = auto_cast impl_GetUniformBlockIndex(program, uniformBlockName); debug_helper(loc, ret, program, uniformBlockName); return ret; };
// VERSION_3_2
	 FenceSync :: proc "c" (condition : GLenum, flags : GLbitfield, loc := #caller_location) -> GLsync {  ret : GLsync = auto_cast impl_FenceSync(cast(u32)condition, cast(u32)flags); debug_helper(loc, ret, condition, flags); return ret; };
	 IsSync :: proc "c" (sync : GLsync, loc := #caller_location) -> GLboolean {  ret : GLboolean = auto_cast impl_IsSync(sync); debug_helper(loc, ret, sync); return ret; };
	 ClientWaitSync :: proc "c" (sync : GLsync, flags : GLbitfield, timeout : GLuint64, loc := #caller_location) -> GLenum {  ret : GLenum = auto_cast impl_ClientWaitSync(sync, cast(u32)flags, timeout); debug_helper(loc, ret, sync, flags, timeout); return ret; };
// VERSION_3_3
	 GetFragDataIndex :: proc "c" (program : GLuint, name : GLstring, loc := #caller_location) -> GLint {  ret : GLint = auto_cast impl_GetFragDataIndex(program, name); debug_helper(loc, ret, program, name); return ret; };
	 IsSampler :: proc "c" (sampler : GLuint, loc := #caller_location) -> GLboolean {  ret : GLboolean = auto_cast impl_IsSampler(sampler); debug_helper(loc, ret, sampler); return ret; };
// VERSION_4_0
	 GetSubroutineUniformLocation :: proc "c" (program : GLuint, shadertype : GLenum, name : GLstring, loc := #caller_location) -> GLint {  ret : GLint = auto_cast impl_GetSubroutineUniformLocation(program, cast(u32)shadertype, name); debug_helper(loc, ret, program, shadertype, name); return ret; };
	 GetSubroutineIndex :: proc "c" (program : GLuint, shadertype : GLenum, name : GLstring, loc := #caller_location) -> GLuint {  ret : GLuint = auto_cast impl_GetSubroutineIndex(program, cast(u32)shadertype, name); debug_helper(loc, ret, program, shadertype, name); return ret; };
	 IsTransformFeedback :: proc "c" (id : GLuint, loc := #caller_location) -> GLboolean {  ret : GLboolean = auto_cast impl_IsTransformFeedback(id); debug_helper(loc, ret, id); return ret; };
	 GetTextureHandleARB :: proc "c" (target : GLenum, loc := #caller_location) -> GLuint64 {  ret : GLuint64 = auto_cast impl_GetTextureHandleARB(cast(u32)target); debug_helper(loc, ret, target); return ret; };
	 GetTextureSamplerHandleARB :: proc "c" (target : GLenum, sampler : GLuint, loc := #caller_location) -> GLuint64 {  ret : GLuint64 = auto_cast impl_GetTextureSamplerHandleARB(cast(u32)target, sampler); debug_helper(loc, ret, target, sampler); return ret; };
	 GetImageHandleARB :: proc "c" (texture : GLuint, level : GLint, layered : GLboolean, layer : GLint, format : GLenum, loc := #caller_location) -> GLuint64 {  ret : GLuint64 = auto_cast impl_GetImageHandleARB(texture, level, layered, layer, cast(u32)format); debug_helper(loc, ret, texture, level, layered, layer, format); return ret; };
// VERSION_4_1
	 CreateShaderProgramv :: proc "c" (type : GLenum, count : GLsizei, conststrings : ^GLstring, loc := #caller_location) -> GLuint {  ret : GLuint = auto_cast impl_CreateShaderProgramv(cast(u32)type, count, conststrings); debug_helper(loc, ret, type, count, conststrings); return ret; };
	 IsProgramPipeline :: proc "c" (pipeline : GLuint, loc := #caller_location) -> GLboolean {  ret : GLboolean = auto_cast impl_IsProgramPipeline(pipeline); debug_helper(loc, ret, pipeline); return ret; };
// VERSION_4_2
// VERSION_4_3
	 GetProgramResourceIndex :: proc "c" (program : GLuint, programInterface : GLenum, name : GLstring, loc := #caller_location) -> GLuint {  ret : GLuint = auto_cast impl_GetProgramResourceIndex(program, cast(u32)programInterface, name); debug_helper(loc, ret, program, programInterface, name); return ret; };
	 GetProgramResourceLocation :: proc "c" (program : GLuint, programInterface : GLenum, name : GLstring, loc := #caller_location) -> GLint {  ret : GLint = auto_cast impl_GetProgramResourceLocation(program, cast(u32)programInterface, name); debug_helper(loc, ret, program, programInterface, name); return ret; };
	 GetProgramResourceLocationIndex :: proc "c" (program : GLuint, programInterface : GLenum, name : GLstring, loc := #caller_location) -> GLint {  ret : GLint = auto_cast impl_GetProgramResourceLocationIndex(program, cast(u32)programInterface, name); debug_helper(loc, ret, program, programInterface, name); return ret; };
	 GetDebugMessageLog :: proc "c" (count : GLuint, bufSize : GLsizei, sources : ^GLenum, types : ^GLenum, ids : ^GLuint, severities : ^GLenum, lengths : ^GLsizei, messageLog : GLoutstring, loc := #caller_location) -> GLuint {  ret : GLuint = auto_cast impl_GetDebugMessageLog(count, bufSize, cast(^u32)sources, cast(^u32)types, ids, cast(^u32)severities, lengths, messageLog); debug_helper(loc, ret, count, bufSize, sources, types, ids, severities, lengths, messageLog); return ret; };
// VERSION_4_4
// VERSION_4_5
	 MapNamedBuffer :: proc "c" (buffer : GLuint, access : GLenum, loc := #caller_location) -> rawptr {  ret : rawptr = auto_cast impl_MapNamedBuffer(buffer, cast(u32)access); debug_helper(loc, ret, buffer, access); return ret; };
	 MapNamedBufferRange :: proc "c" (buffer : GLuint, offset : GLintptr, length : GLsizeiptr, access : GLbitfield, loc := #caller_location) -> rawptr {  ret : rawptr = auto_cast impl_MapNamedBufferRange(buffer, offset, length, cast(u32)access); debug_helper(loc, ret, buffer, offset, length, access); return ret; };
	 UnmapNamedBuffer :: proc "c" (buffer : GLuint, loc := #caller_location) -> GLboolean {  ret : GLboolean = auto_cast impl_UnmapNamedBuffer(buffer); debug_helper(loc, ret, buffer); return ret; };
	 CheckNamedFramebufferStatus :: proc "c" (framebuffer : GLuint, target : GLenum, loc := #caller_location) -> GLenum {  ret : GLenum = auto_cast impl_CheckNamedFramebufferStatus(framebuffer, cast(u32)target); debug_helper(loc, ret, framebuffer, target); return ret; };
	 GetGraphicsResetStatus :: proc "c" (loc := #caller_location) -> GLenum {  ret : GLenum = auto_cast impl_GetGraphicsResetStatus(); debug_helper(loc, ret, ); return ret; };
// VERSION_4_6
}
else {
	//functions without return values
// VERSION_1_0
	 CullFace :: proc "c" (mode : GLenum) { impl_CullFace(cast(u32)mode); };
	 FrontFace :: proc "c" (mode : GLenum) { impl_FrontFace(cast(u32)mode); };
	 Hint :: proc "c" (target : GLenum, mode : GLenum) { impl_Hint(cast(u32)target, cast(u32)mode); };
	 LineWidth :: proc "c" (width : GLfloat) { impl_LineWidth(width); };
	 PointSize :: proc "c" (size : GLfloat) { impl_PointSize(size); };
	 PolygonMode :: proc "c" (face : GLenum, mode : GLenum) { impl_PolygonMode(cast(u32)face, cast(u32)mode); };
	 Scissor :: proc "c" (x : GLint, y : GLint, width : GLsizei, height : GLsizei) { impl_Scissor(x, y, width, height); };
	 TexParameterf :: proc "c" (target : GLenum, pname : GLenum, param : GLfloat) { impl_TexParameterf(cast(u32)target, cast(u32)pname, param); };
	 TexParameterfv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLfloat) { impl_TexParameterfv(cast(u32)target, cast(u32)pname, params); };
	 TexParameteri :: proc "c" (target : GLenum, pname : GLenum, param : GLint) { impl_TexParameteri(cast(u32)target, cast(u32)pname, param); };
	 TexParameteriv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint) { impl_TexParameteriv(cast(u32)target, cast(u32)pname, params); };
	 TexImage1D :: proc "c" (target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : rawptr) { impl_TexImage1D(cast(u32)target, level, cast(i32)internalformat, width, border, cast(u32)format, cast(u32)type, pixels); };
	 TexImage2D :: proc "c" (target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : rawptr) { impl_TexImage2D(cast(u32)target, level, cast(i32)internalformat, width, height, border, cast(u32)format, cast(u32)type, pixels); };
	 DrawBuffer :: proc "c" (mode : GLenum) { impl_DrawBuffer(cast(u32)mode); };
	 Clear :: proc "c" (mask : GLbitfield) { impl_Clear(cast(u32)mask); };
	 ClearColor :: proc "c" (red : GLfloat, green : GLfloat, blue : GLfloat, alpha : GLfloat) { impl_ClearColor(red, green, blue, alpha); };
	 ClearStencil :: proc "c" (s : GLint) { impl_ClearStencil(s); };
	 ClearDepth :: proc "c" (depth : GLdouble) { impl_ClearDepth(depth); };
	 StencilMask :: proc "c" (mask : GLuint) { impl_StencilMask(mask); };
	 ColorMask :: proc "c" (red : GLboolean, green : GLboolean, blue : GLboolean, alpha : GLboolean) { impl_ColorMask(red, green, blue, alpha); };
	 DepthMask :: proc "c" (flag : GLboolean) { impl_DepthMask(flag); };
	 Disable :: proc "c" (cap : GLenum) { impl_Disable(cast(u32)cap); };
	 Enable :: proc "c" (cap : GLenum) { impl_Enable(cast(u32)cap); };
	 Finish :: proc "c" () { impl_Finish(); };
	 Flush :: proc "c" () { impl_Flush(); };
	 BlendFunc :: proc "c" (sfactor : GLenum, dfactor : GLenum) { impl_BlendFunc(cast(u32)sfactor, cast(u32)dfactor); };
	 LogicOp :: proc "c" (opcode : GLenum) { impl_LogicOp(cast(u32)opcode); };
	 StencilFunc :: proc "c" (func : GLenum, ref : GLint, mask : GLuint) { impl_StencilFunc(cast(u32)func, ref, mask); };
	 StencilOp :: proc "c" (fail : GLenum, zfail : GLenum, zpass : GLenum) { impl_StencilOp(cast(u32)fail, cast(u32)zfail, cast(u32)zpass); };
	 DepthFunc :: proc "c" (func : GLenum) { impl_DepthFunc(cast(u32)func); };
	 PixelStoref :: proc "c" (pname : GLenum, param : GLfloat) { impl_PixelStoref(cast(u32)pname, param); };
	 PixelStorei :: proc "c" (pname : GLenum, param : GLint) { impl_PixelStorei(cast(u32)pname, param); };
	 ReadBuffer :: proc "c" (src : GLenum) { impl_ReadBuffer(cast(u32)src); };
	 ReadPixels :: proc "c" (x : GLint, y : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, pixels : rawptr) { impl_ReadPixels(x, y, width, height, cast(u32)format, cast(u32)type, pixels); };
	 GetBooleanv :: proc "c" (pname : GLenum, data : ^GLboolean) { impl_GetBooleanv(cast(u32)pname, data); };
	 GetDoublev :: proc "c" (pname : GLenum, data : ^GLdouble) { impl_GetDoublev(cast(u32)pname, data); };
	 GetFloatv :: proc "c" (pname : GLenum, data : ^GLfloat) { impl_GetFloatv(cast(u32)pname, data); };
	 GetIntegerv :: proc "c" (pname : GLenum, data : ^GLint) { impl_GetIntegerv(cast(u32)pname, data); };
	 GetTexImage :: proc "c" (target : GLenum, level : GLint, format : GLenum, type : GLenum, pixels : rawptr) { impl_GetTexImage(cast(u32)target, level, cast(u32)format, cast(u32)type, pixels); };
	 GetTexParameterfv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLfloat) { impl_GetTexParameterfv(cast(u32)target, cast(u32)pname, params); };
	 GetTexParameteriv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint) { impl_GetTexParameteriv(cast(u32)target, cast(u32)pname, params); };
	 GetTexLevelParameterfv :: proc "c" (target : GLenum, level : GLint, pname : GLenum, params : ^GLfloat) { impl_GetTexLevelParameterfv(cast(u32)target, level, cast(u32)pname, params); };
	 GetTexLevelParameteriv :: proc "c" (target : GLenum, level : GLint, pname : GLenum, params : ^GLint) { impl_GetTexLevelParameteriv(cast(u32)target, level, cast(u32)pname, params); };
	 DepthRange :: proc "c" (nearVal : GLdouble, farVal : GLdouble) { impl_DepthRange(nearVal, farVal); };
	 Viewport :: proc "c" (x : GLint, y : GLint, width : GLsizei, height : GLsizei) { impl_Viewport(x, y, width, height); };
// VERSION_1_1
	 DrawArrays :: proc "c" (mode : GLenum, first : GLint, count : GLsizei) { impl_DrawArrays(cast(u32)mode, first, count); };
	 DrawElements :: proc "c" (mode : GLenum, count : GLsizei, type : GLenum, indices : rawptr) { impl_DrawElements(cast(u32)mode, count, cast(u32)type, indices); };
	 PolygonOffset :: proc "c" (factor : GLfloat, units : GLfloat) { impl_PolygonOffset(factor, units); };
	 CopyTexImage1D :: proc "c" (target : GLenum, level : GLint, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei, border : GLint) { impl_CopyTexImage1D(cast(u32)target, level, cast(u32)internalformat, x, y, width, border); };
	 CopyTexImage2D :: proc "c" (target : GLenum, level : GLint, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei, height : GLsizei, border : GLint) { impl_CopyTexImage2D(cast(u32)target, level, cast(u32)internalformat, x, y, width, height, border); };
	 CopyTexSubImage1D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, x : GLint, y : GLint, width : GLsizei) { impl_CopyTexSubImage1D(cast(u32)target, level, xoffset, x, y, width); };
	 CopyTexSubImage2D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei) { impl_CopyTexSubImage2D(cast(u32)target, level, xoffset, yoffset, x, y, width, height); };
	 TexSubImage1D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, type : GLenum, pixels : rawptr) { impl_TexSubImage1D(cast(u32)target, level, xoffset, width, cast(u32)format, cast(u32)type, pixels); };
	 TexSubImage2D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, pixels : rawptr) { impl_TexSubImage2D(cast(u32)target, level, xoffset, yoffset, width, height, cast(u32)format, cast(u32)type, pixels); };
	 BindTexture :: proc "c" (target : GLenum, texture : GLuint) { impl_BindTexture(cast(u32)target, texture); };
	 DeleteTextures :: proc "c" (n : GLsizei, textures : ^GLuint) { impl_DeleteTextures(n, textures); };
	 GenTextures :: proc "c" (n : GLsizei, textures : ^GLuint) { impl_GenTextures(n, textures); };
// VERSION_1_2
	 DrawRangeElements :: proc "c" (mode : GLenum, start : GLuint, end : GLuint, count : GLsizei, type : GLenum, indices : rawptr) { impl_DrawRangeElements(cast(u32)mode, start, end, count, cast(u32)type, indices); };
	 TexImage3D :: proc "c" (target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : rawptr) { impl_TexImage3D(cast(u32)target, level, cast(i32)internalformat, width, height, depth, border, cast(u32)format, cast(u32)type, pixels); };
	 TexSubImage3D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, type : GLenum, pixels : rawptr) { impl_TexSubImage3D(cast(u32)target, level, xoffset, yoffset, zoffset, width, height, depth, cast(u32)format, cast(u32)type, pixels); };
	 CopyTexSubImage3D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei) { impl_CopyTexSubImage3D(cast(u32)target, level, xoffset, yoffset, zoffset, x, y, width, height); };
// VERSION_1_3
	 ActiveTexture :: proc "c" (texture : GLenum) { impl_ActiveTexture(cast(u32)texture); };
	 SampleCoverage :: proc "c" (value : GLfloat, invert : GLboolean) { impl_SampleCoverage(value, invert); };
	 CompressedTexImage3D :: proc "c" (target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, border : GLint, imageSize : GLsizei, data : rawptr) { impl_CompressedTexImage3D(cast(u32)target, level, cast(u32)internalformat, width, height, depth, border, imageSize, data); };
	 CompressedTexImage2D :: proc "c" (target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, border : GLint, imageSize : GLsizei, data : rawptr) { impl_CompressedTexImage2D(cast(u32)target, level, cast(u32)internalformat, width, height, border, imageSize, data); };
	 CompressedTexImage1D :: proc "c" (target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, border : GLint, imageSize : GLsizei, data : rawptr) { impl_CompressedTexImage1D(cast(u32)target, level, cast(u32)internalformat, width, border, imageSize, data); };
	 CompressedTexSubImage3D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, imageSize : GLsizei, data : rawptr) { impl_CompressedTexSubImage3D(cast(u32)target, level, xoffset, yoffset, zoffset, width, height, depth, cast(u32)format, imageSize, data); };
	 CompressedTexSubImage2D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, imageSize : GLsizei, data : rawptr) { impl_CompressedTexSubImage2D(cast(u32)target, level, xoffset, yoffset, width, height, cast(u32)format, imageSize, data); };
	 CompressedTexSubImage1D :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, imageSize : GLsizei, data : rawptr) { impl_CompressedTexSubImage1D(cast(u32)target, level, xoffset, width, cast(u32)format, imageSize, data); };
	 GetCompressedTexImage :: proc "c" (target : GLenum, level : GLint, img : rawptr) { impl_GetCompressedTexImage(cast(u32)target, level, img); };
// VERSION_1_4
	 BlendFuncSeparate :: proc "c" (sfactorRGB : GLenum, dfactorRGB : GLenum, sfactorAlpha : GLenum, dfactorAlpha : GLenum) { impl_BlendFuncSeparate(cast(u32)sfactorRGB, cast(u32)dfactorRGB, cast(u32)sfactorAlpha, cast(u32)dfactorAlpha); };
	 MultiDrawArrays :: proc "c" (mode : GLenum, first : ^GLint, count : ^GLsizei, drawcount : GLsizei) { impl_MultiDrawArrays(cast(u32)mode, first, count, drawcount); };
	 MultiDrawElements :: proc "c" (mode : GLenum, count : ^GLsizei, type : GLenum, indices : ^rawptr, drawcount : GLsizei) { impl_MultiDrawElements(cast(u32)mode, count, cast(u32)type, indices, drawcount); };
	 PointParameterf :: proc "c" (pname : GLenum, param : GLfloat) { impl_PointParameterf(cast(u32)pname, param); };
	 PointParameterfv :: proc "c" (pname : GLenum, params : ^GLfloat) { impl_PointParameterfv(cast(u32)pname, params); };
	 PointParameteri :: proc "c" (pname : GLenum, param : GLint) { impl_PointParameteri(cast(u32)pname, param); };
	 PointParameteriv :: proc "c" (pname : GLenum, params : ^GLint) { impl_PointParameteriv(cast(u32)pname, params); };
	 BlendColor :: proc "c" (red : GLfloat, green : GLfloat, blue : GLfloat, alpha : GLfloat) { impl_BlendColor(red, green, blue, alpha); };
	 BlendEquation :: proc "c" (mode : GLenum) { impl_BlendEquation(cast(u32)mode); };
// VERSION_1_5
	 GenQueries :: proc "c" (n : GLsizei, ids : ^GLuint) { impl_GenQueries(n, ids); };
	 DeleteQueries :: proc "c" (n : GLsizei, ids : ^GLuint) { impl_DeleteQueries(n, ids); };
	 BeginQuery :: proc "c" (target : GLenum, id : GLuint) { impl_BeginQuery(cast(u32)target, id); };
	 EndQuery :: proc "c" (target : GLenum) { impl_EndQuery(cast(u32)target); };
	 GetQueryiv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint) { impl_GetQueryiv(cast(u32)target, cast(u32)pname, params); };
	 GetQueryObjectiv :: proc "c" (id : GLuint, pname : GLenum, params : ^GLint) { impl_GetQueryObjectiv(id, cast(u32)pname, params); };
	 GetQueryObjectuiv :: proc "c" (id : GLuint, pname : GLenum, params : ^GLuint) { impl_GetQueryObjectuiv(id, cast(u32)pname, params); };
	 BindBuffer :: proc "c" (target : GLenum, buffer : GLuint) { impl_BindBuffer(cast(u32)target, buffer); };
	 DeleteBuffers :: proc "c" (n : GLsizei, buffers : ^GLuint) { impl_DeleteBuffers(n, buffers); };
	 GenBuffers :: proc "c" (n : GLsizei, buffers : ^GLuint) { impl_GenBuffers(n, buffers); };
	 BufferData :: proc "c" (target : GLenum, size : GLsizeiptr, data : rawptr, usage : GLenum) { impl_BufferData(cast(u32)target, size, data, cast(u32)usage); };
	 BufferSubData :: proc "c" (target : GLenum, offset : GLintptr, size : GLsizeiptr, data : rawptr) { impl_BufferSubData(cast(u32)target, offset, size, data); };
	 GetBufferSubData :: proc "c" (target : GLenum, offset : GLintptr, size : GLsizeiptr, data : rawptr) { impl_GetBufferSubData(cast(u32)target, offset, size, data); };
	 GetBufferParameteriv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint) { impl_GetBufferParameteriv(cast(u32)target, cast(u32)pname, params); };
	 GetBufferPointerv :: proc "c" (target : GLenum, pname : GLenum, params : ^rawptr) { impl_GetBufferPointerv(cast(u32)target, cast(u32)pname, params); };
// VERSION_2_0
	 BlendEquationSeparate :: proc "c" (modeRGB : GLenum, modeAlpha : GLenum) { impl_BlendEquationSeparate(cast(u32)modeRGB, cast(u32)modeAlpha); };
	 DrawBuffers :: proc "c" (n : GLsizei, bufs : ^GLenum) { impl_DrawBuffers(n, cast(^u32)bufs); };
	 StencilOpSeparate :: proc "c" (face : GLenum, sfail : GLenum, dpfail : GLenum, dppass : GLenum) { impl_StencilOpSeparate(cast(u32)face, cast(u32)sfail, cast(u32)dpfail, cast(u32)dppass); };
	 StencilFuncSeparate :: proc "c" (face : GLenum, func : GLenum, ref : GLint, mask : GLuint) { impl_StencilFuncSeparate(cast(u32)face, cast(u32)func, ref, mask); };
	 StencilMaskSeparate :: proc "c" (face : GLenum, mask : GLuint) { impl_StencilMaskSeparate(cast(u32)face, mask); };
	 AttachShader :: proc "c" (program : GLuint, shader : GLuint) { impl_AttachShader(program, shader); };
	 BindAttribLocation :: proc "c" (program : GLuint, index : GLuint, name : GLstring) { impl_BindAttribLocation(program, index, name); };
	 CompileShader :: proc "c" (shader : GLuint) { impl_CompileShader(shader); };
	 DeleteProgram :: proc "c" (program : GLuint) { impl_DeleteProgram(program); };
	 DeleteShader :: proc "c" (shader : GLuint) { impl_DeleteShader(shader); };
	 DetachShader :: proc "c" (program : GLuint, shader : GLuint) { impl_DetachShader(program, shader); };
	 DisableVertexAttribArray :: proc "c" (index : GLuint) { impl_DisableVertexAttribArray(index); };
	 EnableVertexAttribArray :: proc "c" (index : GLuint) { impl_EnableVertexAttribArray(index); };
	 GetActiveAttrib :: proc "c" (program : GLuint, index : GLuint, bufSize : GLsizei, length : ^GLsizei, size : ^GLint, type : ^GLenum, name : GLoutstring) { impl_GetActiveAttrib(program, index, bufSize, length, size, cast(^u32)type, name); };
	 GetActiveUniform :: proc "c" (program : GLuint, index : GLuint, bufSize : GLsizei, length : ^GLsizei, size : ^GLint, type : ^GLenum, name : GLoutstring) { impl_GetActiveUniform(program, index, bufSize, length, size, cast(^u32)type, name); };
	 GetAttachedShaders :: proc "c" (program : GLuint, maxCount : GLsizei, count : ^GLsizei, shaders : ^GLuint) { impl_GetAttachedShaders(program, maxCount, count, shaders); };
	 GetProgramiv :: proc "c" (program : GLuint, pname : GLenum, params : ^GLint) { impl_GetProgramiv(program, cast(u32)pname, params); };
	 GetProgramInfoLog :: proc "c" (program : GLuint, bufSize : GLsizei, length : ^GLsizei, infoLog : GLoutstring) { impl_GetProgramInfoLog(program, bufSize, length, infoLog); };
	 GetShaderiv :: proc "c" (shader : GLuint, pname : GLenum, params : ^GLint) { impl_GetShaderiv(shader, cast(u32)pname, params); };
	 GetShaderInfoLog :: proc "c" (shader : GLuint, bufSize : GLsizei, length : ^GLsizei, infoLog : GLoutstring) { impl_GetShaderInfoLog(shader, bufSize, length, infoLog); };
	 GetShaderSource :: proc "c" (shader : GLuint, bufSize : GLsizei, length : ^GLsizei, source : GLoutstring) { impl_GetShaderSource(shader, bufSize, length, source); };
	 GetUniformfv :: proc "c" (program : GLuint, location : GLint, params : ^GLfloat) { impl_GetUniformfv(program, location, params); };
	 GetUniformiv :: proc "c" (program : GLuint, location : GLint, params : ^GLint) { impl_GetUniformiv(program, location, params); };
	 GetVertexAttribdv :: proc "c" (index : GLuint, pname : GLenum, params : ^GLdouble) { impl_GetVertexAttribdv(index, cast(u32)pname, params); };
	 GetVertexAttribfv :: proc "c" (index : GLuint, pname : GLenum, params : ^GLfloat) { impl_GetVertexAttribfv(index, cast(u32)pname, params); };
	 GetVertexAttribiv :: proc "c" (index : GLuint, pname : GLenum, params : ^GLint) { impl_GetVertexAttribiv(index, cast(u32)pname, params); };
	 GetVertexAttribPointerv :: proc "c" (index : GLuint, pname : GLenum, pointer : ^uintptr) { impl_GetVertexAttribPointerv(index, cast(u32)pname, pointer); };
	 LinkProgram :: proc "c" (program : GLuint) { impl_LinkProgram(program); };
	 ShaderSource :: proc "c" (shader : GLuint, count : GLsizei, string : ^GLstring, length : ^GLint) { impl_ShaderSource(shader, count, string, length); };
	 UseProgram :: proc "c" (program : GLuint) { impl_UseProgram(program); };
	 Uniform1f :: proc "c" (location : GLint, v0 : GLfloat) { impl_Uniform1f(location, v0); };
	 Uniform2f :: proc "c" (location : GLint, v0 : GLfloat, v1 : GLfloat) { impl_Uniform2f(location, v0, v1); };
	 Uniform3f :: proc "c" (location : GLint, v0 : GLfloat, v1 : GLfloat, v2 : GLfloat) { impl_Uniform3f(location, v0, v1, v2); };
	 Uniform4f :: proc "c" (location : GLint, v0 : GLfloat, v1 : GLfloat, v2 : GLfloat, v3 : GLfloat) { impl_Uniform4f(location, v0, v1, v2, v3); };
	 Uniform1i :: proc "c" (location : GLint, v0 : GLint) { impl_Uniform1i(location, v0); };
	 Uniform2i :: proc "c" (location : GLint, v0 : GLint, v1 : GLint) { impl_Uniform2i(location, v0, v1); };
	 Uniform3i :: proc "c" (location : GLint, v0 : GLint, v1 : GLint, v2 : GLint) { impl_Uniform3i(location, v0, v1, v2); };
	 Uniform4i :: proc "c" (location : GLint, v0 : GLint, v1 : GLint, v2 : GLint, v3 : GLint) { impl_Uniform4i(location, v0, v1, v2, v3); };
	 Uniform1fv :: proc "c" (location : GLint, count : GLsizei, value : ^GLfloat) { impl_Uniform1fv(location, count, value); };
	 Uniform2fv :: proc "c" (location : GLint, count : GLsizei, value : ^GLfloat) { impl_Uniform2fv(location, count, value); };
	 Uniform3fv :: proc "c" (location : GLint, count : GLsizei, value : ^GLfloat) { impl_Uniform3fv(location, count, value); };
	 Uniform4fv :: proc "c" (location : GLint, count : GLsizei, value : ^GLfloat) { impl_Uniform4fv(location, count, value); };
	 Uniform1iv :: proc "c" (location : GLint, count : GLsizei, value : ^GLint) { impl_Uniform1iv(location, count, value); };
	 Uniform2iv :: proc "c" (location : GLint, count : GLsizei, value : ^GLint) { impl_Uniform2iv(location, count, value); };
	 Uniform3iv :: proc "c" (location : GLint, count : GLsizei, value : ^GLint) { impl_Uniform3iv(location, count, value); };
	 Uniform4iv :: proc "c" (location : GLint, count : GLsizei, value : ^GLint) { impl_Uniform4iv(location, count, value); };
	 UniformMatrix2fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_UniformMatrix2fv(location, count, transpose, value); };
	 UniformMatrix3fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_UniformMatrix3fv(location, count, transpose, value); };
	 UniformMatrix4fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_UniformMatrix4fv(location, count, transpose, value); };
	 ValidateProgram :: proc "c" (program : GLuint) { impl_ValidateProgram(program); };
	 VertexAttrib1d :: proc "c" (index : GLuint, x : GLdouble) { impl_VertexAttrib1d(index, x); };
	 VertexAttrib1dv :: proc "c" (index : GLuint, v : ^GLdouble) { impl_VertexAttrib1dv(index, v); };
	 VertexAttrib1f :: proc "c" (index : GLuint, x : GLfloat) { impl_VertexAttrib1f(index, x); };
	 VertexAttrib1fv :: proc "c" (index : GLuint, v : ^GLfloat) { impl_VertexAttrib1fv(index, v); };
	 VertexAttrib1s :: proc "c" (index : GLuint, x : GLshort) { impl_VertexAttrib1s(index, x); };
	 VertexAttrib1sv :: proc "c" (index : GLuint, v : ^GLshort) { impl_VertexAttrib1sv(index, v); };
	 VertexAttrib2d :: proc "c" (index : GLuint, x : GLdouble, y : GLdouble) { impl_VertexAttrib2d(index, x, y); };
	 VertexAttrib2dv :: proc "c" (index : GLuint, v : ^GLdouble) { impl_VertexAttrib2dv(index, v); };
	 VertexAttrib2f :: proc "c" (index : GLuint, x : GLfloat, y : GLfloat) { impl_VertexAttrib2f(index, x, y); };
	 VertexAttrib2fv :: proc "c" (index : GLuint, v : ^GLfloat) { impl_VertexAttrib2fv(index, v); };
	 VertexAttrib2s :: proc "c" (index : GLuint, x : GLshort, y : GLshort) { impl_VertexAttrib2s(index, x, y); };
	 VertexAttrib2sv :: proc "c" (index : GLuint, v : ^GLshort) { impl_VertexAttrib2sv(index, v); };
	 VertexAttrib3d :: proc "c" (index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble) { impl_VertexAttrib3d(index, x, y, z); };
	 VertexAttrib3dv :: proc "c" (index : GLuint, v : ^GLdouble) { impl_VertexAttrib3dv(index, v); };
	 VertexAttrib3f :: proc "c" (index : GLuint, x : GLfloat, y : GLfloat, z : GLfloat) { impl_VertexAttrib3f(index, x, y, z); };
	 VertexAttrib3fv :: proc "c" (index : GLuint, v : ^GLfloat) { impl_VertexAttrib3fv(index, v); };
	 VertexAttrib3s :: proc "c" (index : GLuint, x : GLshort, y : GLshort, z : GLshort) { impl_VertexAttrib3s(index, x, y, z); };
	 VertexAttrib3sv :: proc "c" (index : GLuint, v : ^GLshort) { impl_VertexAttrib3sv(index, v); };
	 VertexAttrib4Nbv :: proc "c" (index : GLuint, v : ^GLbyte) { impl_VertexAttrib4Nbv(index, v); };
	 VertexAttrib4Niv :: proc "c" (index : GLuint, v : ^GLint) { impl_VertexAttrib4Niv(index, v); };
	 VertexAttrib4Nsv :: proc "c" (index : GLuint, v : ^GLshort) { impl_VertexAttrib4Nsv(index, v); };
	 VertexAttrib4Nub :: proc "c" (index : GLuint, x : GLubyte, y : GLubyte, z : GLubyte, w : GLubyte) { impl_VertexAttrib4Nub(index, x, y, z, w); };
	 VertexAttrib4Nubv :: proc "c" (index : GLuint, v : ^GLubyte) { impl_VertexAttrib4Nubv(index, v); };
	 VertexAttrib4Nuiv :: proc "c" (index : GLuint, v : ^GLuint) { impl_VertexAttrib4Nuiv(index, v); };
	 VertexAttrib4Nusv :: proc "c" (index : GLuint, v : ^GLushort) { impl_VertexAttrib4Nusv(index, v); };
	 VertexAttrib4bv :: proc "c" (index : GLuint, v : ^GLbyte) { impl_VertexAttrib4bv(index, v); };
	 VertexAttrib4d :: proc "c" (index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble) { impl_VertexAttrib4d(index, x, y, z, w); };
	 VertexAttrib4dv :: proc "c" (index : GLuint, v : ^GLdouble) { impl_VertexAttrib4dv(index, v); };
	 VertexAttrib4f :: proc "c" (index : GLuint, x : GLfloat, y : GLfloat, z : GLfloat, w : GLfloat) { impl_VertexAttrib4f(index, x, y, z, w); };
	 VertexAttrib4fv :: proc "c" (index : GLuint, v : ^GLfloat) { impl_VertexAttrib4fv(index, v); };
	 VertexAttrib4iv :: proc "c" (index : GLuint, v : ^GLint) { impl_VertexAttrib4iv(index, v); };
	 VertexAttrib4s :: proc "c" (index : GLuint, x : GLshort, y : GLshort, z : GLshort, w : GLshort) { impl_VertexAttrib4s(index, x, y, z, w); };
	 VertexAttrib4sv :: proc "c" (index : GLuint, v : ^GLshort) { impl_VertexAttrib4sv(index, v); };
	 VertexAttrib4ubv :: proc "c" (index : GLuint, v : ^GLubyte) { impl_VertexAttrib4ubv(index, v); };
	 VertexAttrib4uiv :: proc "c" (index : GLuint, v : ^GLuint) { impl_VertexAttrib4uiv(index, v); };
	 VertexAttrib4usv :: proc "c" (index : GLuint, v : ^GLushort) { impl_VertexAttrib4usv(index, v); };
	 VertexAttribPointer :: proc "c" (index : GLuint, size : GLint, type : GLenum, normalized : GLboolean, stride : GLsizei, pointer : uintptr) { impl_VertexAttribPointer(index, size, cast(u32)type, normalized, stride, pointer); };
// VERSION_2_1
	 UniformMatrix2x3fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_UniformMatrix2x3fv(location, count, transpose, value); };
	 UniformMatrix3x2fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_UniformMatrix3x2fv(location, count, transpose, value); };
	 UniformMatrix2x4fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_UniformMatrix2x4fv(location, count, transpose, value); };
	 UniformMatrix4x2fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_UniformMatrix4x2fv(location, count, transpose, value); };
	 UniformMatrix3x4fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_UniformMatrix3x4fv(location, count, transpose, value); };
	 UniformMatrix4x3fv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_UniformMatrix4x3fv(location, count, transpose, value); };
//VERSION_3_0
	 ColorMaski :: proc "c" (index : GLuint, r : GLboolean, g : GLboolean, b : GLboolean, a : GLboolean) { impl_ColorMaski(index, r, g, b, a); };
	 GetBooleani_v :: proc "c" (target : GLenum, index : GLuint, data : ^GLboolean) { impl_GetBooleani_v(cast(u32)target, index, data); };
	 GetIntegeri_v :: proc "c" (target : GLenum, index : GLuint, data : ^GLint) { impl_GetIntegeri_v(cast(u32)target, index, data); };
	 Enablei :: proc "c" (target : GLenum, index : GLuint) { impl_Enablei(cast(u32)target, index); };
	 Disablei :: proc "c" (target : GLenum, index : GLuint) { impl_Disablei(cast(u32)target, index); };
	 BeginTransformFeedback :: proc "c" (primitiveMode : GLenum) { impl_BeginTransformFeedback(cast(u32)primitiveMode); };
	 EndTransformFeedback :: proc "c" () { impl_EndTransformFeedback(); };
	 BindBufferRange :: proc "c" (target : GLenum, index : GLuint, buffer : GLuint, offset : GLintptr, size : GLsizeiptr) { impl_BindBufferRange(cast(u32)target, index, buffer, offset, size); };
	 BindBufferBase :: proc "c" (target : GLenum, index : GLuint, buffer : GLuint) { impl_BindBufferBase(cast(u32)target, index, buffer); };
	 TransformFeedbackVaryings :: proc "c" (program : GLuint, count : GLsizei, varyings : ^GLstring, bufferMode : GLenum) { impl_TransformFeedbackVaryings(program, count, varyings, cast(u32)bufferMode); };
	 GetTransformFeedbackVarying :: proc "c" (program : GLuint, index : GLuint, bufSize : GLsizei, length : ^GLsizei, size : ^GLsizei, type : ^GLenum, name : GLoutstring) { impl_GetTransformFeedbackVarying(program, index, bufSize, length, size, cast(^u32)type, name); };
	 ClampColor :: proc "c" (target : GLenum, clamp : GLenum) { impl_ClampColor(cast(u32)target, cast(u32)clamp); };
	 BeginConditionalRender :: proc "c" (id : GLuint, mode : GLenum) { impl_BeginConditionalRender(id, cast(u32)mode); };
	 EndConditionalRender :: proc "c" () { impl_EndConditionalRender(); };
	 VertexAttribIPointer :: proc "c" (index : GLuint, size : GLint, type : GLenum, stride : GLsizei, pointer : uintptr) { impl_VertexAttribIPointer(index, size, cast(u32)type, stride, pointer); };
	 GetVertexAttribIiv :: proc "c" (index : GLuint, pname : GLenum, params : ^GLint) { impl_GetVertexAttribIiv(index, cast(u32)pname, params); };
	 GetVertexAttribIuiv :: proc "c" (index : GLuint, pname : GLenum, params : ^GLuint) { impl_GetVertexAttribIuiv(index, cast(u32)pname, params); };
	 VertexAttribI1i :: proc "c" (index : GLuint, x : GLint) { impl_VertexAttribI1i(index, x); };
	 VertexAttribI2i :: proc "c" (index : GLuint, x : GLint, y : GLint) { impl_VertexAttribI2i(index, x, y); };
	 VertexAttribI3i :: proc "c" (index : GLuint, x : GLint, y : GLint, z : GLint) { impl_VertexAttribI3i(index, x, y, z); };
	 VertexAttribI4i :: proc "c" (index : GLuint, x : GLint, y : GLint, z : GLint, w : GLint) { impl_VertexAttribI4i(index, x, y, z, w); };
	 VertexAttribI1ui :: proc "c" (index : GLuint, x : GLuint) { impl_VertexAttribI1ui(index, x); };
	 VertexAttribI2ui :: proc "c" (index : GLuint, x : GLuint, y : GLuint) { impl_VertexAttribI2ui(index, x, y); };
	 VertexAttribI3ui :: proc "c" (index : GLuint, x : GLuint, y : GLuint, z : GLuint) { impl_VertexAttribI3ui(index, x, y, z); };
	 VertexAttribI4ui :: proc "c" (index : GLuint, x : GLuint, y : GLuint, z : GLuint, w : GLuint) { impl_VertexAttribI4ui(index, x, y, z, w); };
	 VertexAttribI1iv :: proc "c" (index : GLuint, v : ^GLint) { impl_VertexAttribI1iv(index, v); };
	 VertexAttribI2iv :: proc "c" (index : GLuint, v : ^GLint) { impl_VertexAttribI2iv(index, v); };
	 VertexAttribI3iv :: proc "c" (index : GLuint, v : ^GLint) { impl_VertexAttribI3iv(index, v); };
	 VertexAttribI4iv :: proc "c" (index : GLuint, v : ^GLint) { impl_VertexAttribI4iv(index, v); };
	 VertexAttribI1uiv :: proc "c" (index : GLuint, v : ^GLuint) { impl_VertexAttribI1uiv(index, v); };
	 VertexAttribI2uiv :: proc "c" (index : GLuint, v : ^GLuint) { impl_VertexAttribI2uiv(index, v); };
	 VertexAttribI3uiv :: proc "c" (index : GLuint, v : ^GLuint) { impl_VertexAttribI3uiv(index, v); };
	 VertexAttribI4uiv :: proc "c" (index : GLuint, v : ^GLuint) { impl_VertexAttribI4uiv(index, v); };
	 VertexAttribI4bv :: proc "c" (index : GLuint, v : ^GLbyte) { impl_VertexAttribI4bv(index, v); };
	 VertexAttribI4sv :: proc "c" (index : GLuint, v : ^GLshort) { impl_VertexAttribI4sv(index, v); };
	 VertexAttribI4ubv :: proc "c" (index : GLuint, v : ^GLubyte) { impl_VertexAttribI4ubv(index, v); };
	 VertexAttribI4usv :: proc "c" (index : GLuint, v : ^GLushort) { impl_VertexAttribI4usv(index, v); };
	 GetUniformuiv :: proc "c" (program : GLuint, location : GLint, params : ^GLuint) { impl_GetUniformuiv(program, location, params); };
	 BindFragDataLocation :: proc "c" (program : GLuint, color : GLuint, name : GLstring) { impl_BindFragDataLocation(program, color, name); };
	 Uniform1ui :: proc "c" (location : GLint, v0 : GLuint) { impl_Uniform1ui(location, v0); };
	 Uniform2ui :: proc "c" (location : GLint, v0 : GLuint, v1 : GLuint) { impl_Uniform2ui(location, v0, v1); };
	 Uniform3ui :: proc "c" (location : GLint, v0 : GLuint, v1 : GLuint, v2 : GLuint) { impl_Uniform3ui(location, v0, v1, v2); };
	 Uniform4ui :: proc "c" (location : GLint, v0 : GLuint, v1 : GLuint, v2 : GLuint, v3 : GLuint) { impl_Uniform4ui(location, v0, v1, v2, v3); };
	 Uniform1uiv :: proc "c" (location : GLint, count : GLsizei, value : ^GLuint) { impl_Uniform1uiv(location, count, value); };
	 Uniform2uiv :: proc "c" (location : GLint, count : GLsizei, value : ^GLuint) { impl_Uniform2uiv(location, count, value); };
	 Uniform3uiv :: proc "c" (location : GLint, count : GLsizei, value : ^GLuint) { impl_Uniform3uiv(location, count, value); };
	 Uniform4uiv :: proc "c" (location : GLint, count : GLsizei, value : ^GLuint) { impl_Uniform4uiv(location, count, value); };
	 TexParameterIiv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint) { impl_TexParameterIiv(cast(u32)target, cast(u32)pname, params); };
	 TexParameterIuiv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLuint) { impl_TexParameterIuiv(cast(u32)target, cast(u32)pname, params); };
	 GetTexParameterIiv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint) { impl_GetTexParameterIiv(cast(u32)target, cast(u32)pname, params); };
	 GetTexParameterIuiv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLuint) { impl_GetTexParameterIuiv(cast(u32)target, cast(u32)pname, params); };
	 ClearBufferiv :: proc "c" (buffer : GLenum, drawbuffer : GLint, value : ^GLint) { impl_ClearBufferiv(cast(u32)buffer, drawbuffer, value); };
	 ClearBufferuiv :: proc "c" (buffer : GLenum, drawbuffer : GLint, value : ^GLuint) { impl_ClearBufferuiv(cast(u32)buffer, drawbuffer, value); };
	 ClearBufferfv :: proc "c" (buffer : GLenum, drawbuffer : GLint, value : ^GLfloat) { impl_ClearBufferfv(cast(u32)buffer, drawbuffer, value); };
	 ClearBufferfi :: proc "c" (buffer : GLenum, drawbuffer : GLint, depth : GLfloat, stencil : GLint) { impl_ClearBufferfi(cast(u32)buffer, drawbuffer, depth, stencil); };
	 BindRenderbuffer :: proc "c" (target : GLenum, renderbuffer : GLuint) { impl_BindRenderbuffer(cast(u32)target, renderbuffer); };
	 DeleteRenderbuffers :: proc "c" (n : GLsizei, renderbuffers : ^GLuint) { impl_DeleteRenderbuffers(n, renderbuffers); };
	 GenRenderbuffers :: proc "c" (n : GLsizei, renderbuffers : ^GLuint) { impl_GenRenderbuffers(n, renderbuffers); };
	 RenderbufferStorage :: proc "c" (target : GLenum, internalformat : GLenum, width : GLsizei, height : GLsizei) { impl_RenderbufferStorage(cast(u32)target, cast(u32)internalformat, width, height); };
	 GetRenderbufferParameteriv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint) { impl_GetRenderbufferParameteriv(cast(u32)target, cast(u32)pname, params); };
	 BindFramebuffer :: proc "c" (target : GLenum, framebuffer : GLuint) { impl_BindFramebuffer(cast(u32)target, framebuffer); };
	 DeleteFramebuffers :: proc "c" (n : GLsizei, framebuffers : ^GLuint) { impl_DeleteFramebuffers(n, framebuffers); };
	 GenFramebuffers :: proc "c" (n : GLsizei, framebuffers : ^GLuint) { impl_GenFramebuffers(n, framebuffers); };
	 FramebufferTexture1D :: proc "c" (target : GLenum, attachment : GLenum, textarget : GLenum, texture : GLuint, level : GLint) { impl_FramebufferTexture1D(cast(u32)target, cast(u32)attachment, cast(u32)textarget, texture, level); };
	 FramebufferTexture2D :: proc "c" (target : GLenum, attachment : GLenum, textarget : GLenum, texture : GLuint, level : GLint) { impl_FramebufferTexture2D(cast(u32)target, cast(u32)attachment, cast(u32)textarget, texture, level); };
	 FramebufferTexture3D :: proc "c" (target : GLenum, attachment : GLenum, textarget : GLenum, texture : GLuint, level : GLint, zoffset : GLint) { impl_FramebufferTexture3D(cast(u32)target, cast(u32)attachment, cast(u32)textarget, texture, level, zoffset); };
	 FramebufferRenderbuffer :: proc "c" (target : GLenum, attachment : GLenum, renderbuffertarget : GLenum, renderbuffer : GLuint) { impl_FramebufferRenderbuffer(cast(u32)target, cast(u32)attachment, cast(u32)renderbuffertarget, renderbuffer); };
	 GetFramebufferAttachmentParameteriv :: proc "c" (target : GLenum, attachment : GLenum, pname : GLenum, params : ^GLint) { impl_GetFramebufferAttachmentParameteriv(cast(u32)target, cast(u32)attachment, cast(u32)pname, params); };
	 GenerateMipmap :: proc "c" (target : GLenum) { impl_GenerateMipmap(cast(u32)target); };
	 BlitFramebuffer :: proc "c" (srcX0 : GLint, srcY0 : GLint, srcX1 : GLint, srcY1 : GLint, dstX0 : GLint, dstY0 : GLint, dstX1 : GLint, dstY1 : GLint, mask : GLbitfield, filter : GLenum) { impl_BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, cast(u32)mask, cast(u32)filter); };
	 RenderbufferStorageMultisample :: proc "c" (target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei) { impl_RenderbufferStorageMultisample(cast(u32)target, samples, cast(u32)internalformat, width, height); };
	 FramebufferTextureLayer :: proc "c" (target : GLenum, attachment : GLenum, texture : GLuint, level : GLint, layer : GLint) { impl_FramebufferTextureLayer(cast(u32)target, cast(u32)attachment, texture, level, layer); };
	 FlushMappedBufferRange :: proc "c" (target : GLenum, offset : GLintptr, length : GLsizeiptr) { impl_FlushMappedBufferRange(cast(u32)target, offset, length); };
	 BindVertexArray :: proc "c" (array : GLuint) { impl_BindVertexArray(array); };
	 DeleteVertexArrays :: proc "c" (n : GLsizei, arrays : ^GLuint) { impl_DeleteVertexArrays(n, arrays); };
	 GenVertexArrays :: proc "c" (n : GLsizei, arrays : ^GLuint) { impl_GenVertexArrays(n, arrays); };
// VERSION_3_1
	 DrawArraysInstanced :: proc "c" (mode : GLenum, first : GLint, count : GLsizei, instancecount : GLsizei) { impl_DrawArraysInstanced(cast(u32)mode, first, count, instancecount); };
	 DrawElementsInstanced :: proc "c" (mode : GLenum, count : GLsizei, type : GLenum, indices : rawptr, instancecount : GLsizei) { impl_DrawElementsInstanced(cast(u32)mode, count, cast(u32)type, indices, instancecount); };
	 TexBuffer :: proc "c" (target : GLenum, internalformat : GLenum, buffer : GLuint) { impl_TexBuffer(cast(u32)target, cast(u32)internalformat, buffer); };
	 PrimitiveRestartIndex :: proc "c" (index : GLuint) { impl_PrimitiveRestartIndex(index); };
	 CopyBufferSubData :: proc "c" (readTarget : GLenum, writeTarget : GLenum, readOffset : GLintptr, writeOffset : GLintptr, size : GLsizeiptr) { impl_CopyBufferSubData(cast(u32)readTarget, cast(u32)writeTarget, readOffset, writeOffset, size); };
	 GetUniformIndices :: proc "c" (program : GLuint, uniformCount : GLsizei, uniformNames : ^GLstring, uniformIndices : ^GLuint) { impl_GetUniformIndices(program, uniformCount, uniformNames, uniformIndices); };
	 GetActiveUniformsiv :: proc "c" (program : GLuint, uniformCount : GLsizei, uniformIndices : ^GLuint, pname : GLenum, params : ^GLint) { impl_GetActiveUniformsiv(program, uniformCount, uniformIndices, cast(u32)pname, params); };
	 GetActiveUniformName :: proc "c" (program : GLuint, uniformIndex : GLuint, bufSize : GLsizei, length : ^GLsizei, uniformName : ^GLchar) { impl_GetActiveUniformName(program, uniformIndex, bufSize, length, uniformName); };
	 GetActiveUniformBlockiv :: proc "c" (program : GLuint, uniformBlockIndex : GLuint, pname : GLenum, params : ^GLint) { impl_GetActiveUniformBlockiv(program, uniformBlockIndex, cast(u32)pname, params); };
	 GetActiveUniformBlockName :: proc "c" (program : GLuint, uniformBlockIndex : GLuint, bufSize : GLsizei, length : ^GLsizei, uniformBlockName : ^GLchar) { impl_GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName); };
	 UniformBlockBinding :: proc "c" (program : GLuint, uniformBlockIndex : GLuint, uniformBlockBinding : GLuint) { impl_UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding); };
// VERSION_3_2
	 DrawElementsBaseVertex :: proc "c" (mode : GLenum, count : GLsizei, type : GLenum, indices : rawptr, basevertex : GLint) { impl_DrawElementsBaseVertex(cast(u32)mode, count, cast(u32)type, indices, basevertex); };
	 DrawRangeElementsBaseVertex :: proc "c" (mode : GLenum, start : GLuint, end : GLuint, count : GLsizei, type : GLenum, indices : rawptr, basevertex : GLint) { impl_DrawRangeElementsBaseVertex(cast(u32)mode, start, end, count, cast(u32)type, indices, basevertex); };
	 DrawElementsInstancedBaseVertex :: proc "c" (mode : GLenum, count : GLsizei, type : GLenum, indices : rawptr, instancecount : GLsizei, basevertex : GLint) { impl_DrawElementsInstancedBaseVertex(cast(u32)mode, count, cast(u32)type, indices, instancecount, basevertex); };
	 MultiDrawElementsBaseVertex :: proc "c" (mode : GLenum, count : ^GLsizei, type : GLenum, indices : ^rawptr, drawcount : GLsizei, basevertex : ^GLint) { impl_MultiDrawElementsBaseVertex(cast(u32)mode, count, cast(u32)type, indices, drawcount, basevertex); };
	 ProvokingVertex :: proc "c" (mode : GLenum) { impl_ProvokingVertex(cast(u32)mode); };
	 DeleteSync :: proc "c" (sync : GLsync) { impl_DeleteSync(sync); };
	 WaitSync :: proc "c" (sync : GLsync, flags : GLbitfield, timeout : GLuint64) { impl_WaitSync(sync, cast(u32)flags, timeout); };
	 GetInteger64v :: proc "c" (pname : GLenum, data : ^GLint64) { impl_GetInteger64v(cast(u32)pname, data); };
	 GetSynciv :: proc "c" (sync : GLsync, pname : GLenum, bufSize : GLsizei, length : ^GLsizei, values : ^GLint) { impl_GetSynciv(sync, cast(u32)pname, bufSize, length, values); };
	 GetInteger64i_v :: proc "c" (target : GLenum, index : GLuint, data : ^GLint64) { impl_GetInteger64i_v(cast(u32)target, index, data); };
	 GetBufferParameteri64v :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint64) { impl_GetBufferParameteri64v(cast(u32)target, cast(u32)pname, params); };
	 FramebufferTexture :: proc "c" (target : GLenum, attachment : GLenum, texture : GLuint, level : GLint) { impl_FramebufferTexture(cast(u32)target, cast(u32)attachment, texture, level); };
	 TexImage2DMultisample :: proc "c" (target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, fixedsamplelocations : GLboolean) { impl_TexImage2DMultisample(cast(u32)target, samples, cast(u32)internalformat, width, height, fixedsamplelocations); };
	 TexImage3DMultisample :: proc "c" (target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, fixedsamplelocations : GLboolean) { impl_TexImage3DMultisample(cast(u32)target, samples, cast(u32)internalformat, width, height, depth, fixedsamplelocations); };
	 GetMultisamplefv :: proc "c" (pname : GLenum, index : GLuint, val : ^GLfloat) { impl_GetMultisamplefv(cast(u32)pname, index, val); };
	 SampleMaski :: proc "c" (maskNumber : GLuint, mask : GLbitfield) { impl_SampleMaski(maskNumber, cast(u32)mask); };
// VERSION_3_3
	 BindFragDataLocationIndexed :: proc "c" (program : GLuint, colorNumber : GLuint, index : GLuint, name : GLstring) { impl_BindFragDataLocationIndexed(program, colorNumber, index, name); };
	 GenSamplers :: proc "c" (count : GLsizei, samplers : ^GLuint) { impl_GenSamplers(count, samplers); };
	 DeleteSamplers :: proc "c" (count : GLsizei, samplers : ^GLuint) { impl_DeleteSamplers(count, samplers); };
	 BindSampler :: proc "c" (unit : GLuint, sampler : GLuint) { impl_BindSampler(unit, sampler); };
	 SamplerParameteri :: proc "c" (sampler : GLuint, pname : GLenum, param : GLint) { impl_SamplerParameteri(sampler, cast(u32)pname, param); };
	 SamplerParameteriv :: proc "c" (sampler : GLuint, pname : GLenum, param : ^GLint) { impl_SamplerParameteriv(sampler, cast(u32)pname, param); };
	 SamplerParameterf :: proc "c" (sampler : GLuint, pname : GLenum, param : GLfloat) { impl_SamplerParameterf(sampler, cast(u32)pname, param); };
	 SamplerParameterfv :: proc "c" (sampler : GLuint, pname : GLenum, param : ^GLfloat) { impl_SamplerParameterfv(sampler, cast(u32)pname, param); };
	 SamplerParameterIiv :: proc "c" (sampler : GLuint, pname : GLenum, param : ^GLint) { impl_SamplerParameterIiv(sampler, cast(u32)pname, param); };
	 SamplerParameterIuiv :: proc "c" (sampler : GLuint, pname : GLenum, param : ^GLuint) { impl_SamplerParameterIuiv(sampler, cast(u32)pname, param); };
	 GetSamplerParameteriv :: proc "c" (sampler : GLuint, pname : GLenum, params : ^GLint) { impl_GetSamplerParameteriv(sampler, cast(u32)pname, params); };
	 GetSamplerParameterIiv :: proc "c" (sampler : GLuint, pname : GLenum, params : ^GLint) { impl_GetSamplerParameterIiv(sampler, cast(u32)pname, params); };
	 GetSamplerParameterfv :: proc "c" (sampler : GLuint, pname : GLenum, params : ^GLfloat) { impl_GetSamplerParameterfv(sampler, cast(u32)pname, params); };
	 GetSamplerParameterIuiv :: proc "c" (sampler : GLuint, pname : GLenum, params : ^GLuint) { impl_GetSamplerParameterIuiv(sampler, cast(u32)pname, params); };
	 QueryCounter :: proc "c" (id : GLuint, target : GLenum) { impl_QueryCounter(id, cast(u32)target); };
	 GetQueryObjecti64v :: proc "c" (id : GLuint, pname : GLenum, params : ^GLint64) { impl_GetQueryObjecti64v(id, cast(u32)pname, params); };
	 GetQueryObjectui64v :: proc "c" (id : GLuint, pname : GLenum, params : ^GLuint64) { impl_GetQueryObjectui64v(id, cast(u32)pname, params); };
	 VertexAttribDivisor :: proc "c" (index : GLuint, divisor : GLuint) { impl_VertexAttribDivisor(index, divisor); };
	 VertexAttribP1ui :: proc "c" (index : GLuint, type : GLenum, normalized : GLboolean, value : GLuint) { impl_VertexAttribP1ui(index, cast(u32)type, normalized, value); };
	 VertexAttribP1uiv :: proc "c" (index : GLuint, type : GLenum, normalized : GLboolean, value : ^GLuint) { impl_VertexAttribP1uiv(index, cast(u32)type, normalized, value); };
	 VertexAttribP2ui :: proc "c" (index : GLuint, type : GLenum, normalized : GLboolean, value : GLuint) { impl_VertexAttribP2ui(index, cast(u32)type, normalized, value); };
	 VertexAttribP2uiv :: proc "c" (index : GLuint, type : GLenum, normalized : GLboolean, value : ^GLuint) { impl_VertexAttribP2uiv(index, cast(u32)type, normalized, value); };
	 VertexAttribP3ui :: proc "c" (index : GLuint, type : GLenum, normalized : GLboolean, value : GLuint) { impl_VertexAttribP3ui(index, cast(u32)type, normalized, value); };
	 VertexAttribP3uiv :: proc "c" (index : GLuint, type : GLenum, normalized : GLboolean, value : ^GLuint) { impl_VertexAttribP3uiv(index, cast(u32)type, normalized, value); };
	 VertexAttribP4ui :: proc "c" (index : GLuint, type : GLenum, normalized : GLboolean, value : GLuint) { impl_VertexAttribP4ui(index, cast(u32)type, normalized, value); };
	 VertexAttribP4uiv :: proc "c" (index : GLuint, type : GLenum, normalized : GLboolean, value : ^GLuint) { impl_VertexAttribP4uiv(index, cast(u32)type, normalized, value); };
	 VertexP2ui :: proc "c" (type : GLenum, value : GLuint) { impl_VertexP2ui(cast(u32)type, value); };
	 VertexP2uiv :: proc "c" (type : GLenum, value : ^GLuint) { impl_VertexP2uiv(cast(u32)type, value); };
	 VertexP3ui :: proc "c" (type : GLenum, value : GLuint) { impl_VertexP3ui(cast(u32)type, value); };
	 VertexP3uiv :: proc "c" (type : GLenum, value : ^GLuint) { impl_VertexP3uiv(cast(u32)type, value); };
	 VertexP4ui :: proc "c" (type : GLenum, value : GLuint) { impl_VertexP4ui(cast(u32)type, value); };
	 VertexP4uiv :: proc "c" (type : GLenum, value : ^GLuint) { impl_VertexP4uiv(cast(u32)type, value); };
	 TexCoordP1ui :: proc "c" (type : GLenum, coords : GLuint) { impl_TexCoordP1ui(cast(u32)type, coords); };
	 TexCoordP1uiv :: proc "c" (type : GLenum, coords : ^GLuint) { impl_TexCoordP1uiv(cast(u32)type, coords); };
	 TexCoordP2ui :: proc "c" (type : GLenum, coords : GLuint) { impl_TexCoordP2ui(cast(u32)type, coords); };
	 TexCoordP2uiv :: proc "c" (type : GLenum, coords : ^GLuint) { impl_TexCoordP2uiv(cast(u32)type, coords); };
	 TexCoordP3ui :: proc "c" (type : GLenum, coords : GLuint) { impl_TexCoordP3ui(cast(u32)type, coords); };
	 TexCoordP3uiv :: proc "c" (type : GLenum, coords : ^GLuint) { impl_TexCoordP3uiv(cast(u32)type, coords); };
	 TexCoordP4ui :: proc "c" (type : GLenum, coords : GLuint) { impl_TexCoordP4ui(cast(u32)type, coords); };
	 TexCoordP4uiv :: proc "c" (type : GLenum, coords : ^GLuint) { impl_TexCoordP4uiv(cast(u32)type, coords); };
	 MultiTexCoordP1ui :: proc "c" (texture : GLenum, type : GLenum, coords : GLuint) { impl_MultiTexCoordP1ui(cast(u32)texture, cast(u32)type, coords); };
	 MultiTexCoordP1uiv :: proc "c" (texture : GLenum, type : GLenum, coords : ^GLuint) { impl_MultiTexCoordP1uiv(cast(u32)texture, cast(u32)type, coords); };
	 MultiTexCoordP2ui :: proc "c" (texture : GLenum, type : GLenum, coords : GLuint) { impl_MultiTexCoordP2ui(cast(u32)texture, cast(u32)type, coords); };
	 MultiTexCoordP2uiv :: proc "c" (texture : GLenum, type : GLenum, coords : ^GLuint) { impl_MultiTexCoordP2uiv(cast(u32)texture, cast(u32)type, coords); };
	 MultiTexCoordP3ui :: proc "c" (texture : GLenum, type : GLenum, coords : GLuint) { impl_MultiTexCoordP3ui(cast(u32)texture, cast(u32)type, coords); };
	 MultiTexCoordP3uiv :: proc "c" (texture : GLenum, type : GLenum, coords : ^GLuint) { impl_MultiTexCoordP3uiv(cast(u32)texture, cast(u32)type, coords); };
	 MultiTexCoordP4ui :: proc "c" (texture : GLenum, type : GLenum, coords : GLuint) { impl_MultiTexCoordP4ui(cast(u32)texture, cast(u32)type, coords); };
	 MultiTexCoordP4uiv :: proc "c" (texture : GLenum, type : GLenum, coords : ^GLuint) { impl_MultiTexCoordP4uiv(cast(u32)texture, cast(u32)type, coords); };
	 NormalP3ui :: proc "c" (type : GLenum, coords : GLuint) { impl_NormalP3ui(cast(u32)type, coords); };
	 NormalP3uiv :: proc "c" (type : GLenum, coords : ^GLuint) { impl_NormalP3uiv(cast(u32)type, coords); };
	 ColorP3ui :: proc "c" (type : GLenum, color : GLuint) { impl_ColorP3ui(cast(u32)type, color); };
	 ColorP3uiv :: proc "c" (type : GLenum, color : ^GLuint) { impl_ColorP3uiv(cast(u32)type, color); };
	 ColorP4ui :: proc "c" (type : GLenum, color : GLuint) { impl_ColorP4ui(cast(u32)type, color); };
	 ColorP4uiv :: proc "c" (type : GLenum, color : ^GLuint) { impl_ColorP4uiv(cast(u32)type, color); };
	 SecondaryColorP3ui :: proc "c" (type : GLenum, color : GLuint) { impl_SecondaryColorP3ui(cast(u32)type, color); };
	 SecondaryColorP3uiv :: proc "c" (type : GLenum, color : ^GLuint) { impl_SecondaryColorP3uiv(cast(u32)type, color); };
// VERSION_4_0
	 MinSampleShading :: proc "c" (value : GLfloat) { impl_MinSampleShading(value); };
	 BlendEquationi :: proc "c" (buf : GLuint, mode : GLenum) { impl_BlendEquationi(buf, cast(u32)mode); };
	 BlendEquationSeparatei :: proc "c" (buf : GLuint, modeRGB : GLenum, modeAlpha : GLenum) { impl_BlendEquationSeparatei(buf, cast(u32)modeRGB, cast(u32)modeAlpha); };
	 BlendFunci :: proc "c" (buf : GLuint, src : GLenum, dst : GLenum) { impl_BlendFunci(buf, cast(u32)src, cast(u32)dst); };
	 BlendFuncSeparatei :: proc "c" (buf : GLuint, srcRGB : GLenum, dstRGB : GLenum, srcAlpha : GLenum, dstAlpha : GLenum) { impl_BlendFuncSeparatei(buf, cast(u32)srcRGB, cast(u32)dstRGB, cast(u32)srcAlpha, cast(u32)dstAlpha); };
	 DrawArraysIndirect :: proc "c" (mode : GLenum, indirect : ^DrawArraysIndirectCommand) { impl_DrawArraysIndirect(cast(u32)mode, indirect); };
	 DrawElementsIndirect :: proc "c" (mode : GLenum, type : GLenum, indirect : ^DrawElementsIndirectCommand) { impl_DrawElementsIndirect(cast(u32)mode, cast(u32)type, indirect); };
	 Uniform1d :: proc "c" (location : GLint, x : GLdouble) { impl_Uniform1d(location, x); };
	 Uniform2d :: proc "c" (location : GLint, x : GLdouble, y : GLdouble) { impl_Uniform2d(location, x, y); };
	 Uniform3d :: proc "c" (location : GLint, x : GLdouble, y : GLdouble, z : GLdouble) { impl_Uniform3d(location, x, y, z); };
	 Uniform4d :: proc "c" (location : GLint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble) { impl_Uniform4d(location, x, y, z, w); };
	 Uniform1dv :: proc "c" (location : GLint, count : GLsizei, value : ^GLdouble) { impl_Uniform1dv(location, count, value); };
	 Uniform2dv :: proc "c" (location : GLint, count : GLsizei, value : ^GLdouble) { impl_Uniform2dv(location, count, value); };
	 Uniform3dv :: proc "c" (location : GLint, count : GLsizei, value : ^GLdouble) { impl_Uniform3dv(location, count, value); };
	 Uniform4dv :: proc "c" (location : GLint, count : GLsizei, value : ^GLdouble) { impl_Uniform4dv(location, count, value); };
	 UniformMatrix2dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_UniformMatrix2dv(location, count, transpose, value); };
	 UniformMatrix3dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_UniformMatrix3dv(location, count, transpose, value); };
	 UniformMatrix4dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_UniformMatrix4dv(location, count, transpose, value); };
	 UniformMatrix2x3dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_UniformMatrix2x3dv(location, count, transpose, value); };
	 UniformMatrix2x4dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_UniformMatrix2x4dv(location, count, transpose, value); };
	 UniformMatrix3x2dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_UniformMatrix3x2dv(location, count, transpose, value); };
	 UniformMatrix3x4dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_UniformMatrix3x4dv(location, count, transpose, value); };
	 UniformMatrix4x2dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_UniformMatrix4x2dv(location, count, transpose, value); };
	 UniformMatrix4x3dv :: proc "c" (location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_UniformMatrix4x3dv(location, count, transpose, value); };
	 GetUniformdv :: proc "c" (program : GLuint, location : GLint, params : ^GLdouble) { impl_GetUniformdv(program, location, params); };
	 GetActiveSubroutineUniformiv :: proc "c" (program : GLuint, shadertype : GLenum, index : GLuint, pname : GLenum, values : ^GLint) { impl_GetActiveSubroutineUniformiv(program, cast(u32)shadertype, index, cast(u32)pname, values); };
	 GetActiveSubroutineUniformName :: proc "c" (program : GLuint, shadertype : GLenum, index : GLuint, bufsize : GLsizei, length : ^GLsizei, name : GLoutstring) { impl_GetActiveSubroutineUniformName(program, cast(u32)shadertype, index, bufsize, length, name); };
	 GetActiveSubroutineName :: proc "c" (program : GLuint, shadertype : GLenum, index : GLuint, bufsize : GLsizei, length : ^GLsizei, name : GLoutstring) { impl_GetActiveSubroutineName(program, cast(u32)shadertype, index, bufsize, length, name); };
	 UniformSubroutinesuiv :: proc "c" (shadertype : GLenum, count : GLsizei, indices : ^GLuint) { impl_UniformSubroutinesuiv(cast(u32)shadertype, count, indices); };
	 GetUniformSubroutineuiv :: proc "c" (shadertype : GLenum, location : GLint, params : ^GLuint) { impl_GetUniformSubroutineuiv(cast(u32)shadertype, location, params); };
	 GetProgramStageiv :: proc "c" (program : GLuint, shadertype : GLenum, pname : GLenum, values : ^GLint) { impl_GetProgramStageiv(program, cast(u32)shadertype, cast(u32)pname, values); };
	 PatchParameteri :: proc "c" (pname : GLenum, value : GLint) { impl_PatchParameteri(cast(u32)pname, value); };
	 PatchParameterfv :: proc "c" (pname : GLenum, values : ^GLfloat) { impl_PatchParameterfv(cast(u32)pname, values); };
	 BindTransformFeedback :: proc "c" (target : GLenum, id : GLuint) { impl_BindTransformFeedback(cast(u32)target, id); };
	 DeleteTransformFeedbacks :: proc "c" (n : GLsizei, ids : ^GLuint) { impl_DeleteTransformFeedbacks(n, ids); };
	 GenTransformFeedbacks :: proc "c" (n : GLsizei, ids : ^GLuint) { impl_GenTransformFeedbacks(n, ids); };
	 PauseTransformFeedback :: proc "c" () { impl_PauseTransformFeedback(); };
	 ResumeTransformFeedback :: proc "c" () { impl_ResumeTransformFeedback(); };
	 DrawTransformFeedback :: proc "c" (mode : GLenum, id : GLuint) { impl_DrawTransformFeedback(cast(u32)mode, id); };
	 DrawTransformFeedbackStream :: proc "c" (mode : GLenum, id : GLuint, stream : GLuint) { impl_DrawTransformFeedbackStream(cast(u32)mode, id, stream); };
	 BeginQueryIndexed :: proc "c" (target : GLenum, index : GLuint, id : GLuint) { impl_BeginQueryIndexed(cast(u32)target, index, id); };
	 EndQueryIndexed :: proc "c" (target : GLenum, index : GLuint) { impl_EndQueryIndexed(cast(u32)target, index); };
	 GetQueryIndexediv :: proc "c" (target : GLenum, index : GLuint, pname : GLenum, params : ^GLint) { impl_GetQueryIndexediv(cast(u32)target, index, cast(u32)pname, params); };
	 MakeTextureHandleResidentARB :: proc "c" (handle : GLuint64) { impl_MakeTextureHandleResidentARB(handle); };
	 MakeImageHandleResidentARB :: proc "c" (handle : GLuint64, access : GLenum) { impl_MakeImageHandleResidentARB(handle, cast(u32)access); };
	 MakeTextureHandleNonResidentARB :: proc "c" (handle : GLuint64) { impl_MakeTextureHandleNonResidentARB(handle); };
	 MakeImageHandleNonResidentARB :: proc "c" (handle : GLuint64) { impl_MakeImageHandleNonResidentARB(handle); };
// VERSION_4_1
	 ReleaseShaderCompiler :: proc "c" () { impl_ReleaseShaderCompiler(); };
	 ShaderBinary :: proc "c" (count : GLsizei, shaders : ^GLuint, binaryFormat : GLenum, binary : rawptr, length : GLsizei) { impl_ShaderBinary(count, shaders, cast(u32)binaryFormat, binary, length); };
	 GetShaderPrecisionFormat :: proc "c" (shadertype : GLenum, precisiontype : GLenum, range : ^GLint, precision : ^GLint) { impl_GetShaderPrecisionFormat(cast(u32)shadertype, cast(u32)precisiontype, range, precision); };
	 DepthRangef :: proc "c" (n : GLfloat, f : GLfloat) { impl_DepthRangef(n, f); };
	 ClearDepthf :: proc "c" (d : GLfloat) { impl_ClearDepthf(d); };
	 GetProgramBinary :: proc "c" (program : GLuint, bufSize : GLsizei, length : ^GLsizei, binaryFormat : ^GLenum, binary : rawptr) { impl_GetProgramBinary(program, bufSize, length, cast(^u32)binaryFormat, binary); };
	 ProgramBinary :: proc "c" (program : GLuint, binaryFormat : GLenum, binary : rawptr, length : GLsizei) { impl_ProgramBinary(program, cast(u32)binaryFormat, binary, length); };
	 ProgramParameteri :: proc "c" (program : GLuint, pname : GLenum, value : GLint) { impl_ProgramParameteri(program, cast(u32)pname, value); };
	 UseProgramStages :: proc "c" (pipeline : GLuint, stages : GLbitfield, program : GLuint) { impl_UseProgramStages(pipeline, cast(u32)stages, program); };
	 ActiveShaderProgram :: proc "c" (pipeline : GLuint, program : GLuint) { impl_ActiveShaderProgram(pipeline, program); };
	 BindProgramPipeline :: proc "c" (pipeline : GLuint) { impl_BindProgramPipeline(pipeline); };
	 DeleteProgramPipelines :: proc "c" (n : GLsizei, pipelines : ^GLuint) { impl_DeleteProgramPipelines(n, pipelines); };
	 GenProgramPipelines :: proc "c" (n : GLsizei, pipelines : ^GLuint) { impl_GenProgramPipelines(n, pipelines); };
	 GetProgramPipelineiv :: proc "c" (pipeline : GLuint, pname : GLenum, params : ^GLint) { impl_GetProgramPipelineiv(pipeline, cast(u32)pname, params); };
	 ProgramUniform1i :: proc "c" (program : GLuint, location : GLint, v0 : GLint) { impl_ProgramUniform1i(program, location, v0); };
	 ProgramUniform1iv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLint) { impl_ProgramUniform1iv(program, location, count, value); };
	 ProgramUniform1f :: proc "c" (program : GLuint, location : GLint, v0 : GLfloat) { impl_ProgramUniform1f(program, location, v0); };
	 ProgramUniform1fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLfloat) { impl_ProgramUniform1fv(program, location, count, value); };
	 ProgramUniform1d :: proc "c" (program : GLuint, location : GLint, v0 : GLdouble) { impl_ProgramUniform1d(program, location, v0); };
	 ProgramUniform1dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLdouble) { impl_ProgramUniform1dv(program, location, count, value); };
	 ProgramUniform1ui :: proc "c" (program : GLuint, location : GLint, v0 : GLuint) { impl_ProgramUniform1ui(program, location, v0); };
	 ProgramUniform1uiv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLuint) { impl_ProgramUniform1uiv(program, location, count, value); };
	 ProgramUniform2i :: proc "c" (program : GLuint, location : GLint, v0 : GLint, v1 : GLint) { impl_ProgramUniform2i(program, location, v0, v1); };
	 ProgramUniform2iv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLint) { impl_ProgramUniform2iv(program, location, count, value); };
	 ProgramUniform2f :: proc "c" (program : GLuint, location : GLint, v0 : GLfloat, v1 : GLfloat) { impl_ProgramUniform2f(program, location, v0, v1); };
	 ProgramUniform2fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLfloat) { impl_ProgramUniform2fv(program, location, count, value); };
	 ProgramUniform2d :: proc "c" (program : GLuint, location : GLint, v0 : GLdouble, v1 : GLdouble) { impl_ProgramUniform2d(program, location, v0, v1); };
	 ProgramUniform2dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLdouble) { impl_ProgramUniform2dv(program, location, count, value); };
	 ProgramUniform2ui :: proc "c" (program : GLuint, location : GLint, v0 : GLuint, v1 : GLuint) { impl_ProgramUniform2ui(program, location, v0, v1); };
	 ProgramUniform2uiv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLuint) { impl_ProgramUniform2uiv(program, location, count, value); };
	 ProgramUniform3i :: proc "c" (program : GLuint, location : GLint, v0 : GLint, v1 : GLint, v2 : GLint) { impl_ProgramUniform3i(program, location, v0, v1, v2); };
	 ProgramUniform3iv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLint) { impl_ProgramUniform3iv(program, location, count, value); };
	 ProgramUniform3f :: proc "c" (program : GLuint, location : GLint, v0 : GLfloat, v1 : GLfloat, v2 : GLfloat) { impl_ProgramUniform3f(program, location, v0, v1, v2); };
	 ProgramUniform3fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLfloat) { impl_ProgramUniform3fv(program, location, count, value); };
	 ProgramUniform3d :: proc "c" (program : GLuint, location : GLint, v0 : GLdouble, v1 : GLdouble, v2 : GLdouble) { impl_ProgramUniform3d(program, location, v0, v1, v2); };
	 ProgramUniform3dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLdouble) { impl_ProgramUniform3dv(program, location, count, value); };
	 ProgramUniform3ui :: proc "c" (program : GLuint, location : GLint, v0 : GLuint, v1 : GLuint, v2 : GLuint) { impl_ProgramUniform3ui(program, location, v0, v1, v2); };
	 ProgramUniform3uiv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLuint) { impl_ProgramUniform3uiv(program, location, count, value); };
	 ProgramUniform4i :: proc "c" (program : GLuint, location : GLint, v0 : GLint, v1 : GLint, v2 : GLint, v3 : GLint) { impl_ProgramUniform4i(program, location, v0, v1, v2, v3); };
	 ProgramUniform4iv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLint) { impl_ProgramUniform4iv(program, location, count, value); };
	 ProgramUniform4f :: proc "c" (program : GLuint, location : GLint, v0 : GLfloat, v1 : GLfloat, v2 : GLfloat, v3 : GLfloat) { impl_ProgramUniform4f(program, location, v0, v1, v2, v3); };
	 ProgramUniform4fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLfloat) { impl_ProgramUniform4fv(program, location, count, value); };
	 ProgramUniform4d :: proc "c" (program : GLuint, location : GLint, v0 : GLdouble, v1 : GLdouble, v2 : GLdouble, v3 : GLdouble) { impl_ProgramUniform4d(program, location, v0, v1, v2, v3); };
	 ProgramUniform4dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLdouble) { impl_ProgramUniform4dv(program, location, count, value); };
	 ProgramUniform4ui :: proc "c" (program : GLuint, location : GLint, v0 : GLuint, v1 : GLuint, v2 : GLuint, v3 : GLuint) { impl_ProgramUniform4ui(program, location, v0, v1, v2, v3); };
	 ProgramUniform4uiv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, value : ^GLuint) { impl_ProgramUniform4uiv(program, location, count, value); };
	 ProgramUniformMatrix2fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_ProgramUniformMatrix2fv(program, location, count, transpose, value); };
	 ProgramUniformMatrix3fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_ProgramUniformMatrix3fv(program, location, count, transpose, value); };
	 ProgramUniformMatrix4fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_ProgramUniformMatrix4fv(program, location, count, transpose, value); };
	 ProgramUniformMatrix2dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_ProgramUniformMatrix2dv(program, location, count, transpose, value); };
	 ProgramUniformMatrix3dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_ProgramUniformMatrix3dv(program, location, count, transpose, value); };
	 ProgramUniformMatrix4dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_ProgramUniformMatrix4dv(program, location, count, transpose, value); };
	 ProgramUniformMatrix2x3fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_ProgramUniformMatrix2x3fv(program, location, count, transpose, value); };
	 ProgramUniformMatrix3x2fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_ProgramUniformMatrix3x2fv(program, location, count, transpose, value); };
	 ProgramUniformMatrix2x4fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_ProgramUniformMatrix2x4fv(program, location, count, transpose, value); };
	 ProgramUniformMatrix4x2fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_ProgramUniformMatrix4x2fv(program, location, count, transpose, value); };
	 ProgramUniformMatrix3x4fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_ProgramUniformMatrix3x4fv(program, location, count, transpose, value); };
	 ProgramUniformMatrix4x3fv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLfloat) { impl_ProgramUniformMatrix4x3fv(program, location, count, transpose, value); };
	 ProgramUniformMatrix2x3dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_ProgramUniformMatrix2x3dv(program, location, count, transpose, value); };
	 ProgramUniformMatrix3x2dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_ProgramUniformMatrix3x2dv(program, location, count, transpose, value); };
	 ProgramUniformMatrix2x4dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_ProgramUniformMatrix2x4dv(program, location, count, transpose, value); };
	 ProgramUniformMatrix4x2dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_ProgramUniformMatrix4x2dv(program, location, count, transpose, value); };
	 ProgramUniformMatrix3x4dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_ProgramUniformMatrix3x4dv(program, location, count, transpose, value); };
	 ProgramUniformMatrix4x3dv :: proc "c" (program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : ^GLdouble) { impl_ProgramUniformMatrix4x3dv(program, location, count, transpose, value); };
	 ValidateProgramPipeline :: proc "c" (pipeline : GLuint) { impl_ValidateProgramPipeline(pipeline); };
	 GetProgramPipelineInfoLog :: proc "c" (pipeline : GLuint, bufSize : GLsizei, length : ^GLsizei, infoLog : GLoutstring) { impl_GetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog); };
	 VertexAttribL1d :: proc "c" (index : GLuint, x : GLdouble) { impl_VertexAttribL1d(index, x); };
	 VertexAttribL2d :: proc "c" (index : GLuint, x : GLdouble, y : GLdouble) { impl_VertexAttribL2d(index, x, y); };
	 VertexAttribL3d :: proc "c" (index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble) { impl_VertexAttribL3d(index, x, y, z); };
	 VertexAttribL4d :: proc "c" (index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble) { impl_VertexAttribL4d(index, x, y, z, w); };
	 VertexAttribL1dv :: proc "c" (index : GLuint, v : ^GLdouble) { impl_VertexAttribL1dv(index, v); };
	 VertexAttribL2dv :: proc "c" (index : GLuint, v : ^GLdouble) { impl_VertexAttribL2dv(index, v); };
	 VertexAttribL3dv :: proc "c" (index : GLuint, v : ^GLdouble) { impl_VertexAttribL3dv(index, v); };
	 VertexAttribL4dv :: proc "c" (index : GLuint, v : ^GLdouble) { impl_VertexAttribL4dv(index, v); };
	 VertexAttribLPointer :: proc "c" (index : GLuint, size : GLint, type : GLenum, stride : GLsizei, pointer : uintptr) { impl_VertexAttribLPointer(index, size, cast(u32)type, stride, pointer); };
	 GetVertexAttribLdv :: proc "c" (index : GLuint, pname : GLenum, params : ^GLdouble) { impl_GetVertexAttribLdv(index, cast(u32)pname, params); };
	 ViewportArrayv :: proc "c" (first : GLuint, count : GLsizei, v : ^GLfloat) { impl_ViewportArrayv(first, count, v); };
	 ViewportIndexedf :: proc "c" (index : GLuint, x : GLfloat, y : GLfloat, w : GLfloat, h : GLfloat) { impl_ViewportIndexedf(index, x, y, w, h); };
	 ViewportIndexedfv :: proc "c" (index : GLuint, v : ^GLfloat) { impl_ViewportIndexedfv(index, v); };
	 ScissorArrayv :: proc "c" (first : GLuint, count : GLsizei, v : ^GLint) { impl_ScissorArrayv(first, count, v); };
	 ScissorIndexed :: proc "c" (index : GLuint, left : GLint, bottom : GLint, width : GLsizei, height : GLsizei) { impl_ScissorIndexed(index, left, bottom, width, height); };
	 ScissorIndexedv :: proc "c" (index : GLuint, v : ^GLint) { impl_ScissorIndexedv(index, v); };
	 DepthRangeArrayv :: proc "c" (first : GLuint, count : GLsizei, v : ^GLdouble) { impl_DepthRangeArrayv(first, count, v); };
	 DepthRangeIndexed :: proc "c" (index : GLuint, n : GLdouble, f : GLdouble) { impl_DepthRangeIndexed(index, n, f); };
	 GetFloati_v :: proc "c" (target : GLenum, index : GLuint, data : ^GLfloat) { impl_GetFloati_v(cast(u32)target, index, data); };
	 GetDoublei_v :: proc "c" (target : GLenum, index : GLuint, data : ^GLdouble) { impl_GetDoublei_v(cast(u32)target, index, data); };
// VERSION_4_2
	 DrawArraysInstancedBaseInstance :: proc "c" (mode : GLenum, first : GLint, count : GLsizei, instancecount : GLsizei, baseinstance : GLuint) { impl_DrawArraysInstancedBaseInstance(cast(u32)mode, first, count, instancecount, baseinstance); };
	 DrawElementsInstancedBaseInstance :: proc "c" (mode : GLenum, count : GLsizei, type : GLenum, indices : rawptr, instancecount : GLsizei, baseinstance : GLuint) { impl_DrawElementsInstancedBaseInstance(cast(u32)mode, count, cast(u32)type, indices, instancecount, baseinstance); };
	 DrawElementsInstancedBaseVertexBaseInstance :: proc "c" (mode : GLenum, count : GLsizei, type : GLenum, indices : rawptr, instancecount : GLsizei, basevertex : GLint, baseinstance : GLuint) { impl_DrawElementsInstancedBaseVertexBaseInstance(cast(u32)mode, count, cast(u32)type, indices, instancecount, basevertex, baseinstance); };
	 GetInternalformativ :: proc "c" (target : GLenum, internalformat : GLenum, pname : GLenum, bufSize : GLsizei, params : ^GLint) { impl_GetInternalformativ(cast(u32)target, cast(u32)internalformat, cast(u32)pname, bufSize, params); };
	 GetActiveAtomicCounterBufferiv :: proc "c" (program : GLuint, bufferIndex : GLuint, pname : GLenum, params : ^GLint) { impl_GetActiveAtomicCounterBufferiv(program, bufferIndex, cast(u32)pname, params); };
	 BindImageTexture :: proc "c" (unit : GLuint, texture : GLuint, level : GLint, layered : GLboolean, layer : GLint, access : GLenum, format : GLenum) { impl_BindImageTexture(unit, texture, level, layered, layer, cast(u32)access, cast(u32)format); };
	 MemoryBarrier :: proc "c" (barriers : GLbitfield) { impl_MemoryBarrier(cast(u32)barriers); };
	 TexStorage1D :: proc "c" (target : GLenum, levels : GLsizei, internalformat : GLenum, width : GLsizei) { impl_TexStorage1D(cast(u32)target, levels, cast(u32)internalformat, width); };
	 TexStorage2D :: proc "c" (target : GLenum, levels : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei) { impl_TexStorage2D(cast(u32)target, levels, cast(u32)internalformat, width, height); };
	 TexStorage3D :: proc "c" (target : GLenum, levels : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei) { impl_TexStorage3D(cast(u32)target, levels, cast(u32)internalformat, width, height, depth); };
	 DrawTransformFeedbackInstanced :: proc "c" (mode : GLenum, id : GLuint, instancecount : GLsizei) { impl_DrawTransformFeedbackInstanced(cast(u32)mode, id, instancecount); };
	 DrawTransformFeedbackStreamInstanced :: proc "c" (mode : GLenum, id : GLuint, stream : GLuint, instancecount : GLsizei) { impl_DrawTransformFeedbackStreamInstanced(cast(u32)mode, id, stream, instancecount); };
// VERSION_4_3
	 ClearBufferData :: proc "c" (target : GLenum, internalformat : GLenum, format : GLenum, type : GLenum, data : rawptr) { impl_ClearBufferData(cast(u32)target, cast(u32)internalformat, cast(u32)format, cast(u32)type, data); };
	 ClearBufferSubData :: proc "c" (target : GLenum, internalformat : GLenum, offset : GLintptr, size : GLsizeiptr, format : GLenum, type : GLenum, data : rawptr) { impl_ClearBufferSubData(cast(u32)target, cast(u32)internalformat, offset, size, cast(u32)format, cast(u32)type, data); };
	 DispatchCompute :: proc "c" (num_groups_x : GLuint, num_groups_y : GLuint, num_groups_z : GLuint) { impl_DispatchCompute(num_groups_x, num_groups_y, num_groups_z); };
	 DispatchComputeIndirect :: proc "c" (indirect : ^DispatchIndirectCommand) { impl_DispatchComputeIndirect(indirect); };
	 CopyImageSubData :: proc "c" (srcName : GLuint, srcTarget : GLenum, srcLevel : GLint, srcX : GLint, srcY : GLint, srcZ : GLint, dstName : GLuint, dstTarget : GLenum, dstLevel : GLint, dstX : GLint, dstY : GLint, dstZ : GLint, srcWidth : GLsizei, srcHeight : GLsizei, srcDepth : GLsizei) { impl_CopyImageSubData(srcName, cast(u32)srcTarget, srcLevel, srcX, srcY, srcZ, dstName, cast(u32)dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); };
	 FramebufferParameteri :: proc "c" (target : GLenum, pname : GLenum, param : GLint) { impl_FramebufferParameteri(cast(u32)target, cast(u32)pname, param); };
	 GetFramebufferParameteriv :: proc "c" (target : GLenum, pname : GLenum, params : ^GLint) { impl_GetFramebufferParameteriv(cast(u32)target, cast(u32)pname, params); };
	 GetInternalformati64v :: proc "c" (target : GLenum, internalformat : GLenum, pname : GLenum, bufSize : GLsizei, params : ^GLint64) { impl_GetInternalformati64v(cast(u32)target, cast(u32)internalformat, cast(u32)pname, bufSize, params); };
	 InvalidateTexSubImage :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei) { impl_InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth); };
	 InvalidateTexImage :: proc "c" (texture : GLuint, level : GLint) { impl_InvalidateTexImage(texture, level); };
	 InvalidateBufferSubData :: proc "c" (buffer : GLuint, offset : GLintptr, length : GLsizeiptr) { impl_InvalidateBufferSubData(buffer, offset, length); };
	 InvalidateBufferData :: proc "c" (buffer : GLuint) { impl_InvalidateBufferData(buffer); };
	 InvalidateFramebuffer :: proc "c" (target : GLenum, numAttachments : GLsizei, attachments : ^GLenum) { impl_InvalidateFramebuffer(cast(u32)target, numAttachments, cast(^u32)attachments); };
	 InvalidateSubFramebuffer :: proc "c" (target : GLenum, numAttachments : GLsizei, attachments : ^GLenum, x : GLint, y : GLint, width : GLsizei, height : GLsizei) { impl_InvalidateSubFramebuffer(cast(u32)target, numAttachments, cast(^u32)attachments, x, y, width, height); };
	 MultiDrawArraysIndirect :: proc "c" (mode : GLenum, indirect : ^DrawArraysIndirectCommand, drawcount : GLsizei, stride : GLsizei) { impl_MultiDrawArraysIndirect(cast(u32)mode, indirect, drawcount, stride); };
	 MultiDrawElementsIndirect :: proc "c" (mode : GLenum, type : GLenum, indirect : ^DrawElementsIndirectCommand, drawcount : GLsizei, stride : GLsizei) { impl_MultiDrawElementsIndirect(cast(u32)mode, cast(u32)type, indirect, drawcount, stride); };
	 GetProgramInterfaceiv :: proc "c" (program : GLuint, programInterface : GLenum, pname : GLenum, params : ^GLint) { impl_GetProgramInterfaceiv(program, cast(u32)programInterface, cast(u32)pname, params); };
	 GetProgramResourceName :: proc "c" (program : GLuint, programInterface : GLenum, index : GLuint, bufSize : GLsizei, length : ^GLsizei, name : GLstring) { impl_GetProgramResourceName(program, cast(u32)programInterface, index, bufSize, length, name); };
	 GetProgramResourceiv :: proc "c" (program : GLuint, programInterface : GLenum, index : GLuint, propCount : GLsizei, props : ^GLenum, bufSize : GLsizei, length : ^GLsizei, params : ^GLint) { impl_GetProgramResourceiv(program, cast(u32)programInterface, index, propCount, cast(^u32)props, bufSize, length, params); };
	 ShaderStorageBlockBinding :: proc "c" (program : GLuint, storageBlockIndex : GLuint, storageBlockBinding : GLuint) { impl_ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding); };
	 TexBufferRange :: proc "c" (target : GLenum, internalformat : GLenum, buffer : GLuint, offset : GLintptr, size : GLsizeiptr) { impl_TexBufferRange(cast(u32)target, cast(u32)internalformat, buffer, offset, size); };
	 TexStorage2DMultisample :: proc "c" (target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, fixedsamplelocations : GLboolean) { impl_TexStorage2DMultisample(cast(u32)target, samples, cast(u32)internalformat, width, height, fixedsamplelocations); };
	 TexStorage3DMultisample :: proc "c" (target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, fixedsamplelocations : GLboolean) { impl_TexStorage3DMultisample(cast(u32)target, samples, cast(u32)internalformat, width, height, depth, fixedsamplelocations); };
	 TextureView :: proc "c" (texture : GLuint, target : GLenum, origtexture : GLuint, internalformat : GLenum, minlevel : GLuint, numlevels : GLuint, minlayer : GLuint, numlayers : GLuint) { impl_TextureView(texture, cast(u32)target, origtexture, cast(u32)internalformat, minlevel, numlevels, minlayer, numlayers); };
	 BindVertexBuffer :: proc "c" (bindingindex : GLuint, buffer : GLuint, offset : GLintptr, stride : GLsizei) { impl_BindVertexBuffer(bindingindex, buffer, offset, stride); };
	 VertexAttribFormat :: proc "c" (attribindex : GLuint, size : GLint, type : GLenum, normalized : GLboolean, relativeoffset : GLuint) { impl_VertexAttribFormat(attribindex, size, cast(u32)type, normalized, relativeoffset); };
	 VertexAttribIFormat :: proc "c" (attribindex : GLuint, size : GLint, type : GLenum, relativeoffset : GLuint) { impl_VertexAttribIFormat(attribindex, size, cast(u32)type, relativeoffset); };
	 VertexAttribLFormat :: proc "c" (attribindex : GLuint, size : GLint, type : GLenum, relativeoffset : GLuint) { impl_VertexAttribLFormat(attribindex, size, cast(u32)type, relativeoffset); };
	 VertexAttribBinding :: proc "c" (attribindex : GLuint, bindingindex : GLuint) { impl_VertexAttribBinding(attribindex, bindingindex); };
	 VertexBindingDivisor :: proc "c" (bindingindex : GLuint, divisor : GLuint) { impl_VertexBindingDivisor(bindingindex, divisor); };
	 DebugMessageControl :: proc "c" (source : GLenum, type : GLenum, severity : GLenum, count : GLsizei, ids : ^GLuint, enabled : GLboolean) { impl_DebugMessageControl(cast(u32)source, cast(u32)type, cast(u32)severity, count, ids, enabled); };
	 DebugMessageInsert :: proc "c" (source : GLenum, type : GLenum, id : GLuint, severity : GLenum, length : GLsizei, buf : GLstring) { impl_DebugMessageInsert(cast(u32)source, cast(u32)type, id, cast(u32)severity, length, buf); };
	 DebugMessageCallback :: proc "c" (callback : GLdebugproc, userParam : rawptr) { impl_DebugMessageCallback(callback, userParam); };
	 PushDebugGroup :: proc "c" (source : GLenum, id : GLuint, length : GLsizei, message : GLstring) { impl_PushDebugGroup(cast(u32)source, id, length, message); };
	 PopDebugGroup :: proc "c" () { impl_PopDebugGroup(); };
	 ObjectLabel :: proc "c" (identifier : GLenum, name : GLuint, length : GLsizei, label : GLstring) { impl_ObjectLabel(cast(u32)identifier, name, length, label); };
	 GetObjectLabel :: proc "c" (identifier : GLenum, name : GLuint, bufSize : GLsizei, length : ^GLsizei, label : GLoutstring) { impl_GetObjectLabel(cast(u32)identifier, name, bufSize, length, label); };
	 ObjectPtrLabel :: proc "c" (ptr : rawptr, length : GLsizei, label : GLstring) { impl_ObjectPtrLabel(ptr, length, label); };
	 GetObjectPtrLabel :: proc "c" (ptr : rawptr, bufSize : GLsizei, length : ^GLsizei, label : GLoutstring) { impl_GetObjectPtrLabel(ptr, bufSize, length, label); };
// VERSION_4_4
	 BufferStorage :: proc "c" (target : GLenum, size : GLsizeiptr, data : rawptr, flags : GLbitfield) { impl_BufferStorage(cast(u32)target, size, data, cast(u32)flags); };
	 ClearTexImage :: proc "c" (texture : GLuint, level : GLint, format : GLenum, type : GLenum, data : rawptr) { impl_ClearTexImage(texture, level, cast(u32)format, cast(u32)type, data); };
	 ClearTexSubImage :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, type : GLenum, data : rawptr) { impl_ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, cast(u32)format, cast(u32)type, data); };
	 BindBuffersBase :: proc "c" (target : GLenum, first : GLuint, count : GLsizei, buffers : ^GLuint) { impl_BindBuffersBase(cast(u32)target, first, count, buffers); };
	 BindBuffersRange :: proc "c" (target : GLenum, first : GLuint, count : GLsizei, buffers : ^GLuint, offsets : ^GLintptr, sizes : ^GLsizeiptr) { impl_BindBuffersRange(cast(u32)target, first, count, buffers, offsets, sizes); };
	 BindTextures :: proc "c" (first : GLuint, count : GLsizei, textures : ^GLuint) { impl_BindTextures(first, count, textures); };
	 BindSamplers :: proc "c" (first : GLuint, count : GLsizei, samplers : ^GLuint) { impl_BindSamplers(first, count, samplers); };
	 BindImageTextures :: proc "c" (first : GLuint, count : GLsizei, textures : ^GLuint) { impl_BindImageTextures(first, count, textures); };
	 BindVertexBuffers :: proc "c" (first : GLuint, count : GLsizei, buffers : ^GLuint, offsets : ^GLintptr, strides : ^GLsizei) { impl_BindVertexBuffers(first, count, buffers, offsets, strides); };
// VERSION_4_5
	 ClipControl :: proc "c" (origin : GLenum, depth : GLenum) { impl_ClipControl(cast(u32)origin, cast(u32)depth); };
	 CreateTransformFeedbacks :: proc "c" (n : GLsizei, ids : ^GLuint) { impl_CreateTransformFeedbacks(n, ids); };
	 TransformFeedbackBufferBase :: proc "c" (xfb : GLuint, index : GLuint, buffer : GLuint) { impl_TransformFeedbackBufferBase(xfb, index, buffer); };
	 TransformFeedbackBufferRange :: proc "c" (xfb : GLuint, index : GLuint, buffer : GLuint, offset : GLintptr, size : GLsizeiptr) { impl_TransformFeedbackBufferRange(xfb, index, buffer, offset, size); };
	 GetTransformFeedbackiv :: proc "c" (xfb : GLuint, pname : GLenum, param : ^GLint) { impl_GetTransformFeedbackiv(xfb, cast(u32)pname, param); };
	 GetTransformFeedbacki_v :: proc "c" (xfb : GLuint, pname : GLenum, index : GLuint, param : ^GLint) { impl_GetTransformFeedbacki_v(xfb, cast(u32)pname, index, param); };
	 GetTransformFeedbacki64_v :: proc "c" (xfb : GLuint, pname : GLenum, index : GLuint, param : ^GLint64) { impl_GetTransformFeedbacki64_v(xfb, cast(u32)pname, index, param); };
	 CreateBuffers :: proc "c" (n : GLsizei, buffers : ^GLuint) { impl_CreateBuffers(n, buffers); };
	 NamedBufferStorage :: proc "c" (buffer : GLuint, size : GLsizeiptr, data : rawptr, flags : GLbitfield) { impl_NamedBufferStorage(buffer, size, data, cast(u32)flags); };
	 NamedBufferData :: proc "c" (buffer : GLuint, size : GLsizeiptr, data : rawptr, usage : GLenum) { impl_NamedBufferData(buffer, size, data, cast(u32)usage); };
	 NamedBufferSubData :: proc "c" (buffer : GLuint, offset : GLintptr, size : GLsizeiptr, data : rawptr) { impl_NamedBufferSubData(buffer, offset, size, data); };
	 CopyNamedBufferSubData :: proc "c" (readBuffer : GLuint, writeBuffer : GLuint, readOffset : GLintptr, writeOffset : GLintptr, size : GLsizeiptr) { impl_CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size); };
	 ClearNamedBufferData :: proc "c" (buffer : GLuint, internalformat : GLenum, format : GLenum, type : GLenum, data : rawptr) { impl_ClearNamedBufferData(buffer, cast(u32)internalformat, cast(u32)format, cast(u32)type, data); };
	 ClearNamedBufferSubData :: proc "c" (buffer : GLuint, internalformat : GLenum, offset : GLintptr, size : GLsizeiptr, format : GLenum, type : GLenum, data : rawptr) { impl_ClearNamedBufferSubData(buffer, cast(u32)internalformat, offset, size, cast(u32)format, cast(u32)type, data); };
	 FlushMappedNamedBufferRange :: proc "c" (buffer : GLuint, offset : GLintptr, length : GLsizeiptr) { impl_FlushMappedNamedBufferRange(buffer, offset, length); };
	 GetNamedBufferParameteriv :: proc "c" (buffer : GLuint, pname : GLenum, params : ^GLint) { impl_GetNamedBufferParameteriv(buffer, cast(u32)pname, params); };
	 GetNamedBufferParameteri64v :: proc "c" (buffer : GLuint, pname : GLenum, params : ^GLint64) { impl_GetNamedBufferParameteri64v(buffer, cast(u32)pname, params); };
	 GetNamedBufferPointerv :: proc "c" (buffer : GLuint, pname : GLenum, params : ^rawptr) { impl_GetNamedBufferPointerv(buffer, cast(u32)pname, params); };
	 GetNamedBufferSubData :: proc "c" (buffer : GLuint, offset : GLintptr, size : GLsizeiptr, data : rawptr) { impl_GetNamedBufferSubData(buffer, offset, size, data); };
	 CreateFramebuffers :: proc "c" (n : GLsizei, framebuffers : ^GLuint) { impl_CreateFramebuffers(n, framebuffers); };
	 NamedFramebufferRenderbuffer :: proc "c" (framebuffer : GLuint, attachment : GLenum, renderbuffertarget : GLenum, renderbuffer : GLuint) { impl_NamedFramebufferRenderbuffer(framebuffer, cast(u32)attachment, cast(u32)renderbuffertarget, renderbuffer); };
	 NamedFramebufferParameteri :: proc "c" (framebuffer : GLuint, pname : GLenum, param : GLint) { impl_NamedFramebufferParameteri(framebuffer, cast(u32)pname, param); };
	 NamedFramebufferTexture :: proc "c" (framebuffer : GLuint, attachment : GLenum, texture : GLuint, level : GLint) { impl_NamedFramebufferTexture(framebuffer, cast(u32)attachment, texture, level); };
	 NamedFramebufferTextureLayer :: proc "c" (framebuffer : GLuint, attachment : GLenum, texture : GLuint, level : GLint, layer : GLint) { impl_NamedFramebufferTextureLayer(framebuffer, cast(u32)attachment, texture, level, layer); };
	 NamedFramebufferDrawBuffer :: proc "c" (framebuffer : GLuint, buf : GLenum) { impl_NamedFramebufferDrawBuffer(framebuffer, cast(u32)buf); };
	 NamedFramebufferDrawBuffers :: proc "c" (framebuffer : GLuint, n : GLsizei, bufs : ^GLenum) { impl_NamedFramebufferDrawBuffers(framebuffer, n, cast(^u32)bufs); };
	 NamedFramebufferReadBuffer :: proc "c" (framebuffer : GLuint, src : GLenum) { impl_NamedFramebufferReadBuffer(framebuffer, cast(u32)src); };
	 InvalidateNamedFramebufferData :: proc "c" (framebuffer : GLuint, numAttachments : GLsizei, attachments : ^GLenum) { impl_InvalidateNamedFramebufferData(framebuffer, numAttachments, cast(^u32)attachments); };
	 InvalidateNamedFramebufferSubData :: proc "c" (framebuffer : GLuint, numAttachments : GLsizei, attachments : ^GLenum, x : GLint, y : GLint, width : GLsizei, height : GLsizei) { impl_InvalidateNamedFramebufferSubData(framebuffer, numAttachments, cast(^u32)attachments, x, y, width, height); };
	 ClearNamedFramebufferiv :: proc "c" (framebuffer : GLuint, buffer : GLenum, drawbuffer : GLint, value : ^GLint) { impl_ClearNamedFramebufferiv(framebuffer, cast(u32)buffer, drawbuffer, value); };
	 ClearNamedFramebufferuiv :: proc "c" (framebuffer : GLuint, buffer : GLenum, drawbuffer : GLint, value : ^GLuint) { impl_ClearNamedFramebufferuiv(framebuffer, cast(u32)buffer, drawbuffer, value); };
	 ClearNamedFramebufferfv :: proc "c" (framebuffer : GLuint, buffer : GLenum, drawbuffer : GLint, value : ^GLfloat) { impl_ClearNamedFramebufferfv(framebuffer, cast(u32)buffer, drawbuffer, value); };
	 ClearNamedFramebufferfi :: proc "c" (framebuffer : GLuint, buffer : GLenum, drawbuffer : GLint, depth : GLfloat, stencil : GLint) { impl_ClearNamedFramebufferfi(framebuffer, cast(u32)buffer, drawbuffer, depth, stencil); };
	 BlitNamedFramebuffer :: proc "c" (srcFramebuffer : GLuint, dstFramebuffer : GLuint, srcX0 : GLint, srcY0 : GLint, srcX1 : GLint, srcY1 : GLint, dstX0 : GLint, dstY0 : GLint, dstX1 : GLint, dstY1 : GLint, mask : GLbitfield, filter : GLenum) { impl_BlitNamedFramebuffer(srcFramebuffer, dstFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, cast(u32)mask, cast(u32)filter); };
	 GetNamedFramebufferParameteriv :: proc "c" (framebuffer : GLuint, pname : GLenum, param : ^GLint) { impl_GetNamedFramebufferParameteriv(framebuffer, cast(u32)pname, param); };
	 GetNamedFramebufferAttachmentParameteriv :: proc "c" (framebuffer : GLuint, attachment : GLenum, pname : GLenum, params : ^GLint) { impl_GetNamedFramebufferAttachmentParameteriv(framebuffer, cast(u32)attachment, cast(u32)pname, params); };
	 CreateRenderbuffers :: proc "c" (n : GLsizei, renderbuffers : ^GLuint) { impl_CreateRenderbuffers(n, renderbuffers); };
	 NamedRenderbufferStorage :: proc "c" (renderbuffer : GLuint, internalformat : GLenum, width : GLsizei, height : GLsizei) { impl_NamedRenderbufferStorage(renderbuffer, cast(u32)internalformat, width, height); };
	 NamedRenderbufferStorageMultisample :: proc "c" (renderbuffer : GLuint, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei) { impl_NamedRenderbufferStorageMultisample(renderbuffer, samples, cast(u32)internalformat, width, height); };
	 GetNamedRenderbufferParameteriv :: proc "c" (renderbuffer : GLuint, pname : GLenum, params : ^GLint) { impl_GetNamedRenderbufferParameteriv(renderbuffer, cast(u32)pname, params); };
	 CreateTextures :: proc "c" (target : GLenum, n : GLsizei, textures : ^GLuint) { impl_CreateTextures(cast(u32)target, n, textures); };
	 TextureBuffer :: proc "c" (texture : GLuint, internalformat : GLenum, buffer : GLuint) { impl_TextureBuffer(texture, cast(u32)internalformat, buffer); };
	 TextureBufferRange :: proc "c" (texture : GLuint, internalformat : GLenum, buffer : GLuint, offset : GLintptr, size : GLsizeiptr) { impl_TextureBufferRange(texture, cast(u32)internalformat, buffer, offset, size); };
	 TextureStorage1D :: proc "c" (texture : GLuint, levels : GLsizei, internalformat : GLenum, width : GLsizei) { impl_TextureStorage1D(texture, levels, cast(u32)internalformat, width); };
	 TextureStorage2D :: proc "c" (texture : GLuint, levels : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei) { impl_TextureStorage2D(texture, levels, cast(u32)internalformat, width, height); };
	 TextureStorage3D :: proc "c" (texture : GLuint, levels : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei) { impl_TextureStorage3D(texture, levels, cast(u32)internalformat, width, height, depth); };
	 TextureStorage2DMultisample :: proc "c" (texture : GLuint, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, fixedsamplelocations : GLboolean) { impl_TextureStorage2DMultisample(texture, samples, cast(u32)internalformat, width, height, fixedsamplelocations); };
	 TextureStorage3DMultisample :: proc "c" (texture : GLuint, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, fixedsamplelocations : GLboolean) { impl_TextureStorage3DMultisample(texture, samples, cast(u32)internalformat, width, height, depth, fixedsamplelocations); };
	 TextureSubImage1D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, type : GLenum, pixels : rawptr) { impl_TextureSubImage1D(texture, level, xoffset, width, cast(u32)format, cast(u32)type, pixels); };
	 TextureSubImage2D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, pixels : rawptr) { impl_TextureSubImage2D(texture, level, xoffset, yoffset, width, height, cast(u32)format, cast(u32)type, pixels); };
	 TextureSubImage3D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, type : GLenum, pixels : rawptr) { impl_TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, cast(u32)format, cast(u32)type, pixels); };
	 CompressedTextureSubImage1D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, imageSize : GLsizei, data : rawptr) { impl_CompressedTextureSubImage1D(texture, level, xoffset, width, cast(u32)format, imageSize, data); };
	 CompressedTextureSubImage2D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, imageSize : GLsizei, data : rawptr) { impl_CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, cast(u32)format, imageSize, data); };
	 CompressedTextureSubImage3D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, imageSize : GLsizei, data : rawptr) { impl_CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, cast(u32)format, imageSize, data); };
	 CopyTextureSubImage1D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, x : GLint, y : GLint, width : GLsizei) { impl_CopyTextureSubImage1D(texture, level, xoffset, x, y, width); };
	 CopyTextureSubImage2D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei) { impl_CopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height); };
	 CopyTextureSubImage3D :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei) { impl_CopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height); };
	 TextureParameterf :: proc "c" (texture : GLuint, pname : GLenum, param : GLfloat) { impl_TextureParameterf(texture, cast(u32)pname, param); };
	 TextureParameterfv :: proc "c" (texture : GLuint, pname : GLenum, param : ^GLfloat) { impl_TextureParameterfv(texture, cast(u32)pname, param); };
	 TextureParameteri :: proc "c" (texture : GLuint, pname : GLenum, param : GLint) { impl_TextureParameteri(texture, cast(u32)pname, param); };
	 TextureParameterIiv :: proc "c" (texture : GLuint, pname : GLenum, params : ^GLint) { impl_TextureParameterIiv(texture, cast(u32)pname, params); };
	 TextureParameterIuiv :: proc "c" (texture : GLuint, pname : GLenum, params : ^GLuint) { impl_TextureParameterIuiv(texture, cast(u32)pname, params); };
	 TextureParameteriv :: proc "c" (texture : GLuint, pname : GLenum, param : ^GLint) { impl_TextureParameteriv(texture, cast(u32)pname, param); };
	 GenerateTextureMipmap :: proc "c" (texture : GLuint) { impl_GenerateTextureMipmap(texture); };
	 BindTextureUnit :: proc "c" (unit : GLuint, texture : GLuint) { impl_BindTextureUnit(unit, texture); };
	 GetTextureImage :: proc "c" (texture : GLuint, level : GLint, format : GLenum, type : GLenum, bufSize : GLsizei, pixels : rawptr) { impl_GetTextureImage(texture, level, cast(u32)format, cast(u32)type, bufSize, pixels); };
	 GetCompressedTextureImage :: proc "c" (texture : GLuint, level : GLint, bufSize : GLsizei, pixels : rawptr) { impl_GetCompressedTextureImage(texture, level, bufSize, pixels); };
	 GetTextureLevelParameterfv :: proc "c" (texture : GLuint, level : GLint, pname : GLenum, params : ^GLfloat) { impl_GetTextureLevelParameterfv(texture, level, cast(u32)pname, params); };
	 GetTextureLevelParameteriv :: proc "c" (texture : GLuint, level : GLint, pname : GLenum, params : ^GLint) { impl_GetTextureLevelParameteriv(texture, level, cast(u32)pname, params); };
	 GetTextureParameterfv :: proc "c" (texture : GLuint, pname : GLenum, params : ^GLfloat) { impl_GetTextureParameterfv(texture, cast(u32)pname, params); };
	 GetTextureParameterIiv :: proc "c" (texture : GLuint, pname : GLenum, params : ^GLint) { impl_GetTextureParameterIiv(texture, cast(u32)pname, params); };
	 GetTextureParameterIuiv :: proc "c" (texture : GLuint, pname : GLenum, params : ^GLuint) { impl_GetTextureParameterIuiv(texture, cast(u32)pname, params); };
	 GetTextureParameteriv :: proc "c" (texture : GLuint, pname : GLenum, params : ^GLint) { impl_GetTextureParameteriv(texture, cast(u32)pname, params); };
	 CreateVertexArrays :: proc "c" (n : GLsizei, arrays : ^GLuint) { impl_CreateVertexArrays(n, arrays); };
	 DisableVertexArrayAttrib :: proc "c" (vaobj : GLuint, index : GLuint) { impl_DisableVertexArrayAttrib(vaobj, index); };
	 EnableVertexArrayAttrib :: proc "c" (vaobj : GLuint, index : GLuint) { impl_EnableVertexArrayAttrib(vaobj, index); };
	 VertexArrayElementBuffer :: proc "c" (vaobj : GLuint, buffer : GLuint) { impl_VertexArrayElementBuffer(vaobj, buffer); };
	 VertexArrayVertexBuffer :: proc "c" (vaobj : GLuint, bindingindex : GLuint, buffer : GLuint, offset : GLintptr, stride : GLsizei) { impl_VertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride); };
	 VertexArrayVertexBuffers :: proc "c" (vaobj : GLuint, first : GLuint, count : GLsizei, buffers : ^GLuint, offsets : ^GLintptr, strides : ^GLsizei) { impl_VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides); };
	 VertexArrayAttribBinding :: proc "c" (vaobj : GLuint, attribindex : GLuint, bindingindex : GLuint) { impl_VertexArrayAttribBinding(vaobj, attribindex, bindingindex); };
	 VertexArrayAttribFormat :: proc "c" (vaobj : GLuint, attribindex : GLuint, size : GLint, type : GLenum, normalized : GLboolean, relativeoffset : GLuint) { impl_VertexArrayAttribFormat(vaobj, attribindex, size, cast(u32)type, normalized, relativeoffset); };
	 VertexArrayAttribIFormat :: proc "c" (vaobj : GLuint, attribindex : GLuint, size : GLint, type : GLenum, relativeoffset : GLuint) { impl_VertexArrayAttribIFormat(vaobj, attribindex, size, cast(u32)type, relativeoffset); };
	 VertexArrayAttribLFormat :: proc "c" (vaobj : GLuint, attribindex : GLuint, size : GLint, type : GLenum, relativeoffset : GLuint) { impl_VertexArrayAttribLFormat(vaobj, attribindex, size, cast(u32)type, relativeoffset); };
	 VertexArrayBindingDivisor :: proc "c" (vaobj : GLuint, bindingindex : GLuint, divisor : GLuint) { impl_VertexArrayBindingDivisor(vaobj, bindingindex, divisor); };
	 GetVertexArrayiv :: proc "c" (vaobj : GLuint, pname : GLenum, param : ^GLint) { impl_GetVertexArrayiv(vaobj, cast(u32)pname, param); };
	 GetVertexArrayIndexediv :: proc "c" (vaobj : GLuint, index : GLuint, pname : GLenum, param : ^GLint) { impl_GetVertexArrayIndexediv(vaobj, index, cast(u32)pname, param); };
	 GetVertexArrayIndexed64iv :: proc "c" (vaobj : GLuint, index : GLuint, pname : GLenum, param : ^GLint64) { impl_GetVertexArrayIndexed64iv(vaobj, index, cast(u32)pname, param); };
	 CreateSamplers :: proc "c" (n : GLsizei, samplers : ^GLuint) { impl_CreateSamplers(n, samplers); };
	 CreateProgramPipelines :: proc "c" (n : GLsizei, pipelines : ^GLuint) { impl_CreateProgramPipelines(n, pipelines); };
	 CreateQueries :: proc "c" (target : GLenum, n : GLsizei, ids : ^GLuint) { impl_CreateQueries(cast(u32)target, n, ids); };
	 GetQueryBufferObjecti64v :: proc "c" (id : GLuint, buffer : GLuint, pname : GLenum, offset : GLintptr) { impl_GetQueryBufferObjecti64v(id, buffer, cast(u32)pname, offset); };
	 GetQueryBufferObjectiv :: proc "c" (id : GLuint, buffer : GLuint, pname : GLenum, offset : GLintptr) { impl_GetQueryBufferObjectiv(id, buffer, cast(u32)pname, offset); };
	 GetQueryBufferObjectui64v :: proc "c" (id : GLuint, buffer : GLuint, pname : GLenum, offset : GLintptr) { impl_GetQueryBufferObjectui64v(id, buffer, cast(u32)pname, offset); };
	 GetQueryBufferObjectuiv :: proc "c" (id : GLuint, buffer : GLuint, pname : GLenum, offset : GLintptr) { impl_GetQueryBufferObjectuiv(id, buffer, cast(u32)pname, offset); };
	 MemoryBarrierByRegion :: proc "c" (barriers : GLbitfield) { impl_MemoryBarrierByRegion(cast(u32)barriers); };
	 GetTextureSubImage :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, type : GLenum, bufSize : GLsizei, pixels : rawptr) { impl_GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, cast(u32)format, cast(u32)type, bufSize, pixels); };
	 GetCompressedTextureSubImage :: proc "c" (texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, bufSize : GLsizei, pixels : rawptr) { impl_GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels); };
	 GetnCompressedTexImage :: proc "c" (target : GLenum, lod : GLint, bufSize : GLsizei, pixels : rawptr) { impl_GetnCompressedTexImage(cast(u32)target, lod, bufSize, pixels); };
	 GetnTexImage :: proc "c" (target : GLenum, level : GLint, format : GLenum, type : GLenum, bufSize : GLsizei, pixels : rawptr) { impl_GetnTexImage(cast(u32)target, level, cast(u32)format, cast(u32)type, bufSize, pixels); };
	 GetnUniformdv :: proc "c" (program : GLuint, location : GLint, bufSize : GLsizei, params : ^GLdouble) { impl_GetnUniformdv(program, location, bufSize, params); };
	 GetnUniformfv :: proc "c" (program : GLuint, location : GLint, bufSize : GLsizei, params : ^GLfloat) { impl_GetnUniformfv(program, location, bufSize, params); };
	 GetnUniformiv :: proc "c" (program : GLuint, location : GLint, bufSize : GLsizei, params : ^GLint) { impl_GetnUniformiv(program, location, bufSize, params); };
	 GetnUniformuiv :: proc "c" (program : GLuint, location : GLint, bufSize : GLsizei, params : ^GLuint) { impl_GetnUniformuiv(program, location, bufSize, params); };
	 ReadnPixels :: proc "c" (x : GLint, y : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, bufSize : GLsizei, data : rawptr) { impl_ReadnPixels(x, y, width, height, cast(u32)format, cast(u32)type, bufSize, data); };
	 GetnMapdv :: proc "c" (target : GLenum, query : GLenum, bufSize : GLsizei, v : ^GLdouble) { impl_GetnMapdv(cast(u32)target, cast(u32)query, bufSize, v); };
	 GetnMapfv :: proc "c" (target : GLenum, query : GLenum, bufSize : GLsizei, v : ^GLfloat) { impl_GetnMapfv(cast(u32)target, cast(u32)query, bufSize, v); };
	 GetnMapiv :: proc "c" (target : GLenum, query : GLenum, bufSize : GLsizei, v : ^GLint) { impl_GetnMapiv(cast(u32)target, cast(u32)query, bufSize, v); };
	 GetnPixelMapusv :: proc "c" (_map : GLenum, bufSize : GLsizei, values : ^GLushort) { impl_GetnPixelMapusv(cast(u32)_map, bufSize, values); };
	 GetnPixelMapfv :: proc "c" (_map : GLenum, bufSize : GLsizei, values : ^GLfloat) { impl_GetnPixelMapfv(cast(u32)_map, bufSize, values); };
	 GetnPixelMapuiv :: proc "c" (_map : GLenum, bufSize : GLsizei, values : ^GLuint) { impl_GetnPixelMapuiv(cast(u32)_map, bufSize, values); };
	 GetnPolygonStipple :: proc "c" (bufSize : GLsizei, pattern : ^GLubyte) { impl_GetnPolygonStipple(bufSize, pattern); };
	 GetnColorTable :: proc "c" (target : GLenum, format : GLenum, type : GLenum, bufSize : GLsizei, table : rawptr) { impl_GetnColorTable(cast(u32)target, cast(u32)format, cast(u32)type, bufSize, table); };
	 GetnConvolutionFilter :: proc "c" (target : GLenum, format : GLenum, type : GLenum, bufSize : GLsizei, image : rawptr) { impl_GetnConvolutionFilter(cast(u32)target, cast(u32)format, cast(u32)type, bufSize, image); };
	 GetnSeparableFilter :: proc "c" (target : GLenum, format : GLenum, type : GLenum, rowBufSize : GLsizei, row : rawptr, columnBufSize : GLsizei, column : rawptr, span : rawptr) { impl_GetnSeparableFilter(cast(u32)target, cast(u32)format, cast(u32)type, rowBufSize, row, columnBufSize, column, span); };
	 GetnHistogram :: proc "c" (target : GLenum, reset : GLboolean, format : GLenum, type : GLenum, bufSize : GLsizei, values : rawptr) { impl_GetnHistogram(cast(u32)target, reset, cast(u32)format, cast(u32)type, bufSize, values); };
	 GetnMinmax :: proc "c" (target : GLenum, reset : GLboolean, format : GLenum, type : GLenum, bufSize : GLsizei, values : rawptr) { impl_GetnMinmax(cast(u32)target, reset, cast(u32)format, cast(u32)type, bufSize, values); };
	 TextureBarrier :: proc "c" () { impl_TextureBarrier(); };
	 GetUnsignedBytevEXT :: proc "c" (pname : GLenum, data : ^GLubyte) { impl_GetUnsignedBytevEXT(cast(u32)pname, data); };
// VERSION_4_6
	 TexPageCommitmentARB :: proc "c" (target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, commit : GLboolean) { impl_TexPageCommitmentARB(cast(u32)target, level, xoffset, yoffset, zoffset, width, height, depth, commit); };
	 SpecializeShader :: proc "c" (shader : GLuint, pEntryPoint : GLstring, numSpecializationConstants : GLuint, pConstantIndex : ^GLuint, pConstantValue : ^GLuint) { impl_SpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); };
	 MultiDrawArraysIndirectCount :: proc "c" (mode : GLenum, indirect : ^DrawArraysIndirectCommand, drawcount : GLsizei, maxdrawcount : GLsizei, stride : GLsizei) { impl_MultiDrawArraysIndirectCount(cast(u32)mode, indirect, drawcount, maxdrawcount, stride); };
	 MultiDrawElementsIndirectCount :: proc "c" (mode : GLenum, type : GLenum, indirect : ^DrawElementsIndirectCommand, drawcount : GLsizei, maxdrawcount : GLsizei, stride : GLsizei) { impl_MultiDrawElementsIndirectCount(cast(u32)mode, cast(u32)type, indirect, drawcount, maxdrawcount, stride); };
	 PolygonOffsetClamp :: proc "c" (factor : GLfloat, units : GLfloat, clamp : GLfloat) { impl_PolygonOffsetClamp(factor, units, clamp); };


	//functions with return values
// VERSION_1_0
	 GetError :: proc "c" () -> GLenum { return cast(GLenum) impl_GetError(); };
	 GetString :: proc "c" (name : GLenum) -> GLstring { return impl_GetString(cast(u32)name); };
	 IsEnabled :: proc "c" (cap : GLenum) -> GLboolean { return impl_IsEnabled(cast(u32)cap); };
// VERSION_1_1
	 IsTexture :: proc "c" (texture : GLuint) -> GLboolean { return impl_IsTexture(texture); };
// VERSION_1_2
// VERSION_1_3
// VERSION_1_4
// VERSION_1_5
	 IsQuery :: proc "c" (id : GLuint) -> GLboolean { return impl_IsQuery(id); };
	 IsBuffer :: proc "c" (buffer : GLuint) -> GLboolean { return impl_IsBuffer(buffer); };
	 MapBuffer :: proc "c" (target : GLenum, access : GLenum) -> rawptr { return impl_MapBuffer(cast(u32)target, cast(u32)access); };
	 UnmapBuffer :: proc "c" (target : GLenum) -> GLboolean { return impl_UnmapBuffer(cast(u32)target); };
// VERSION_2_0
	 CreateProgram :: proc "c" () -> GLuint { return impl_CreateProgram(); };
	 CreateShader :: proc "c" (type : GLenum) -> GLuint { return impl_CreateShader(cast(u32)type); };
	 GetAttribLocation :: proc "c" (program : GLuint, name : GLstring) -> GLint { return impl_GetAttribLocation(program, name); };
	 GetUniformLocation :: proc "c" (program : GLuint, name : GLstring) -> GLint { return impl_GetUniformLocation(program, name); };
	 IsProgram :: proc "c" (program : GLuint) -> GLboolean { return impl_IsProgram(program); };
	 IsShader :: proc "c" (shader : GLuint) -> GLboolean { return impl_IsShader(shader); };
// VERSION_2_1
//VERSION_3_0
	 IsEnabledi :: proc "c" (target : GLenum, index : GLuint) -> GLboolean { return impl_IsEnabledi(cast(u32)target, index); };
	 GetFragDataLocation :: proc "c" (program : GLuint, name : GLstring) -> GLint { return impl_GetFragDataLocation(program, name); };
	 GetStringi :: proc "c" (name : GLenum, index : GLuint) -> GLstring { return impl_GetStringi(cast(u32)name, index); };
	 IsRenderbuffer :: proc "c" (renderbuffer : GLuint) -> GLboolean { return impl_IsRenderbuffer(renderbuffer); };
	 IsFramebuffer :: proc "c" (framebuffer : GLuint) -> GLboolean { return impl_IsFramebuffer(framebuffer); };
	 CheckFramebufferStatus :: proc "c" (target : GLenum) -> GLenum { return cast(GLenum) impl_CheckFramebufferStatus(cast(u32)target); };
	 MapBufferRange :: proc "c" (target : GLenum, offset : GLintptr, length : GLsizeiptr, access : GLbitfield) -> rawptr { return impl_MapBufferRange(cast(u32)target, offset, length, cast(u32)access); };
	 IsVertexArray :: proc "c" (array : GLuint) -> GLboolean { return impl_IsVertexArray(array); };
// VERSION_3_1
	 GetUniformBlockIndex :: proc "c" (program : GLuint, uniformBlockName : GLstring) -> GLuint { return impl_GetUniformBlockIndex(program, uniformBlockName); };
// VERSION_3_2
	 FenceSync :: proc "c" (condition : GLenum, flags : GLbitfield) -> GLsync { return impl_FenceSync(cast(u32)condition, cast(u32)flags); };
	 IsSync :: proc "c" (sync : GLsync) -> GLboolean { return impl_IsSync(sync); };
	 ClientWaitSync :: proc "c" (sync : GLsync, flags : GLbitfield, timeout : GLuint64) -> GLenum { return cast(GLenum) impl_ClientWaitSync(sync, cast(u32)flags, timeout); };
// VERSION_3_3
	 GetFragDataIndex :: proc "c" (program : GLuint, name : GLstring) -> GLint { return impl_GetFragDataIndex(program, name); };
	 IsSampler :: proc "c" (sampler : GLuint) -> GLboolean { return impl_IsSampler(sampler); };
// VERSION_4_0
	 GetSubroutineUniformLocation :: proc "c" (program : GLuint, shadertype : GLenum, name : GLstring) -> GLint { return impl_GetSubroutineUniformLocation(program, cast(u32)shadertype, name); };
	 GetSubroutineIndex :: proc "c" (program : GLuint, shadertype : GLenum, name : GLstring) -> GLuint { return impl_GetSubroutineIndex(program, cast(u32)shadertype, name); };
	 IsTransformFeedback :: proc "c" (id : GLuint) -> GLboolean { return impl_IsTransformFeedback(id); };
	 GetTextureHandleARB :: proc "c" (target : GLenum) -> GLuint64 { return impl_GetTextureHandleARB(cast(u32)target); };
	 GetTextureSamplerHandleARB :: proc "c" (target : GLenum, sampler : GLuint) -> GLuint64 { return impl_GetTextureSamplerHandleARB(cast(u32)target, sampler); };
	 GetImageHandleARB :: proc "c" (texture : GLuint, level : GLint, layered : GLboolean, layer : GLint, format : GLenum) -> GLuint64 { return impl_GetImageHandleARB(texture, level, layered, layer, cast(u32)format); };
// VERSION_4_1
	 CreateShaderProgramv :: proc "c" (type : GLenum, count : GLsizei, conststrings : ^GLstring) -> GLuint { return impl_CreateShaderProgramv(cast(u32)type, count, conststrings); };
	 IsProgramPipeline :: proc "c" (pipeline : GLuint) -> GLboolean { return impl_IsProgramPipeline(pipeline); };
// VERSION_4_2
// VERSION_4_3
	 GetProgramResourceIndex :: proc "c" (program : GLuint, programInterface : GLenum, name : GLstring) -> GLuint { return impl_GetProgramResourceIndex(program, cast(u32)programInterface, name); };
	 GetProgramResourceLocation :: proc "c" (program : GLuint, programInterface : GLenum, name : GLstring) -> GLint { return impl_GetProgramResourceLocation(program, cast(u32)programInterface, name); };
	 GetProgramResourceLocationIndex :: proc "c" (program : GLuint, programInterface : GLenum, name : GLstring) -> GLint { return impl_GetProgramResourceLocationIndex(program, cast(u32)programInterface, name); };
	 GetDebugMessageLog :: proc "c" (count : GLuint, bufSize : GLsizei, sources : ^GLenum, types : ^GLenum, ids : ^GLuint, severities : ^GLenum, lengths : ^GLsizei, messageLog : GLoutstring) -> GLuint { return impl_GetDebugMessageLog(count, bufSize, cast(^u32)sources, cast(^u32)types, ids, cast(^u32)severities, lengths, messageLog); };
// VERSION_4_4
// VERSION_4_5
	 MapNamedBuffer :: proc "c" (buffer : GLuint, access : GLenum) -> rawptr { return impl_MapNamedBuffer(buffer, cast(u32)access); };
	 MapNamedBufferRange :: proc "c" (buffer : GLuint, offset : GLintptr, length : GLsizeiptr, access : GLbitfield) -> rawptr { return impl_MapNamedBufferRange(buffer, offset, length, cast(u32)access); };
	 UnmapNamedBuffer :: proc "c" (buffer : GLuint) -> GLboolean { return impl_UnmapNamedBuffer(buffer); };
	 CheckNamedFramebufferStatus :: proc "c" (framebuffer : GLuint, target : GLenum) -> GLenum { return cast(GLenum) impl_CheckNamedFramebufferStatus(framebuffer, cast(u32)target); };
	 GetGraphicsResetStatus :: proc "c" () -> GLenum { return cast(GLenum) impl_GetGraphicsResetStatus(); };
// VERSION_4_6
}
